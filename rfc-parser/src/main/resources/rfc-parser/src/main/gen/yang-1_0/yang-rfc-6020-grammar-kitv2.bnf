/*
 * Copyright (c) 2021 PANTHEON.tech, s.r.o. All rights reserved.
 *
 *   This program and the accompanying materials are made available
 *   under the
 *   terms of the Eclipse Public License v1.0 which accompanies this
 *   distribution,  and is available at http://www.eclipse.org/legal/epl-v1.html
 */

module-stmt ::= optsep module-keyword sep identifier-arg-str
 optsep
 LEFT_BRACE stmtsep
 module-header-stmts
 linkage-stmts
 meta-stmts
 revision-stmts
 body-stmts
 RIGHT_BRACE optsep

submodule-stmt ::= optsep submodule-keyword sep identifier-arg-str
 optsep
 LEFT_BRACE stmtsep
 submodule-header-stmts
 linkage-stmts
 meta-stmts
 revision-stmts
 body-stmts
 RIGHT_BRACE optsep

module-header-stmts ::= // these stmts can appear in any order
  [yang-version-stmt stmtsep]
  namespace-stmt stmtsep
  prefix-stmt stmtsep

submodule-header-stmts ::=
  // these stmts can appear in any order
  [yang-version-stmt stmtsep]
  belongs-to-stmt stmtsep

meta-stmts ::= // these stmts can appear in any order
  [organization-stmt stmtsep]
  [contact-stmt stmtsep]
  [description-stmt stmtsep]
  [reference-stmt stmtsep]

linkage-stmts ::= // these stmts can appear in any order
  (import-stmt stmtsep)*
  (include-stmt stmtsep)*

revision-stmts ::= (revision-stmt stmtsep)*

body-stmts ::= ((extension-stmt |
  feature-stmt |
  identity-stmt |
  typedef-stmt |
  grouping-stmt |
  data-def-stmt |
  augment-stmt |
  rpc-stmt |
  notification-stmt |
  deviation-stmt) stmtsep)*

data-def-stmt ::= container-stmt |
  leaf-stmt |
  leaf-list-stmt |
  list-stmt |
  choice-stmt |
  anyxml-stmt |
  uses-stmt

yang-version-stmt ::= yang-version-keyword sep yang-version-arg-str
  optsep stmtend

yang-version-arg-str ::= DOUBLE_QUOTE yang-version-arg DOUBLE_QUOTE

yang-version-arg ::= ONE

import-stmt ::= import-keyword sep identifier-arg-str optsep
 LEFT_BRACE stmtsep
 prefix-stmt stmtsep
 [revision-date-stmt stmtsep]
 RIGHT_BRACE

include-stmt ::= include-keyword sep identifier-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 [revision-date-stmt stmtsep]
 RIGHT_BRACE)

namespace-stmt ::= namespace-keyword sep uri-str optsep stmtend

uri-str ::= // a string that matches the rule URI in RFC 3986

prefix-stmt ::= prefix-keyword sep prefix-arg-str
  optsep stmtend

belongs-to-stmt ::= belongs-to-keyword sep identifier-arg-str
 optsep
 LEFT_BRACE stmtsep
 prefix-stmt stmtsep
 RIGHT_BRACE

organization-stmt ::= organization-keyword sep string
  optsep stmtend

contact-stmt ::= contact-keyword sep string optsep stmtend

description-stmt ::= description-keyword sep string optsep
  stmtend

reference-stmt ::= reference-keyword sep string optsep stmtend

units-stmt ::= units-keyword sep string optsep stmtend

revision-stmt ::= revision-keyword sep revision-date optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE)

revision-date ::= date-arg-str

revision-date-stmt ::= revision-date-keyword sep revision-date stmtend

extension-stmt ::= extension-keyword sep identifier-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [argument-stmt stmtsep]
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE)

argument-stmt ::= argument-keyword sep identifier-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 [yin-element-stmt stmtsep]
 RIGHT_BRACE)

yin-element-stmt ::= yin-element-keyword sep yin-element-arg-str
  stmtend

yin-element-arg-str ::= DOUBLE_QUOTE yin-element-arg DOUBLE_QUOTE

yin-element-arg ::= true-keyword | false-keyword

identity-stmt ::= identity-keyword sep identifier-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [base-stmt stmtsep]
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE)

base-stmt ::= base-keyword sep identifier-ref-arg-str
  optsep stmtend

feature-stmt ::= feature-keyword sep identifier-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 (if-feature-stmt stmtsep)*
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE)

if-feature-stmt ::= if-feature-keyword sep identifier-ref-arg-str
  optsep stmtend

typedef-stmt ::= typedef-keyword sep identifier-arg-str optsep
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 type-stmt stmtsep
 [units-stmt stmtsep]
 [default-stmt stmtsep]
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE

type-stmt ::= type-keyword sep identifier-ref-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 [ type-body-stmts ]
 RIGHT_BRACE)

 type-body-stmts ::= numerical-restrictions |
  decimal64-specification |
  string-restrictions |
  enum-specification |
  leafref-specification |
  identityref-specification |
  instance-identifier-specification |
  bits-specification |
  union-specification |
  binary-specification

binary-specification ::= [length-stmt stmtsep]

numerical-restrictions ::= range-stmt stmtsep

range-stmt ::= range-keyword sep range-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [error-message-stmt stmtsep]
 [error-app-tag-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE)

 decimal64-specification ::= // these stmts can appear in any order
  fraction-digits-stmt
  [range-stmt stmtsep]

fraction-digits-stmt ::= fraction-digits-keyword sep
  fraction-digits-arg-str stmtend

fraction-digits-arg-str ::= DOUBLE_QUOTE fraction-digits-arg DOUBLE_QUOTE

fraction-digits-arg ::= (ONE [ZERO | ONE | TWO | THREE | FOUR |
 FIVE | SIX | SEVEN | EIGHT])
  | TWO | THREE | FOUR | FIVE | SIX | SEVEN | EIGHT | NINE

string-restrictions ::= // these stmts can appear in any order
  [length-stmt stmtsep]
  (pattern-stmt stmtsep)*

length-stmt ::= length-keyword sep length-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [error-message-stmt stmtsep]
 [error-app-tag-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE)

pattern-stmt ::= pattern-keyword sep string optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [error-message-stmt stmtsep]
 [error-app-tag-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE)

default-stmt ::= default-keyword sep string stmtend

enum-specification ::= (enum-stmt stmtsep)+

enum-stmt ::= enum-keyword sep string optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [value-stmt stmtsep]
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE)

leafref-specification ::=
  // these stmts can appear in any order
  path-stmt stmtsep
  [require-instance-stmt stmtsep]

path-stmt ::= path-keyword sep path-arg-str stmtend

require-instance-stmt ::= require-instance-keyword sep
  require-instance-arg-str stmtend

require-instance-arg-str ::= DOUBLE_QUOTE require-instance-arg DOUBLE_QUOTE

require-instance-arg ::= true-keyword | false-keyword

instance-identifier-specification ::=
  [require-instance-stmt stmtsep]

identityref-specification ::=
  base-stmt stmtsep

union-specification ::= (type-stmt stmtsep)+

bits-specification ::= (bit-stmt stmtsep)+

bit-stmt ::= bit-keyword sep identifier-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [position-stmt stmtsep]
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE)

position-stmt ::= position-keyword sep
  position-value-arg-str stmtend

position-value-arg-str ::= DOUBLE_QUOTE position-value-arg DOUBLE_QUOTE

position-value-arg ::= non-negative-integer-value

status-stmt ::= status-keyword sep status-arg-str stmtend

status-arg-str ::= DOUBLE_QUOTE status-arg DOUBLE_QUOTE

status-arg ::= current-keyword |
  obsolete-keyword |
  deprecated-keyword

config-stmt ::= config-keyword sep
  config-arg-str stmtend

config-arg-str ::= DOUBLE_QUOTE config-arg DOUBLE_QUOTE

config-arg ::= true-keyword | false-keyword

mandatory-stmt ::= mandatory-keyword sep
  mandatory-arg-str stmtend

mandatory-arg-str ::= DOUBLE_QUOTE mandatory-arg DOUBLE_QUOTE

mandatory-arg ::= true-keyword | false-keyword

presence-stmt ::= presence-keyword sep string stmtend

ordered-by-stmt ::= ordered-by-keyword sep
  ordered-by-arg-str stmtend

ordered-by-arg-str ::= DOUBLE_QUOTE ordered-by-arg DOUBLE_QUOTE

ordered-by-arg ::= user-keyword | system-keyword

must-stmt ::= must-keyword sep string optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [error-message-stmt stmtsep]
 [error-app-tag-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE)

error-message-stmt ::= error-message-keyword sep string stmtend

error-app-tag-stmt ::= error-app-tag-keyword sep string stmtend

min-elements-stmt ::= min-elements-keyword sep
  min-value-arg-str stmtend

min-value-arg-str ::= DOUBLE_QUOTE min-value-arg DOUBLE_QUOTE

min-value-arg ::= non-negative-integer-value

max-elements-stmt ::= max-elements-keyword sep
  max-value-arg-str stmtend

max-value-arg-str ::= DOUBLE_QUOTE max-value-arg DOUBLE_QUOTE

max-value-arg ::= unbounded-keyword |
  positive-integer-value

value-stmt ::= value-keyword sep integer-value-arg-str stmtend

integer-value-arg-str ::= DOUBLE_QUOTE integer-value-arg DOUBLE_QUOTE

integer-value-arg ::= integer-value

grouping-stmt ::= grouping-keyword sep identifier-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 ((typedef-stmt |
 grouping-stmt) stmtsep)*
 (data-def-stmt stmtsep)*
 RIGHT_BRACE)

container-stmt ::= container-keyword sep identifier-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [when-stmt stmtsep]
 (if-feature-stmt stmtsep)*
 (must-stmt stmtsep)*
 [presence-stmt stmtsep]
 [config-stmt stmtsep]
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 ((typedef-stmt |
 grouping-stmt) stmtsep)*
 (data-def-stmt stmtsep)*
 RIGHT_BRACE)

leaf-stmt ::= leaf-keyword sep identifier-arg-str optsep
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [when-stmt stmtsep]
 (if-feature-stmt stmtsep)*
 type-stmt stmtsep
 [units-stmt stmtsep]
 (must-stmt stmtsep)*
 [default-stmt stmtsep]
 [config-stmt stmtsep]
 [mandatory-stmt stmtsep]
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE

leaf-list-stmt ::= leaf-list-keyword sep identifier-arg-str optsep
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [when-stmt stmtsep]
 (if-feature-stmt stmtsep)*
 type-stmt stmtsep
 [units-stmt stmtsep]
 (must-stmt stmtsep)*
 [config-stmt stmtsep]
 [min-elements-stmt stmtsep]
 [max-elements-stmt stmtsep]
 [ordered-by-stmt stmtsep]
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE

list-stmt ::= list-keyword sep identifier-arg-str optsep
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [when-stmt stmtsep]
 (if-feature-stmt stmtsep)*
 (must-stmt stmtsep)*
 [key-stmt stmtsep]
 (unique-stmt stmtsep)*
 [config-stmt stmtsep]
 [min-elements-stmt stmtsep]
 [max-elements-stmt stmtsep]
 [ordered-by-stmt stmtsep]
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 ((typedef-stmt |
 grouping-stmt) stmtsep)*
 (data-def-stmt stmtsep)+
 RIGHT_BRACE

key-stmt ::= key-keyword sep key-arg-str stmtend

key-arg-str ::= DOUBLE_QUOTE key-arg DOUBLE_QUOTE

key-arg ::= node-identifier (sep node-identifier)*

unique-stmt ::= unique-keyword sep unique-arg-str stmtend

unique-arg-str ::= DOUBLE_QUOTE unique-arg DOUBLE_QUOTE

unique-arg ::= descendant-schema-nodeid
  (sep descendant-schema-nodeid)*

choice-stmt ::= choice-keyword sep identifier-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [when-stmt stmtsep]
 (if-feature-stmt stmtsep)*
 [default-stmt stmtsep]
 [config-stmt stmtsep]
 [mandatory-stmt stmtsep]
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 ((short-case-stmt | case-stmt) stmtsep)*
 RIGHT_BRACE)

short-case-stmt ::= container-stmt |
  leaf-stmt |
  leaf-list-stmt |
  list-stmt |
  anyxml-stmt

case-stmt ::= case-keyword sep identifier-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [when-stmt stmtsep]
 (if-feature-stmt stmtsep)*
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 (data-def-stmt stmtsep)*
 RIGHT_BRACE)

anyxml-stmt ::= anyxml-keyword sep identifier-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [when-stmt stmtsep]
 (if-feature-stmt stmtsep)*
 (must-stmt stmtsep)*
 [config-stmt stmtsep]
 [mandatory-stmt stmtsep]
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE)

uses-stmt ::= uses-keyword sep identifier-ref-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [when-stmt stmtsep]
 (if-feature-stmt stmtsep)*
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 (refine-stmt stmtsep)*
 (uses-augment-stmt stmtsep)*
 RIGHT_BRACE)

refine-stmt ::= refine-keyword sep refine-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 (refine-container-stmts |
 refine-leaf-stmts |
 refine-leaf-list-stmts |
 refine-list-stmts |
 refine-choice-stmts |
 refine-case-stmts |
 refine-anyxml-stmts)
 RIGHT_BRACE)

refine-arg-str ::= DOUBLE_QUOTE refine-arg DOUBLE_QUOTE

refine-arg ::= descendant-schema-nodeid

refine-container-stmts ::=
  // these stmts can appear in any order
  (must-stmt stmtsep)*
  [presence-stmt stmtsep]
  [config-stmt stmtsep]
  [description-stmt stmtsep]
  [reference-stmt stmtsep]

refine-leaf-stmts ::= // these stmts can appear in any order
  (must-stmt stmtsep)*
  [default-stmt stmtsep]
  [config-stmt stmtsep]
  [mandatory-stmt stmtsep]
  [description-stmt stmtsep]
  [reference-stmt stmtsep]

refine-leaf-list-stmts ::=
  // these stmts can appear in any order
  (must-stmt stmtsep)*
  [config-stmt stmtsep]
  [min-elements-stmt stmtsep]
  [max-elements-stmt stmtsep]
  [description-stmt stmtsep]
  [reference-stmt stmtsep]

refine-list-stmts ::= // these stmts can appear in any order
  (must-stmt stmtsep)*
  [config-stmt stmtsep]
  [min-elements-stmt stmtsep]
  [max-elements-stmt stmtsep]
  [description-stmt stmtsep]
  [reference-stmt stmtsep]

refine-choice-stmts ::= // these stmts can appear in any order
  [default-stmt stmtsep]
  [config-stmt stmtsep]
  [mandatory-stmt stmtsep]
  [description-stmt stmtsep]
  [reference-stmt stmtsep]

refine-case-stmts ::= // these stmts can appear in any order
  [description-stmt stmtsep]
  [reference-stmt stmtsep]

refine-anyxml-stmts ::= // these stmts can appear in any order
  (must-stmt stmtsep)*
  [config-stmt stmtsep]
  [mandatory-stmt stmtsep]
  [description-stmt stmtsep]
  [reference-stmt stmtsep]

uses-augment-stmt ::= augment-keyword sep uses-augment-arg-str optsep
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [when-stmt stmtsep]
 (if-feature-stmt stmtsep)*
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 ((data-def-stmt stmtsep) |
 (case-stmt stmtsep))+
  RIGHT_BRACE

uses-augment-arg-str ::= DOUBLE_QUOTE uses-augment-arg DOUBLE_QUOTE

uses-augment-arg ::= descendant-schema-nodeid

augment-stmt ::= augment-keyword sep augment-arg-str optsep
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [when-stmt stmtsep]
 (if-feature-stmt stmtsep)*
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 ((data-def-stmt stmtsep) |
 (case-stmt stmtsep))+
  RIGHT_BRACE

augment-arg-str ::= DOUBLE_QUOTE augment-arg DOUBLE_QUOTE

augment-arg ::= absolute-schema-nodeid

unknown-statement ::= prefix COLON identifier [sep string] optsep
 (SEMICOLON | LEFT_BRACE optsep (unknown-statement2 optsep)* RIGHT_BRACE)
unknown-statement2 ::= [prefix COLON] identifier [sep string] optsep
 (SEMICOLON | LEFT_BRACE optsep (unknown-statement2 optsep)* RIGHT_BRACE)

when-stmt ::= when-keyword sep string optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 RIGHT_BRACE)

rpc-stmt ::= rpc-keyword sep identifier-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 (if-feature-stmt stmtsep)*
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 ((typedef-stmt |
 grouping-stmt) stmtsep)*
 [input-stmt stmtsep]
 [output-stmt stmtsep]
 RIGHT_BRACE)

input-stmt ::= input-keyword optsep
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 ((typedef-stmt |
 grouping-stmt) stmtsep)*
 (data-def-stmt stmtsep)+
 RIGHT_BRACE

output-stmt ::= output-keyword optsep
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 ((typedef-stmt |
 grouping-stmt) stmtsep)*
 (data-def-stmt stmtsep)+
 RIGHT_BRACE

notification-stmt ::= notification-keyword sep
 identifier-arg-str optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 (if-feature-stmt stmtsep)*
 [status-stmt stmtsep]
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 ((typedef-stmt |
 grouping-stmt) stmtsep)*
 (data-def-stmt stmtsep)*
 RIGHT_BRACE)

deviation-stmt ::= deviation-keyword sep
 deviation-arg-str optsep
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [description-stmt stmtsep]
 [reference-stmt stmtsep]
 (deviate-not-supported-stmt |
 (deviate-add-stmt |
 deviate-replace-stmt |
 deviate-delete-stmt)+)                                                                                                                                                                                                     
 RIGHT_BRACE

deviation-arg-str ::= DOUBLE_QUOTE deviation-arg DOUBLE_QUOTE

deviation-arg ::= absolute-schema-nodeid

deviate-not-supported-stmt ::=
 deviate-keyword sep
 not-supported-keyword optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 RIGHT_BRACE)

deviate-add-stmt ::= deviate-keyword sep add-keyword optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [units-stmt stmtsep]
 (must-stmt stmtsep)*
 (unique-stmt stmtsep)*
 [default-stmt stmtsep]
 [config-stmt stmtsep]
 [mandatory-stmt stmtsep]
 [min-elements-stmt stmtsep]
 [max-elements-stmt stmtsep]
 RIGHT_BRACE)

deviate-delete-stmt ::= deviate-keyword sep delete-keyword optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [units-stmt stmtsep]
 (must-stmt stmtsep)*
 (unique-stmt stmtsep)*
 [default-stmt stmtsep]
 RIGHT_BRACE)

deviate-replace-stmt ::= deviate-keyword sep replace-keyword optsep
 (SEMICOLON |
 LEFT_BRACE stmtsep
 // these stmts can appear in any order
 [type-stmt stmtsep]
 [units-stmt stmtsep]
 [default-stmt stmtsep]
 [config-stmt stmtsep]
 [mandatory-stmt stmtsep]
 [min-elements-stmt stmtsep]
 [max-elements-stmt stmtsep]
 RIGHT_BRACE)
// Ranges

range-arg-str ::= DOUBLE_QUOTE range-arg DOUBLE_QUOTE

range-arg ::= range-part (optsep PIPE optsep range-part)*

range-part ::= range-boundary
 [optsep DOUBLE_DOT optsep range-boundary]

range-boundary ::= min-keyword | max-keyword |
  integer-value | decimal-value
// Lengths

length-arg-str ::= DOUBLE_QUOTE length-arg DOUBLE_QUOTE

length-arg ::= length-part (optsep PIPE optsep length-part)*

length-part ::= length-boundary
 [optsep DOUBLE_DOT optsep length-boundary]

length-boundary ::= min-keyword | max-keyword |
  non-negative-integer-value
// Date

date-arg-str ::= DOUBLE_QUOTE date-arg DOUBLE_QUOTE

date-arg ::= DIGIT DIGIT DIGIT DIGIT DASH DIGIT DIGIT DASH DIGIT DIGIT
// Schema Node Identifiers

schema-nodeid ::= absolute-schema-nodeid |
  descendant-schema-nodeid

absolute-schema-nodeid ::= (FORWARD_SLASH node-identifier)+

 descendant-schema-nodeid ::=
  node-identifier
  [absolute-schema-nodeid]

node-identifier ::= [prefix COLON] identifier
// Instance Identifiers

instance-identifier ::= (FORWARD_SLASH (node-identifier predicate*))+

predicate ::= OPEN_BRACKET WSP* (predicate-expr | pos) WSP* CLOSED_BRACKET

predicate-expr ::= (node-identifier | DOT) WSP* EQUALS WSP*
 ((DQUOTE string DQUOTE) |
 (SQUOTE string SQUOTE))

pos ::= non-negative-integer-value
// leafref path

path-arg-str ::= DOUBLE_QUOTE path-arg DOUBLE_QUOTE

path-arg ::= absolute-path | relative-path

absolute-path ::= (FORWARD_SLASH (node-identifier path-predicate*))+

relative-path ::= (DOUBLE_DOT FORWARD_SLASH)+ descendant-path

descendant-path ::= node-identifier
  [path-predicate* absolute-path]

path-predicate ::= OPEN_BRACKET WSP* path-equality-expr WSP* CLOSED_BRACKET

path-equality-expr ::= node-identifier WSP* EQUALS WSP* path-key-expr

path-key-expr ::= current-function-invocation WSP* FORWARD_SLASH WSP*
 rel-path-keyexpr

rel-path-keyexpr ::= (DOUBLE_DOT WSP* FORWARD_SLASH WSP*)+
 (node-identifier WSP* FORWARD_SLASH WSP*)*
 node-identifier
//; Keywords, using abnfgen's syntax for case-sensitive strings
// statement keywords
anyxml-keyword ::= 'anyxml'
argument-keyword ::= 'argument'
augment-keyword ::= 'augment'
base-keyword ::= 'base'
belongs-to-keyword ::= 'belongs-to'
bit-keyword ::= 'bit'
case-keyword ::= 'case'
choice-keyword ::= 'choice'
config-keyword ::= 'config'
contact-keyword ::= 'contact'
container-keyword ::= 'container'
default-keyword ::= 'default'
description-keyword ::= 'description'
enum-keyword ::= 'enum'
error-app-tag-keyword ::= 'error-app-tag'
error-message-keyword ::= 'error-message'
extension-keyword ::= 'extension'
deviation-keyword ::= 'deviation'
deviate-keyword ::= 'deviate'
feature-keyword ::= 'feature'
fraction-digits-keyword ::= 'fraction-digits'
grouping-keyword ::= 'grouping'
identity-keyword ::= 'identity'
if-feature-keyword ::= 'if-feature'
import-keyword ::= 'import'
include-keyword ::= 'include'
input-keyword ::= 'input'
key-keyword ::= 'key'
leaf-keyword ::= 'leaf'
leaf-list-keyword ::= 'leaf-list'
length-keyword ::= 'length'
list-keyword ::= 'list'
mandatory-keyword ::= 'mandatory'
max-elements-keyword ::= 'max-elements'
min-elements-keyword ::= 'min-elements'
module-keyword ::= 'module'
must-keyword ::= 'must'
namespace-keyword ::= 'namespace'
ordered-by-keyword ::= 'ordered-by'
output-keyword ::= 'output'
path-keyword ::= 'path'
pattern-keyword ::= 'pattern'
position-keyword ::= 'position'
prefix-keyword ::= 'prefix'
presence-keyword ::= 'presence'
range-keyword ::= 'range'
reference-keyword ::= 'reference'
refine-keyword ::= 'refine'
require-instance-keyword ::= 'require-instance'
revision-keyword ::= 'revision'
revision-date-keyword ::= 'revision-date'
rpc-keyword ::= 'rpc'
status-keyword ::= 'status'
submodule-keyword ::= 'submodule'
type-keyword ::= 'type'
typedef-keyword ::= 'typedef'
unique-keyword ::= 'unique'
units-keyword ::= 'units'
uses-keyword ::= 'uses'
value-keyword ::= 'value'
when-keyword ::= 'when'
yin-element-keyword ::= 'yin-element'
// other keywords

add-keyword ::= 'add'
current-keyword ::= 'current'
delete-keyword ::= 'delete'
deprecated-keyword ::= 'deprecated'
false-keyword ::= 'false'
max-keyword ::= 'max'
min-keyword ::= 'min'
not-supported-keyword ::= 'not-supported'
obsolete-keyword ::= 'obsolete'
replace-keyword ::= 'replace'
system-keyword ::= 'system'
true-keyword ::= 'true'
unbounded-keyword ::= 'unbounded'
user-keyword ::= 'user'

current-function-invocation ::= current-keyword WSP* LEFT_PARENTHESIS WSP* RIGHT_PARENTHESIS
// Basic Rules

prefix-arg-str ::= DOUBLE_QUOTE prefix-arg DOUBLE_QUOTE

prefix-arg ::= prefix

prefix ::= identifier

identifier-arg-str ::= DOUBLE_QUOTE identifier-arg DOUBLE_QUOTE

identifier-arg ::= identifier
// An identifier MUST NOT start with (('X'|'x' )('M'|'m' )('L'|'l'))
identifier ::= (ALPHA | UNDERSCORE)
 (ALPHA | DIGIT | UNDERSCORE | DASH | DOT)*

identifier-ref-arg-str ::= DOUBLE_QUOTE identifier-ref-arg DOUBLE_QUOTE

identifier-ref-arg ::= [prefix COLON] identifier

string ::= // an unquoted string as returned by the scanner

integer-value ::= (DASH non-negative-integer-value) |
 non-negative-integer-value

non-negative-integer-value ::= ZERO | positive-integer-value

positive-integer-value ::= (non-zero-digit DIGIT*)

zero-integer-value ::= DIGIT+

stmtend ::= SEMICOLON | LEFT_BRACE unknown-statement* RIGHT_BRACE

sep ::= (WSP | line-break)+
  // unconditional separator

optsep ::= (WSP | line-break)*

stmtsep ::= (WSP | line-break | unknown-statement)*

line-break ::= CRLF | LF

non-zero-digit ::=   POSITIVE_NUMBER  

decimal-value ::= integer-value (DOT zero-integer-value)

SQUOTE ::= SINGLE_QUOTE
 // ' (Single Quote)
//
// RFC 5234 core rules.
//

ALPHA ::= ( LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER ) | ( LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER )
 // A-Z | a-z

CR ::= CARRIAGE_RETURN
 // carriage return

CRLF ::= CR LF
  // Internet standard new line

DIGIT ::= ( ZERO | POSITIVE_NUMBER )
 // 0-9

DQUOTE ::= DOUBLE_QUOTE
 // " (Double Quote)

HEXDIG ::= DIGIT |
 HEXDIGIT
 // only lower-case a..f

HTAB ::= TAB
 // horizontal tab

LF ::= LINEFEED
 // linefeed

SP ::= " "
 // space

VCHAR ::= ( EXCLAMATION_MARK | DOUBLE_QUOTE | HASH | DOLLAR_SIGN | PERCENT_SIGN | AMPERSAND | SINGLE_QUOTE | LEFT_PARENTHESIS | RIGHT_PARENTHESIS | ASTERISK | PLUS_SIGN | COMMA | DASH | DOT | FORWARD_SLASH | ZERO | POSITIVE_NUMBER | COLON | SEMICOLON | LESS_THAN_SIGN | EQUALS | GREATER_THAN_SIGN | QUESTION_MARK | AT_SIGN | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | OPEN_BRACKET | BACK_SLASH | CLOSED_BRACKET | CIRCUMFLEX_ACCENT | UNDERSCORE | GRAVE_ACCENT | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LETTER | LEFT_BRACE | PIPE | RIGHT_BRACE | TILDE )
 // visible printing characters

WSP ::= SP | HTAB
  // whitespace
