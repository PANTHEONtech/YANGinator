/*
 * Copyright (c) 2021 PANTHEON.tech, s.r.o. All rights reserved.
 *
 *   This program and the accompanying materials are made available
 *   under the
 *   terms of the Eclipse Public License v1.0 which accompanies this
 *   distribution,  and is available at http://www.eclipse.org/legal/epl-v1.html
 */

URI ::= scheme COLON hier-part [ QUESTION_MARK query ][HASH fragment ]

hier-part ::= "//" authority path-abempty
  | path-absolute
  | path-rootless
  | path-empty

URI-reference ::= URI | relative-ref

absolute-URI ::= scheme COLON hier-part [ QUESTION_MARK query ]

relative-ref ::= relative-part [ QUESTION_MARK query ][HASH fragment ]

relative-part ::= "//" authority path-abempty
  | path-absolute
  | path-noscheme
  | path-empty

scheme ::= ALPHA ( ALPHA | DIGIT | PLUS_SIGN | DASH | DOT )*

authority ::= [ userinfo AT_SIGN ] host [ COLON port ]
userinfo ::= ( unreserved | pct-encoded | sub-delims | COLON )*
host ::= IP-literal | IPv4address | reg-name
port ::= DIGIT*

IP-literal ::= OPEN_BRACKET ( IPv6address | IPvFuture ) CLOSED_BRACKET

IPvFuture ::= VERSION HEXDIG+ DOT ( unreserved | sub-delims | COLON )+

IPv6address ::= ( h16 COLON )(h16 COLON )(h16 COLON )(h16 COLON )(h16 COLON )(h16 COLON ) ls32
 | DOUBLE_COLON ( h16 COLON )(h16 COLON )(h16 COLON )(h16 COLON )(h16 COLON ) ls32
 | [ h16 ] DOUBLE_COLON ( h16 COLON )(h16 COLON )(h16 COLON )(h16 COLON ) ls32
 | [[  h16 COLON ] h16 ] DOUBLE_COLON ( h16 COLON )(h16 COLON )(h16 COLON ) ls32
 | [[  h16 COLON ][h16 COLON ] h16 ] DOUBLE_COLON ( h16 COLON )(h16 COLON ) ls32
 | [[  h16 COLON ][h16 COLON ][h16 COLON ] h16 ] DOUBLE_COLON h16 COLON ls32
 | [[  h16 COLON ][h16 COLON ][h16 COLON ][h16 COLON ] h16 ] DOUBLE_COLON ls32
 | [[  h16 COLON ][h16 COLON ][h16 COLON ][h16 COLON ][h16 COLON ] h16 ] DOUBLE_COLON h16
 | [[  h16 COLON ][h16 COLON ][h16 COLON ][h16 COLON ][h16 COLON ][h16 COLON ] h16 ] DOUBLE_COLON

h16 ::= (HEXDIG) | (HEXDIG HEXDIG) | (HEXDIG HEXDIG HEXDIG) | (HEXDIG HEXDIG HEXDIG HEXDIG)
ls32 ::= ( h16 COLON h16 ) | IPv4address
IPv4address ::= dec-octet DOT dec-octet DOT dec-octet DOT dec-octet

dec-octet ::= DIGIT // 0-9
 | POSITIVE_NUMBER DIGIT // 10-99
 | ONE DIGIT DIGIT // 100-199
 | TWO ( ZERO | ONE | TWO | THREE | FOUR ) DIGIT // 200-249
 | "25" ( ZERO | ONE | TWO | THREE | FOUR | FIVE ) // 250-255

reg-name ::= ( unreserved | pct-encoded | sub-delims )*

path ::= path-abempty // begins with FORWARD_SLASH or is empty
 | path-absolute // begins with FORWARD_SLASH but not "//"
 | path-noscheme // begins with a non-colon segment
 | path-rootless // begins with a segment
 | path-empty // zero characters

path-abempty ::= ( FORWARD_SLASH segment )*
path-absolute ::= FORWARD_SLASH [ segment-nz ( FORWARD_SLASH segment )* ]
path-noscheme ::= segment-nz-nc ( FORWARD_SLASH segment )*
path-rootless ::= segment-nz ( FORWARD_SLASH segment )*
path-empty ::= 0//pchar
segment ::= pchar*
segment-nz ::= pchar+
segment-nz-nc ::= ( unreserved | pct-encoded | sub-delims | AT_SIGN )+
 // non-zero-length segment without any colon COLON

pchar ::= unreserved | pct-encoded | sub-delims | COLON | AT_SIGN

query ::= ( pchar | FORWARD_SLASH | QUESTION_MARK )*

fragment ::= ( pchar | FORWARD_SLASH | QUESTION_MARK )*

pct-encoded ::= PERCENT_SIGN HEXDIG HEXDIG

unreserved ::= ALPHA | DIGIT | DASH | DOT | UNDERSCORE | TILDE
reserved ::= gen-delims | sub-delims
gen-delims ::= COLON | FORWARD_SLASH | QUESTION_MARK | HASH | OPEN_BRACKET | CLOSED_BRACKET | AT_SIGN
sub-delims ::= EXCLAMATION_MARK | DOLLAR_SIGN | AMPERSAND | SINGLE_QUOTE | LEFT_PARENTHESIS | RIGHT_PARENTHESIS
 | ASTERISK | PLUS_SIGN | COMMA | SEMICOLON | EQUALS
