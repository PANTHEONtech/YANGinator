{
 parserClass="tech.pantheon.yanginator.plugin.parser.YangParser"
  parserImports=[
  "static tech.pantheon.yanginator.plugin.external.ExternalRules.anyOrder"
  "static tech.pantheon.yanginator.plugin.external.ExternalRules.checkString"
  "static tech.pantheon.yanginator.plugin.external.ExternalRules.blockComment"
  "static tech.pantheon.yanginator.plugin.external.ExternalRules.fileReference"
  "static tech.pantheon.yanginator.plugin.external.ExternalRules.dummyElement"
  ]

  implements="tech.pantheon.yanginator.plugin.psi.YangNamedElement"
  extends="tech.pantheon.yanginator.plugin.psi.impl.YangNamedElementImpl"

  psiClassPrefix="Yang"
  psiImplClassSuffix="Impl"
  psiPackage="tech.pantheon.yanginator.plugin.psi"
  psiImplPackage="tech.pantheon.yanginator.plugin.psi.impl"

  elementTypeHolderClass="tech.pantheon.yanginator.plugin.psi.YangTypes"
  elementTypePrefix="YANG_"
  elementTypeClass="tech.pantheon.yanginator.plugin.psi.YangElementType"
  tokenTypeClass="tech.pantheon.yanginator.plugin.psi.YangTokenType"

  extends(".*stmt|unknown_statement.*")=yang-stmt

  generateTokenAccessors=true
}

yang ::=  (module-stmt | submodule-stmt | file-reference | ( WSP | ZERO_LENGTH_STRING | LINEFEED | CARRIAGE_RETURN )*)

private tokens ::= BLOCK_COMMENT | ONE | TWO | THREE | FOUR | FIVE | SIX | SEVEN |
 EIGHT | NINE | DATE | FRACTIONS | ZEROS | ESCAPES // do not change the order of tokens !


SPECIAL ::= (   ALPHA   [ALPHA |
 SOMETHING ALPHA] (ALPHA | DOG) ALPHA )

 SP ::= " "

dec-octet ::= DIGIT // 0-9
  | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" DIGIT  // 10-99
  |  "1" 2DIGIT   // 100-199
  |  "2"   "0" | "1" | "2" | "3" | "4"  DIGIT  // 200-249
  |  "2" "5"   "0" | "1" | "2" | "3" | "4" | "5"   // 250-255

fraction-digits-arg ::= ONE | TWO | THREE | FOUR | FIVE | SIX | SEVEN | EIGHT | NINE | FRACTIONS

DIGIT ::= "0" |
 "1" | "2"
 "1" | "2" | "3" |
 "4" | "5" |
                                   "6" | "7" | "8" | "9"
IPv6address ::= ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ls32
  |  "::" ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ls32
  | [  h16 ] "::" ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ls32
  | [ [ h16 ":" ] h16 ] "::" ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ls32
  | [ [ h16 ":" ][ h16 ":" ] h16 ] "::" ( h16 ":" ) ( h16 ":" ) ls32
  | [ [ h16 ":" ][ h16 ":" ][ h16 ":" ] h16 ] "::"  h16 ":"  ls32
  | [ [ h16 ":" ][ h16 ":" ][ h16 ":" ][ h16 ":" ] h16 ] "::"  ls32
  | [ [ h16 ":" ][ h16 ":" ][ h16 ":" ][ h16 ":" ][ h16 ":" ] h16 ] "::"  h16
  | [ [ h16 ":" ][ h16 ":" ][ h16 ":" ][ h16 ":" ][ h16 ":" ][ h16 ":" ] h16 ] "::"

VCHAR ::= "!" |'"' | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "[" |'\' | "]" | "^" | "_" | "`" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "{" | "|" | "}" | "~"
//////////////////////////////
//
// RFC 3986
//
//////////////////////////////

URI ::= scheme COLON hier-part [ QUESTION_MARK query ] [ HASH fragment ]

hier-part ::= DOUBLE_FORWARD_SLASH authority path-abempty
  | path-absolute
  | path-rootless
  | path-empty

URI-reference ::= URI | relative-ref

absolute-URI ::= scheme COLON hier-part [ QUESTION_MARK query ]

relative-ref ::= relative-part [ QUESTION_MARK query ] [ HASH fragment ]

relative-part ::= DOUBLE_FORWARD_SLASH authority path-abempty
  | path-absolute
  | path-noscheme
  | path-empty

scheme ::= ALPHA ( ALPHA | DIGIT | DATE | ALPHANUMERICAL_ALPHA_FIRST | ALPHANUMERICAL_DIGIT_FIRST | FRACTIONS | DIGITS | PLUS_SIGN | DASH | DOT )*

authority ::= [ userinfo AT_SIGN ] host [ COLON port ]
userinfo ::= ( unreserved | pct-encoded | sub-delims | COLON )*
host ::= IP-literal | IPv4address | reg-name
port ::= DIGIT* | DIGITS | FRACTIONS | ZEROS

IP-literal ::= OPEN_BRACKET ( IPv6address | IPvFuture ) CLOSED_BRACKET

IPvFuture ::= VERSION HEXDIG+ DOT ( unreserved | sub-delims | COLON )+

IPv6address ::= ( h16 COLON ) ( h16 COLON ) ( h16 COLON ) ( h16 COLON ) ( h16 COLON ) ( h16 COLON ) ls32
  |  DOUBLE_COLON ( h16 COLON ) ( h16 COLON ) ( h16 COLON ) ( h16 COLON ) ( h16 COLON ) ls32
  | [  h16 ] DOUBLE_COLON ( h16 COLON ) ( h16 COLON ) ( h16 COLON ) ( h16 COLON ) ls32
  | [ [ h16 COLON ] h16 ] DOUBLE_COLON ( h16 COLON ) ( h16 COLON ) ( h16 COLON ) ls32
  | [ [ h16 COLON ][ h16 COLON ] h16 ] DOUBLE_COLON ( h16 COLON ) ( h16 COLON ) ls32
  | [ [ h16 COLON ][ h16 COLON ][ h16 COLON ] h16 ] DOUBLE_COLON  h16 COLON  ls32
  | [ [ h16 COLON ][ h16 COLON ][ h16 COLON ][ h16 COLON ] h16 ] DOUBLE_COLON  ls32
  | [ [ h16 COLON ][ h16 COLON ][ h16 COLON ][ h16 COLON ][ h16 COLON ] h16 ] DOUBLE_COLON  h16
  | [ [ h16 COLON ][ h16 COLON ][ h16 COLON ][ h16 COLON ][ h16 COLON ][ h16 COLON ] h16 ] DOUBLE_COLON

h16 ::= (HEXDIG) | (HEXDIG HEXDIG) | (HEXDIG HEXDIG HEXDIG) | (HEXDIG HEXDIG HEXDIG HEXDIG)
ls32 ::= ( h16 COLON h16 ) | IPv4address
IPv4address ::= IPV4

dec-octet ::= DIGIT // 0-9
  | ( ONE | TWO | THREE | FOUR | FIVE | SIX | SEVEN | EIGHT | NINE ) DIGIT  // 10-99
  | ONE DIGIT DIGIT  // 100-199
  | TWO ( ZERO | ONE | TWO | THREE | FOUR ) DIGIT  // 200-249
  | TWO FIVE ( ZERO | ONE | TWO | THREE | FOUR | FIVE )  // 250-255 deviation against original rfc 3986

reg-name ::= ( unreserved | pct-encoded | sub-delims )*

path ::= path-abempty // begins with FORWARD_SLASH or is empty
  | path-absolute  // begins with FORWARD_SLASH but not DOUBLE_FORWARD_SLASH
  | path-noscheme  // begins with a non-colon segment
  | path-rootless  // begins with a segment
  | path-empty  // zero characters

path-abempty ::= ( FORWARD_SLASH segment )*
path-absolute ::= FORWARD_SLASH [ segment-nz ( FORWARD_SLASH segment )* ]
path-noscheme ::= segment-nz-nc ( FORWARD_SLASH segment )*
path-rootless ::= segment-nz ( FORWARD_SLASH segment )*
path-empty ::= ZERO_LENGTH_STRING// pchar deviation against original rfc 3986
segment ::= (string-splitter? pchar string-splitter?)*
segment-nz ::= (string-splitter? pchar string-splitter?)+
segment-nz-nc ::= (string-splitter? ( unreserved | pct-encoded | sub-delims | AT_SIGN ) string-splitter?)+
  // non-zero-length segment without any colon COLON

pchar ::= unreserved | pct-encoded | sub-delims | COLON | AT_SIGN | DOUBLE_COLON

query ::= ( pchar | FORWARD_SLASH | QUESTION_MARK )*

fragment ::= ( pchar | FORWARD_SLASH | QUESTION_MARK )*

pct-encoded ::= PERCENT_SIGN HEXDIG HEXDIG

unreserved ::= ALPHA | DIGIT | DATE | ALPHANUMERICAL_ALPHA_FIRST | ALPHANUMERICAL_DIGIT_FIRST | FRACTIONS | DIGITS | DASH | DOT | UNDERSCORE | TILDE
reserved ::= gen-delims | sub-delims
gen-delims ::= COLON | FORWARD_SLASH | QUESTION_MARK | HASH | OPEN_BRACKET | CLOSED_BRACKET | AT_SIGN
sub-delims ::= EXCLAMATION_MARK | DOLLAR_SIGN | AMPERSAND | SINGLE_QUOTE | LEFT_PARENTHESIS | RIGHT_PARENTHESIS
  | ASTERISK | PLUS_SIGN | COMMA | EQUALS
// Xpath functions
function-body-start ::= string-splitter? LEFT_PARENTHESIS
function-body-end ::= RIGHT_PARENTHESIS
function-body-node ::= string-splitter? (path-arg | DOT | schema-nodeid) string-splitter?
function-body-identity ::= string-splitter? identifier-arg-str string-splitter?
function-body-string ::= string-splitter? quoted-string string-splitter?
function-body-node-identity ::=  function-body-start function-body-node WSP* COMMA WSP* function-body-identity function-body-end
function-body-node-string ::=  function-body-start function-body-node WSP* COMMA WSP* function-body-string function-body-end
function-body-string-string ::= function-body-start function-body-string WSP* COMMA WSP* function-body-string function-body-end
deref-keyword ::= "deref"
deref-function ::= deref-keyword function-body-start function-body-node function-body-end
                    (schema-nodeid | FORWARD_SLASH? path-arg) string-splitter? EQUALS string-splitter? (true-keyword | false-keyword) |
    deref-keyword function-body-start function-body-node function-body-end (schema-nodeid | FORWARD_SLASH? path-arg) string-splitter? |
    deref-keyword function-body-start function-body-node function-body-end

rematch-keyword ::= "re-match"
rematch-function ::= rematch-keyword function-body-string-string

derived-from-keyword ::= "derived-from"
derived-from-function ::= derived-from-keyword function-body-node-identity

derived-from-or-self-keyword ::= "derived-from-or-self"
derived-from-or-self-function ::= derived-from-or-self-keyword function-body-node-identity

enum-value-keyword ::= "enum-value"
enum-value-function ::= enum-value-keyword function-body-start function-body-node function-body-end

bit-is-set-keyword ::= "bit-is-set"
bit-is-set-function ::= bit-is-set-keyword function-body-node-string

function ::= (deref-function |
    rematch-function |
    derived-from-or-self-function |
    derived-from-function |
    enum-value-function |
    bit-is-set-function)+

XPath-function ::= WSP* (and-keyword | not-keyword | or-keyword) WSP* string-splitter?
                   LEFT_PARENTHESIS string-splitter? function string-splitter? RIGHT_PARENTHESIS string-splitter? |
    WSP* (and-keyword | not-keyword | or-keyword) WSP* string-splitter? function string-splitter? |
    function string-splitter?

Quoted_xpath_function ::= DQUOTE XPath-function+ DQUOTE | SQUOTE XPath-function+ SQUOTE

string-splitter ::= (WSP* SQUOTE optsep PLUS_SIGN optsep SQUOTE WSP*) | (WSP* DQUOTE optsep PLUS_SIGN optsep DQUOTE WSP*)

quoted-path-arg ::= (DQUOTE path-arg (string-splitter path-arg)* DQUOTE) | (SQUOTE path-arg (string-splitter path-arg)* SQUOTE)

double-quoted-vchar ::= (SINGLE_QUOTE | BACK_SLASH | ESCAPES | VCHAR | SPACE | SEMICOLON | LEFT_BRACE | RIGHT_BRACE | TAB | LINEFEED sep | LINEFEED | CARRIAGE_RETURN)*

quoted-vchar ::= (VCHAR | BACK_SLASH | DOUBLE_QUOTE | ESCAPES | SPACE | SEMICOLON | LEFT_BRACE | RIGHT_BRACE | TAB | LINEFEED sep | LINEFEED | CARRIAGE_RETURN)*

VCHAR ::= (DATE | FRACTIONS | ZEROS | ALPHANUMERICAL_ALPHA_FIRST | ALPHANUMERICAL_DIGIT_FIRST | IPV4 | DIGITS | CHARS | APOSTROPHE | EXCLAMATION_MARK | HASH | DOLLAR_SIGN | PERCENT_SIGN | AMPERSAND | LEFT_PARENTHESIS | RIGHT_PARENTHESIS | ASTERISK | PLUS_SIGN | COMMA | DASH | DOT | FORWARD_SLASH | DOUBLE_FORWARD_SLASH | ZERO | ONE | TWO | THREE | FOUR | FIVE | SIX | SEVEN | EIGHT | NINE | COLON |  LESS_THAN_SIGN | EQUALS | GREATER_THAN_SIGN | QUESTION_MARK | AT_SIGN | ALPHA | OPEN_BRACKET | CLOSED_BRACKET | CIRCUMFLEX_ACCENT | UNDERSCORE | GRAVE_ACCENT | PIPE | TILDE | DOUBLE_DOT | DOUBLE_COLON | PARENT_FOLDER )

yang-keyword ::= action-keyword |
anydata-keyword |
anyxml-keyword |
argument-keyword |
augment-keyword |
base-keyword |
belongs-to-keyword |
bit-keyword |
case-keyword |
choice-keyword |
config-keyword |
contact-keyword |
container-keyword |
default-keyword |
description-keyword |
deviation-keyword |
deviate-keyword |
enum-keyword |
error-app-tag-keyword |
error-message-keyword |
extension-keyword |
feature-keyword |
fraction-digits-keyword |
grouping-keyword |
identity-keyword |
if-feature-keyword |
import-keyword |
include-keyword |
input-keyword |
key-keyword |
leaf-list-keyword |
leaf-keyword |
length-keyword |
list-keyword |
mandatory-keyword |
max-elements-keyword |
min-elements-keyword |
modifier-keyword |
module-keyword |
must-keyword |
namespace-keyword |
notification-keyword |
ordered-by-keyword |
organization-keyword |
output-keyword |
path-keyword |
pattern-keyword |
position-keyword |
prefix-keyword |
presence-keyword |
range-keyword |
reference-keyword |
refine-keyword |
require-instance-keyword |
revision-date-keyword |
revision-keyword |
rpc-keyword |
status-keyword |
submodule-keyword |
typedef-keyword |
type-keyword |
unique-keyword |
units-keyword |
uses-keyword |
value-keyword |
when-keyword |
yang-version-keyword |
yin-element-keyword
{
pin(".*") = 1
}

file-reference ::= <<fileReference>>
{implements="tech.pantheon.yanginator.plugin.reference.YangGeneratedReferenceType"
 extends="tech.pantheon.yanginator.plugin.reference.YangGeneratedReferenceTypeImpl"}

DOUBLE_FORWARD_SLASH ::= FORWARD_SLASH FORWARD_SLASH
BLOCK_COMMENT_START::= FORWARD_SLASH ASTERISK
BLOCK_COMMENT_END ::= ASTERISK FORWARD_SLASH

BLOCK_COMMENT_BODY ::= <<blockComment>>
BLOCK_COMMENT ::= BLOCK_COMMENT_START BLOCK_COMMENT_BODY BLOCK_COMMENT_END

comment ::= BLOCK_COMMENT |(DOUBLE_FORWARD_SLASH (DQUOTE | LEFT_BRACE | DOUBLE_BACKSLASH | BACKSLASH_QUOTE | RIGHT_BRACE | SEMICOLON | VCHAR | SPACE | TAB | BACK_SLASH | SINGLE_QUOTE | CARRIAGE_RETURN )+ ) | DOUBLE_FORWARD_SLASH
DOUBLE_BACKSLASH ::= '\\'
BACKSLASH_QUOTE ::= '\"'

indentable-string ::= ( quoted-string | string )
indentable-quoted-string ::= quoted-string

private revision-recover ::= !(revision-stmt |
 body-stmts |
 (RIGHT_BRACE stmtsep <<eof>>))

private header-recover ::= !( module-header-stmts |
  submodule-header-stmts |
  linkage-stmts |
  meta-stmts |
  revision-stmt |
  body-stmts |
  (RIGHT_BRACE stmtsep <<eof>>))

private meta-recover ::= !(meta-stmts |
  revision-stmt |
  body-stmts |
  (RIGHT_BRACE stmtsep <<eof>>))

private linkage-recover ::= !(linkage-stmts |
 meta-stmts |
 revision-stmt |
 body-stmts |
 (RIGHT_BRACE stmtsep <<eof>>))

private body-recovery ::=!(body-body-stmts | (RIGHT_BRACE stmtsep <<eof>>))
