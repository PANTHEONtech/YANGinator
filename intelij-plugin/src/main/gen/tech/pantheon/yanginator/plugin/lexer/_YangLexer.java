/*
 *
 *   Copyright (c) 2021-2023 PANTHEON.tech, s.r.o. All rights reserved.
 *
 *   This program and the accompanying materials are made available under the
 *   terms of the Eclipse Public License v1.0 which accompanies this distribution,
 *   and is available at http://www.eclipse.org/legal/epl-v10.html
 *
 */

/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package tech.pantheon.yanginator.plugin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ALPHA;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ALPHANUMERICAL_ALPHA_FIRST;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ALPHANUMERICAL_DIGIT_FIRST;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_AMPERSAND;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_APOSTROPHE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ASTERISK;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_AT_SIGN;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_BACK_SLASH;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_BLOCK_COMMENT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_CARRIAGE_RETURN;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_CHARS;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_CIRCUMFLEX_ACCENT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_CLOSED_BRACKET;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_COLON;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_COMMA;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DASH;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DATE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DIGITS;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOLLAR_SIGN;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOUBLE_COLON;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOUBLE_DOT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOUBLE_FORWARD_SLASH;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOUBLE_QUOTE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_EIGHT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_EQUALS;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ESCAPES;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_EXCLAMATION_MARK;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_FIVE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_FORWARD_SLASH;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_FOUR;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_FRACTIONS;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_GRAVE_ACCENT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_GREATER_THAN_SIGN;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_HASH;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_HEXDIG;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_IPV4;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_LEFT_BRACE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_LEFT_PARENTHESIS;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_LESS_THAN_SIGN;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_LINEFEED;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_NINE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ONE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_OPEN_BRACKET;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_PARENT_FOLDER;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_PERCENT_SIGN;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_PIPE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_PLUS_SIGN;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_QUESTION_MARK;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_RIGHT_BRACE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_RIGHT_PARENTHESIS;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SEMICOLON;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SEVEN;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SINGLE_QUOTE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SIX;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SPACE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_TAB;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_THREE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_TILDE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_TWO;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_UNDERSCORE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_VERSION;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ZERO;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ZEROS;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ZERO_LENGTH_STRING;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_YangLexer.flex</tt>
 */
public class _YangLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int[] ZZ_LEXSTATE = {
            0, 0
    };

    /**
     * Translates characters to character classes
     * Chosen bits are [7, 7, 7]
     * Total runtime size is 1928 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch >> 14] | ((ch >> 7) & 0x7f)] << 7) | (ch & 0x7f)];
    }

    /* The ZZ_CMAP_Z table has 68 entries */
    static final char[] ZZ_CMAP_Z = zzUnpackCMap(
            "\1\0\103\200");

    /* The ZZ_CMAP_Y table has 256 entries */
    static final char[] ZZ_CMAP_Y = zzUnpackCMap(
            "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

    /* The ZZ_CMAP_A table has 640 entries */
    static final char[] ZZ_CMAP_A = zzUnpackCMap(
            "\11\0\5\1\22\0\1\1\23\0\1\33\14\0\1\21\1\23\1\20\1\17\1\3\1\16\1\11\1\13\1" +
                    "\15\1\0\1\24\1\7\1\25\1\10\1\5\1\31\1\32\1\4\1\14\1\12\1\22\1\27\1\26\1\30" +
                    "\1\0\1\2\4\0\1\6\45\0\1\1\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1\57" +
                    "\0\1\1\40\0");

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\24\1\65\0\1\3\11\0\1\4" +
                    "\1\5\5\0\1\6\7\0\1\7\30\0\1\10\11\0" +
                    "\1\11\5\0\1\12\4\0\1\13\2\0\1\14\1\15" +
                    "\3\0\1\16\1\17\21\0\1\20\3\0\1\21\1\0" +
                    "\1\22\11\0\1\23\1\24\2\0\1\25\1\0\1\26" +
                    "\5\0\1\27\1\30\1\0\1\31\2\0\1\32\17\0" +
                    "\1\33\10\0\1\34\6\0\1\35\21\0\1\36\24\0" +
                    "\1\37\6\0\1\40\14\0\1\41\17\0\1\42\23\0" +
                    "\1\43\1\0\1\44\12\0\1\45\5\0\1\46\10\0" +
                    "\1\47\7\0\1\50\6\0\1\51\1\52\1\0\1\53" +
                    "\5\0\1\54\10\0\1\55\16\0\1\56\3\0\1\57" +
                    "\1\60\2\0\1\61\1\62\5\0\1\63\10\0\1\64" +
                    "\5\0\1\65\1\66\1\67\3\0\1\70\3\0\1\71" +
                    "\12\0\1\72\2\0\1\73\1\0\1\74\6\0\1\75" +
                    "\1\76\1\0\1\77\2\0\1\100\6\0\1\101\14\0" +
                    "\1\102\1\103";

    private static int[] zzUnpackAction() {
        int[] result = new int[502];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\34\0\70\0\124\0\160\0\214\0\250\0\304" +
                    "\0\340\0\374\0\u0118\0\u0134\0\u0150\0\u016c\0\u0188\0\u01a4" +
                    "\0\u01c0\0\u01dc\0\u01f8\0\u0214\0\u0230\0\u024c\0\u0268\0\u0284" +
                    "\0\u02a0\0\u02bc\0\u02d8\0\u02f4\0\u0310\0\u032c\0\u0348\0\u0364" +
                    "\0\u0380\0\u039c\0\u03b8\0\u03d4\0\u03f0\0\u040c\0\u0428\0\u0444" +
                    "\0\u0460\0\u047c\0\u0498\0\u04b4\0\u04d0\0\u04ec\0\u0508\0\u0524" +
                    "\0\u0540\0\u055c\0\u0578\0\u0594\0\u05b0\0\u05cc\0\u05e8\0\u0604" +
                    "\0\u0620\0\u063c\0\u0658\0\u0674\0\u0690\0\u06ac\0\u06c8\0\u06e4" +
                    "\0\u0700\0\u071c\0\u0738\0\u0754\0\u0770\0\u078c\0\u07a8\0\u07c4" +
                    "\0\u07e0\0\u07fc\0\u0818\0\u0834\0\34\0\u0850\0\u086c\0\u0888" +
                    "\0\u08a4\0\u08c0\0\u08dc\0\u08f8\0\u0914\0\u0930\0\34\0\34" +
                    "\0\u094c\0\u0968\0\u0984\0\u09a0\0\u09bc\0\34\0\u09d8\0\u09f4" +
                    "\0\u0a10\0\u0a2c\0\u0a48\0\u0a64\0\u0a80\0\34\0\u0a9c\0\u0ab8" +
                    "\0\u0ad4\0\u0af0\0\u0b0c\0\u0b28\0\u0b44\0\u0b60\0\u0b7c\0\u0b98" +
                    "\0\u0bb4\0\u0bd0\0\u0bec\0\u0c08\0\u0c24\0\u0c40\0\u0c5c\0\u0c78" +
                    "\0\u0c94\0\u0cb0\0\u0ccc\0\u0ce8\0\u0d04\0\u0d20\0\u0d3c\0\u0d58" +
                    "\0\u0d74\0\u0d90\0\u0dac\0\u0dc8\0\u0de4\0\u0e00\0\u0e1c\0\u0e38" +
                    "\0\34\0\u0e54\0\u0e70\0\u0e8c\0\u0ea8\0\u0ec4\0\34\0\u0ee0" +
                    "\0\u0efc\0\u0f18\0\u0f34\0\34\0\u0f50\0\u0f6c\0\34\0\34" +
                    "\0\u0f88\0\u0fa4\0\u0fc0\0\34\0\34\0\u0fdc\0\u0ff8\0\u1014" +
                    "\0\u1030\0\u104c\0\u1068\0\u1084\0\u10a0\0\u10bc\0\u10d8\0\u10f4" +
                    "\0\u1110\0\u112c\0\u1148\0\u1164\0\u1180\0\u119c\0\34\0\u11b8" +
                    "\0\u11d4\0\u11f0\0\34\0\u120c\0\34\0\u1228\0\u1244\0\u1260" +
                    "\0\u127c\0\u1298\0\u12b4\0\u12d0\0\u12ec\0\u1308\0\34\0\34" +
                    "\0\u1324\0\u1340\0\34\0\u135c\0\34\0\u1378\0\u1394\0\u13b0" +
                    "\0\u13cc\0\u13e8\0\34\0\34\0\u1404\0\34\0\u1420\0\u143c" +
                    "\0\u1458\0\u1474\0\u1490\0\u14ac\0\u14c8\0\u14e4\0\u1500\0\u151c" +
                    "\0\u1538\0\u1554\0\u1570\0\u158c\0\u15a8\0\u15c4\0\u15e0\0\u15fc" +
                    "\0\34\0\u1618\0\u1634\0\u1650\0\u166c\0\u1688\0\u16a4\0\u16c0" +
                    "\0\u16dc\0\34\0\u16f8\0\u1714\0\u1730\0\u174c\0\u1768\0\u1784" +
                    "\0\34\0\u17a0\0\u17bc\0\u17d8\0\u17f4\0\u1810\0\u182c\0\u1848" +
                    "\0\u1864\0\u1880\0\u189c\0\u18b8\0\u18d4\0\u18f0\0\u190c\0\u1928" +
                    "\0\u1944\0\u1960\0\34\0\u197c\0\u1998\0\u19b4\0\u19d0\0\u19ec" +
                    "\0\u1a08\0\u1a24\0\u1a40\0\u1a5c\0\u1a78\0\u1a94\0\u1ab0\0\u1acc" +
                    "\0\u1ae8\0\u1b04\0\u1b20\0\u1b3c\0\u1b58\0\u1b74\0\u1b90\0\34" +
                    "\0\u1bac\0\u1bc8\0\u1be4\0\u1c00\0\u1c1c\0\u1c38\0\34\0\u1c54" +
                    "\0\u1c70\0\u1c8c\0\u1ca8\0\u1cc4\0\u1ce0\0\u1cfc\0\u1d18\0\u1d34" +
                    "\0\u1d50\0\u1d6c\0\u1d88\0\34\0\u1da4\0\u1dc0\0\u1ddc\0\u1df8" +
                    "\0\u1e14\0\u1e30\0\u1e4c\0\u1e68\0\u1e84\0\u1ea0\0\u1ebc\0\u1ed8" +
                    "\0\u1ef4\0\u1f10\0\u1f2c\0\34\0\u1f48\0\u1f64\0\u1f80\0\u1f9c" +
                    "\0\u1fb8\0\u1fd4\0\u1ff0\0\u200c\0\u2028\0\u2044\0\u2060\0\u207c" +
                    "\0\u2098\0\u20b4\0\u20d0\0\u20ec\0\u2108\0\u2124\0\u2140\0\34" +
                    "\0\u215c\0\34\0\u2178\0\u2194\0\u21b0\0\u21cc\0\u21e8\0\u2204" +
                    "\0\u2220\0\u223c\0\u2258\0\u2274\0\34\0\u2290\0\u22ac\0\u22c8" +
                    "\0\u22e4\0\u2300\0\34\0\u231c\0\u2338\0\u2354\0\u2370\0\u238c" +
                    "\0\u23a8\0\u23c4\0\u23e0\0\34\0\u23fc\0\u2418\0\u2434\0\u2450" +
                    "\0\u246c\0\u2488\0\u24a4\0\34\0\u24c0\0\u24dc\0\u24f8\0\u2514" +
                    "\0\u2530\0\u254c\0\34\0\34\0\u2568\0\34\0\u2584\0\u25a0" +
                    "\0\u25bc\0\u25d8\0\u25f4\0\34\0\u2610\0\u262c\0\u2648\0\u2664" +
                    "\0\u2680\0\u269c\0\u26b8\0\u26d4\0\34\0\u26f0\0\u270c\0\u2728" +
                    "\0\u2744\0\u2760\0\u277c\0\u2798\0\u27b4\0\u27d0\0\u27ec\0\u2808" +
                    "\0\u2824\0\u2840\0\u285c\0\34\0\u2878\0\u2894\0\u28b0\0\34" +
                    "\0\34\0\u28cc\0\u28e8\0\34\0\34\0\u2904\0\u2920\0\u293c" +
                    "\0\u2958\0\u2974\0\34\0\u2990\0\u29ac\0\u29c8\0\u29e4\0\u2a00" +
                    "\0\u2a1c\0\u2a38\0\u2a54\0\34\0\u2a70\0\u2a8c\0\u2aa8\0\u2ac4" +
                    "\0\u2ae0\0\34\0\34\0\34\0\u2afc\0\u2b18\0\u2b34\0\34" +
                    "\0\u2b50\0\u2b6c\0\u2b88\0\34\0\u2ba4\0\u2bc0\0\u2bdc\0\u2bf8" +
                    "\0\u2c14\0\u2c30\0\u2c4c\0\u2c68\0\u2c84\0\u2ca0\0\34\0\u2cbc" +
                    "\0\u2cd8\0\34\0\u2cf4\0\34\0\u2d10\0\u2d2c\0\u2d48\0\u2d64" +
                    "\0\u2d80\0\u2d9c\0\34\0\34\0\u2db8\0\34\0\u2dd4\0\u2df0" +
                    "\0\34\0\u2e0c\0\u2e28\0\u2e44\0\u2e60\0\u2e7c\0\u2e98\0\34" +
                    "\0\u2eb4\0\u2ed0\0\u2eec\0\u2f08\0\u2f24\0\u2f40\0\u2f5c\0\u2f78" +
                    "\0\u2f94\0\u2fb0\0\u2fcc\0\u2fe8\0\34\0\34";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[502];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10" +
                    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20" +
                    "\1\21\1\22\1\23\1\24\3\2\1\25\1\2\1\26" +
                    "\1\27\1\2\35\0\1\3\35\0\1\30\44\0\1\31" +
                    "\1\32\12\0\1\33\1\0\1\34\16\0\1\35\26\0" +
                    "\1\36\20\0\1\37\5\0\1\40\11\0\1\41\33\0" +
                    "\1\42\22\0\1\43\42\0\1\44\1\0\1\45\3\0" +
                    "\1\46\4\0\1\47\10\0\1\50\15\0\1\51\15\0" +
                    "\1\52\11\0\1\53\13\0\1\54\33\0\1\55\6\0" +
                    "\1\56\1\57\7\0\1\60\23\0\1\61\7\0\1\62" +
                    "\3\0\1\63\17\0\1\64\1\0\1\65\3\0\1\66" +
                    "\1\0\1\67\3\0\1\70\21\0\1\71\2\0\1\72" +
                    "\1\0\1\73\10\0\1\74\3\0\1\75\12\0\1\76" +
                    "\32\0\1\77\11\0\1\100\15\0\1\101\33\0\1\102" +
                    "\3\0\1\103\5\0\1\104\3\0\1\105\34\0\1\106" +
                    "\15\0\1\107\47\0\1\110\24\0\1\111\42\0\1\112" +
                    "\35\0\1\113\22\0\1\114\25\0\1\115\33\0\1\116" +
                    "\44\0\1\117\1\0\1\120\25\0\1\121\33\0\1\122" +
                    "\26\0\1\123\15\0\1\124\16\0\1\125\36\0\1\126" +
                    "\47\0\1\127\15\0\1\130\56\0\1\131\17\0\1\132" +
                    "\44\0\1\133\1\0\1\134\14\0\1\135\17\0\1\136" +
                    "\24\0\1\137\41\0\1\140\25\0\1\141\16\0\1\142" +
                    "\15\0\1\143\40\0\1\144\13\0\1\145\2\0\1\146" +
                    "\7\0\1\147\22\0\1\150\34\0\1\151\1\0\1\152" +
                    "\26\0\1\153\15\0\1\154\13\0\1\155\47\0\1\156" +
                    "\16\0\1\157\33\0\1\160\60\0\1\161\10\0\1\162" +
                    "\37\0\1\163\52\0\1\164\7\0\1\165\45\0\1\166" +
                    "\21\0\1\167\46\0\1\170\17\0\1\171\33\0\1\172" +
                    "\51\0\1\173\42\0\1\174\6\0\1\175\32\0\1\176" +
                    "\35\0\1\177\47\0\1\200\25\0\1\201\27\0\1\202" +
                    "\45\0\1\203\25\0\1\204\30\0\1\205\37\0\1\206" +
                    "\31\0\1\207\24\0\1\210\33\0\1\211\51\0\1\212" +
                    "\41\0\1\213\7\0\1\214\47\0\1\215\33\0\1\216" +
                    "\27\0\1\217\35\0\1\220\21\0\1\221\41\0\1\222" +
                    "\42\0\1\223\46\0\1\224\20\0\1\225\41\0\1\226" +
                    "\11\0\1\227\32\0\1\230\37\0\1\231\47\0\1\232" +
                    "\25\0\1\233\21\0\1\234\43\0\1\235\25\0\1\236" +
                    "\53\0\1\237\22\0\1\240\23\0\1\241\47\0\1\242" +
                    "\17\0\1\243\42\0\1\244\34\0\1\245\22\0\1\246" +
                    "\33\0\1\247\44\0\1\250\22\0\1\251\50\0\1\252" +
                    "\37\0\1\253\23\0\1\254\37\0\1\255\27\0\1\256" +
                    "\22\0\1\257\33\0\1\260\44\0\1\261\25\0\1\262" +
                    "\5\0\1\263\50\0\1\264\14\0\1\265\42\0\1\266" +
                    "\21\0\1\267\36\0\1\270\27\0\1\271\33\0\1\272" +
                    "\33\0\1\273\43\0\1\274\27\0\1\275\24\0\1\276" +
                    "\33\0\1\277\33\0\1\300\45\0\1\301\36\0\1\302" +
                    "\23\0\1\303\32\0\1\304\27\0\1\305\42\0\1\306" +
                    "\42\0\1\307\33\0\1\310\21\0\1\311\36\0\1\312" +
                    "\31\0\1\313\44\0\1\314\15\0\1\315\44\0\1\316" +
                    "\41\0\1\317\26\0\1\320\37\0\1\321\27\0\1\322" +
                    "\22\0\1\323\33\0\1\324\41\0\1\325\25\0\1\326" +
                    "\53\0\1\327\15\0\1\330\42\0\1\331\21\0\1\332" +
                    "\36\0\1\333\35\0\1\334\35\0\1\335\30\0\1\336" +
                    "\27\0\1\337\55\0\1\340\22\0\1\341\25\0\1\342" +
                    "\50\0\1\343\22\0\1\344\44\0\1\345\5\0\1\346" +
                    "\5\0\1\347\33\0\1\350\36\0\1\351\36\0\1\352" +
                    "\27\0\1\353\31\0\1\354\45\0\1\355\22\0\1\356" +
                    "\33\0\1\357\32\0\1\360\44\0\1\361\36\0\1\362" +
                    "\41\0\1\363\27\0\1\364\22\0\1\365\34\0\1\366" +
                    "\37\0\1\367\32\0\1\370\23\0\1\371\43\0\1\372" +
                    "\25\0\1\373\41\0\1\374\24\0\1\375\36\0\1\376" +
                    "\37\0\1\377\31\0\1\u0100\36\0\1\u0101\21\0\1\u0102" +
                    "\44\0\1\u0103\40\0\1\u0104\35\0\1\u0105\5\0\1\u0106" +
                    "\6\0\1\u0107\42\0\1\u0108\24\0\1\u0109\50\0\1\u010a" +
                    "\15\0\1\u010b\34\0\1\u010c\50\0\1\u010d\21\0\1\u010e" +
                    "\32\0\1\u010f\32\0\1\u0110\45\0\1\u0111\22\0\1\u0112" +
                    "\33\0\1\u0113\33\0\1\u0114\43\0\1\u0115\26\0\1\u0116" +
                    "\44\0\1\u0117\21\0\1\u0118\37\0\1\u0119\40\0\1\u011a" +
                    "\17\0\1\u011b\46\0\1\u011c\33\0\1\u011d\22\0\1\u011e" +
                    "\34\0\1\u011f\35\0\1\u0120\36\0\1\u0121\24\0\1\u0122" +
                    "\32\0\1\u0123\36\0\1\u0124\35\0\1\u0125\25\0\1\u0126" +
                    "\50\0\1\u0127\33\0\1\u0128\33\0\1\u0129\33\0\1\u012a" +
                    "\16\0\1\u012b\46\0\1\u012c\22\0\1\u012d\45\0\1\u012e" +
                    "\20\0\1\u012f\60\0\1\u0130\11\0\1\u0131\31\0\1\u0132" +
                    "\41\0\1\u0133\35\0\1\u0134\1\u0135\1\u0136\11\0\1\u0137" +
                    "\24\0\1\u0138\17\0\1\u0139\27\0\1\u013a\55\0\1\u013b" +
                    "\32\0\1\u013c\17\0\1\u013d\54\0\1\u013e\7\0\1\u013f" +
                    "\33\0\1\u0140\47\0\1\u0141\20\0\1\u0142\36\0\1\u0143" +
                    "\40\0\1\u0144\25\0\1\u0145\34\0\1\u0146\37\0\1\u0147" +
                    "\37\0\1\u0148\16\0\1\u0149\47\0\1\u014a\23\0\1\u014b" +
                    "\43\0\1\u014c\16\0\1\u014d\42\0\1\u014e\41\0\1\u014f" +
                    "\23\0\1\u0150\45\0\1\u0151\25\0\1\u0152\33\0\1\u0153" +
                    "\34\0\1\u0154\23\0\1\u0155\33\0\1\u0156\33\0\1\u0157" +
                    "\50\0\1\u0158\15\0\1\u0159\32\0\1\u015a\36\0\1\u015b" +
                    "\30\0\1\u015c\47\0\1\u015d\27\0\1\u015e\24\0\1\u015f" +
                    "\54\0\1\u0160\22\0\1\u0161\33\0\1\u0162\27\0\1\u0163" +
                    "\30\0\1\u0164\34\0\1\u0165\37\0\1\u0166\26\0\1\u0167" +
                    "\46\0\1\u0168\16\0\1\u0169\54\0\1\u016a\15\0\1\u016b" +
                    "\30\0\1\u016c\40\0\1\u016d\36\0\1\u016e\23\0\1\u016f" +
                    "\35\0\1\u0170\35\0\1\u0171\35\0\1\u0172\26\0\1\u0173" +
                    "\41\0\1\u0174\30\0\1\u0175\31\0\1\u0176\47\0\1\u0177" +
                    "\42\0\1\u0178\7\0\1\u0179\33\0\1\u017a\32\0\1\u017b" +
                    "\33\0\1\u017c\55\0\1\u017d\21\0\1\u017e\35\0\1\u017f" +
                    "\25\0\1\u0180\51\0\1\u0181\21\0\1\u0182\30\0\1\u0183" +
                    "\26\0\1\u0184\40\0\1\u0185\26\0\1\u0186\44\0\1\u0187" +
                    "\31\0\1\u0188\42\0\1\u0189\22\0\1\u018a\35\0\1\u018b" +
                    "\42\0\1\u018c\22\0\1\u018d\51\0\1\u018e\12\0\1\u018f" +
                    "\40\0\1\u0190\41\0\1\u0191\21\0\1\u0192\30\0\1\u0193" +
                    "\45\0\1\u0194\21\0\1\u0195\41\0\1\u0196\41\0\1\u0197" +
                    "\35\0\1\u0198\20\0\1\u0199\33\0\1\u019a\37\0\1\u019b" +
                    "\33\0\1\u019c\36\0\1\u019d\31\0\1\u019e\30\0\1\u019f" +
                    "\35\0\1\u01a0\24\0\1\u01a1\44\0\1\u01a2\40\0\1\u01a3" +
                    "\22\0\1\u01a4\26\0\1\u01a5\54\0\1\u01a6\30\0\1\u01a7" +
                    "\24\0\1\u01a8\41\0\1\u01a9\23\0\1\u01aa\33\0\1\u01ab" +
                    "\26\0\1\u01ac\34\0\1\u01ad\43\0\1\u01ae\44\0\1\u01af" +
                    "\21\0\1\u01b0\31\0\1\u01b1\25\0\1\u01b2\36\0\1\u01b3" +
                    "\40\0\1\u01b4\24\0\1\u01b5\32\0\1\u01b6\50\0\1\u01b7" +
                    "\35\0\1\u01b8\32\0\1\u01b9\24\0\1\u01ba\25\0\1\u01bb" +
                    "\53\0\1\u01bc\21\0\1\u01bd\42\0\1\u01be\15\0\1\u01bf" +
                    "\40\0\1\u01c0\37\0\1\u01c1\33\0\1\u01c2\36\0\1\u01c3" +
                    "\26\0\1\u01c4\41\0\1\u01c5\17\0\1\u01c6\36\0\1\u01c7" +
                    "\30\0\1\u01c8\33\0\1\u01c9\43\0\1\u01ca\34\0\1\u01cb" +
                    "\33\0\1\u01cc\24\0\1\u01cd\30\0\1\u01ce\40\0\1\u01cf" +
                    "\31\0\1\u01d0\42\0\1\u01d1\42\0\1\u01d2\24\0\1\u01d3" +
                    "\32\0\1\u01d4\30\0\1\u01d5\36\0\1\u01d6\27\0\1\u01d7" +
                    "\42\0\1\u01d8\1\0\1\u01d9\22\0\1\u01da\37\0\1\u01db" +
                    "\27\0\1\u01dc\32\0\1\u01dd\36\0\1\u01de\36\0\1\u01df" +
                    "\25\0\1\u01e0\35\0\1\u01e1\43\0\1\u01e2\23\0\1\u01e3" +
                    "\53\0\1\u01e4\16\0\1\u01e5\34\0\1\u01e6\31\0\1\u01e7" +
                    "\33\0\1\u01e8\32\0\1\u01e9\42\0\1\u01ea\20\0\1\u01eb" +
                    "\33\0\1\u01ec\43\0\1\u01ed\33\0\1\u01ee\32\0\1\u01ef" +
                    "\33\0\1\u01f0\22\0\1\u01f1\33\0\1\u01f2\43\0\1\u01f3" +
                    "\33\0\1\u01f4\31\0\1\u01f5\33\0\1\u01f6\21\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[12292];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\25\1\65\0\1\11\11\0\2\11\5\0" +
                    "\1\11\7\0\1\11\30\0\1\1\11\0\1\11\5\0" +
                    "\1\11\4\0\1\11\2\0\2\11\3\0\2\11\21\0" +
                    "\1\11\3\0\1\11\1\0\1\11\11\0\2\11\2\0" +
                    "\1\11\1\0\1\11\5\0\2\11\1\0\1\11\2\0" +
                    "\1\1\17\0\1\11\10\0\1\11\6\0\1\11\21\0" +
                    "\1\11\24\0\1\11\6\0\1\11\14\0\1\11\17\0" +
                    "\1\11\23\0\1\11\1\0\1\11\12\0\1\11\5\0" +
                    "\1\11\10\0\1\11\7\0\1\11\6\0\2\11\1\0" +
                    "\1\11\5\0\1\11\10\0\1\11\16\0\1\11\3\0" +
                    "\2\11\2\0\2\11\5\0\1\11\10\0\1\11\5\0" +
                    "\3\11\3\0\1\11\3\0\1\11\12\0\1\11\2\0" +
                    "\1\11\1\0\1\11\6\0\2\11\1\0\1\11\2\0" +
                    "\1\11\6\0\1\11\14\0\2\11";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[502];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private final java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    public _YangLexer() {
        this(null);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _YangLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 68:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 69:
                        break;
                    case 3: {
                        return YANG_ONE;
                    }
                    // fall through
                    case 70:
                        break;
                    case 4: {
                        return YANG_TAB;
                    }
                    // fall through
                    case 71:
                        break;
                    case 5: {
                        return YANG_TWO;
                    }
                    // fall through
                    case 72:
                        break;
                    case 6: {
                        return YANG_SIX;
                    }
                    // fall through
                    case 73:
                        break;
                    case 7: {
                        return YANG_DOT;
                    }
                    // fall through
                    case 74:
                        break;
                    case 8: {
                        return YANG_ZERO;
                    }
                    // fall through
                    case 75:
                        break;
                    case 9: {
                        return YANG_NINE;
                    }
                    // fall through
                    case 76:
                        break;
                    case 10: {
                        return YANG_HASH;
                    }
                    // fall through
                    case 77:
                        break;
                    case 11: {
                        return YANG_IPV4;
                    }
                    // fall through
                    case 78:
                        break;
                    case 12: {
                        return YANG_FOUR;
                    }
                    // fall through
                    case 79:
                        break;
                    case 13: {
                        return YANG_FIVE;
                    }
                    // fall through
                    case 80:
                        break;
                    case 14: {
                        return YANG_DATE;
                    }
                    // fall through
                    case 81:
                        break;
                    case 15: {
                        return YANG_DASH;
                    }
                    // fall through
                    case 82:
                        break;
                    case 16: {
                        return YANG_PIPE;
                    }
                    // fall through
                    case 83:
                        break;
                    case 17: {
                        return YANG_ZEROS;
                    }
                    // fall through
                    case 84:
                        break;
                    case 18: {
                        return YANG_EIGHT;
                    }
                    // fall through
                    case 85:
                        break;
                    case 19: {
                        return YANG_THREE;
                    }
                    // fall through
                    case 86:
                        break;
                    case 20: {
                        return YANG_TILDE;
                    }
                    // fall through
                    case 87:
                        break;
                    case 21: {
                        return YANG_SEVEN;
                    }
                    // fall through
                    case 88:
                        break;
                    case 22: {
                        return YANG_SPACE;
                    }
                    // fall through
                    case 89:
                        break;
                    case 23: {
                        return YANG_COLON;
                    }
                    // fall through
                    case 90:
                        break;
                    case 24: {
                        return YANG_COMMA;
                    }
                    // fall through
                    case 91:
                        break;
                    case 25: {
                        return YANG_CHARS;
                    }
                    // fall through
                    case 92:
                        break;
                    case 26: {
                        return YANG_ALPHA;
                    }
                    // fall through
                    case 93:
                        break;
                    case 27: {
                        return YANG_EQUALS;
                    }
                    // fall through
                    case 94:
                        break;
                    case 28: {
                        return YANG_HEXDIG;
                    }
                    // fall through
                    case 95:
                        break;
                    case 29: {
                        return YANG_DIGITS;
                    }
                    // fall through
                    case 96:
                        break;
                    case 30: {
                        return YANG_ESCAPES;
                    }
                    // fall through
                    case 97:
                        break;
                    case 31: {
                        return YANG_AT_SIGN;
                    }
                    // fall through
                    case 98:
                        break;
                    case 32: {
                        return YANG_VERSION;
                    }
                    // fall through
                    case 99:
                        break;
                    case 33: {
                        return YANG_LINEFEED;
                    }
                    // fall through
                    case 100:
                        break;
                    case 34: {
                        return YANG_ASTERISK;
                    }
                    // fall through
                    case 101:
                        break;
                    case 35: {
                        return YANG_SEMICOLON;
                    }
                    // fall through
                    case 102:
                        break;
                    case 36: {
                        return YANG_FRACTIONS;
                    }
                    // fall through
                    case 103:
                        break;
                    case 37: {
                        return YANG_AMPERSAND;
                    }
                    // fall through
                    case 104:
                        break;
                    case 38: {
                        return YANG_PLUS_SIGN;
                    }
                    // fall through
                    case 105:
                        break;
                    case 39: {
                        return YANG_LEFT_BRACE;
                    }
                    // fall through
                    case 106:
                        break;
                    case 40: {
                        return YANG_DOUBLE_DOT;
                    }
                    // fall through
                    case 107:
                        break;
                    case 41: {
                        return YANG_APOSTROPHE;
                    }
                    // fall through
                    case 108:
                        break;
                    case 42: {
                        return YANG_UNDERSCORE;
                    }
                    // fall through
                    case 109:
                        break;
                    case 43: {
                        return YANG_BACK_SLASH;
                    }
                    // fall through
                    case 110:
                        break;
                    case 44: {
                        return YANG_RIGHT_BRACE;
                    }
                    // fall through
                    case 111:
                        break;
                    case 45: {
                        return YANG_DOLLAR_SIGN;
                    }
                    // fall through
                    case 112:
                        break;
                    case 46: {
                        return YANG_OPEN_BRACKET;
                    }
                    // fall through
                    case 113:
                        break;
                    case 47: {
                        return YANG_GRAVE_ACCENT;
                    }
                    // fall through
                    case 114:
                        break;
                    case 48: {
                        return YANG_SINGLE_QUOTE;
                    }
                    // fall through
                    case 115:
                        break;
                    case 49: {
                        return YANG_DOUBLE_COLON;
                    }
                    // fall through
                    case 116:
                        break;
                    case 50: {
                        return YANG_DOUBLE_QUOTE;
                    }
                    // fall through
                    case 117:
                        break;
                    case 51: {
                        return YANG_PERCENT_SIGN;
                    }
                    // fall through
                    case 118:
                        break;
                    case 52: {
                        return YANG_FORWARD_SLASH;
                    }
                    // fall through
                    case 119:
                        break;
                    case 53: {
                        return YANG_BLOCK_COMMENT;
                    }
                    // fall through
                    case 120:
                        break;
                    case 54: {
                        return YANG_PARENT_FOLDER;
                    }
                    // fall through
                    case 121:
                        break;
                    case 55: {
                        return YANG_QUESTION_MARK;
                    }
                    // fall through
                    case 122:
                        break;
                    case 56: {
                        return YANG_LESS_THAN_SIGN;
                    }
                    // fall through
                    case 123:
                        break;
                    case 57: {
                        return YANG_CLOSED_BRACKET;
                    }
                    // fall through
                    case 124:
                        break;
                    case 58: {
                        return YANG_CARRIAGE_RETURN;
                    }
                    // fall through
                    case 125:
                        break;
                    case 59: {
                        return YANG_EXCLAMATION_MARK;
                    }
                    // fall through
                    case 126:
                        break;
                    case 60: {
                        return YANG_LEFT_PARENTHESIS;
                    }
                    // fall through
                    case 127:
                        break;
                    case 61: {
                        return YANG_RIGHT_PARENTHESIS;
                    }
                    // fall through
                    case 128:
                        break;
                    case 62: {
                        return YANG_GREATER_THAN_SIGN;
                    }
                    // fall through
                    case 129:
                        break;
                    case 63: {
                        return YANG_CIRCUMFLEX_ACCENT;
                    }
                    // fall through
                    case 130:
                        break;
                    case 64: {
                        return YANG_ZERO_LENGTH_STRING;
                    }
                    // fall through
                    case 131:
                        break;
                    case 65: {
                        return YANG_DOUBLE_FORWARD_SLASH;
                    }
                    // fall through
                    case 132:
                        break;
                    case 66: {
                        return YANG_ALPHANUMERICAL_DIGIT_FIRST;
                    }
                    // fall through
                    case 133:
                        break;
                    case 67: {
                        return YANG_ALPHANUMERICAL_ALPHA_FIRST;
                    }
                    // fall through
                    case 134:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
