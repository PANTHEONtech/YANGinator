/*
 *
 *   Copyright (c) 2021-2023 PANTHEON.tech, s.r.o. All rights reserved.
 *
 *   This program and the accompanying materials are made available under the
 *   terms of the Eclipse Public License v1.0 which accompanies this distribution,
 *   and is available at http://www.eclipse.org/legal/epl-v10.html
 *
 */

/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package tech.pantheon.yanginator.plugin.highlighter;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.WHITE_SPACE;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ACTION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ADD_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_AND_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ANYDATA_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ANYXML_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ARGUMENT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_AUGMENT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_BASE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_BELONGS_TO_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_BIT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_BLOCK_COMMENT;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_CASE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_CHOICE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_CONFIG_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_CONTACT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_CONTAINER_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_CURRENT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DATE_ARG;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DEFAULT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DELETE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DEPRECATED_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DESCRIPTION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DEVIATE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DEVIATION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DIGIT;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ENUM_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ERROR_APP_TAG_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ERROR_MESSAGE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_EXTENSION_IDENTIFIER;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_EXTENSION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_FALSE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_FEATURE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_FRACTION_DIGITS_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_GROUPING_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_IDENTIFIER;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_IDENTITY_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_IF_FEATURE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_IMPORT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_INCLUDE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_INPUT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_INVALID_ESCAPE;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_INVERT_MATCH_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_KEYWORD_MATCHER;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_KEY_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_LEAF_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_LEAF_LIST_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_LEFT_BRACE;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_LENGTH_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_LIST_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MANDATORY_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MAX_ELEMENTS_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MAX_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MIN_ELEMENTS_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MIN_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MODIFIER_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MODULE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MUST_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_NAMESPACE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_NON_WORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_NOTIFICATION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_NOT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_NOT_SUPPORTED_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_OBSOLETE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_OPERATORS;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ORDERED_BY_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ORGANIZATION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_OR_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_OUTPUT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_PATH_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_PATTERN_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_POSITION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_PREFIX_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_PRESENCE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_RANGE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_REFERENCE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_REFINE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_REPLACE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_REQUIRE_INSTANCE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_REVISION_DATE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_REVISION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_RIGHT_BRACE;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_RPC_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_SEMICOLON;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_SINGLE_LINE_COMMENT;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_STATUS_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_STRING;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_SUBMODULE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_SYSTEM_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_TRUE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_TYPEDEF_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_TYPE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_UNBOUNDED_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_UNIQUE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_UNITS_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_USER_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_USES_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_VALID_ESCAPE;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_VALUE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_WHEN_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_YANG_VERSION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_YIN_ELEMENT_KEYWORD;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_YangLexer.flex</tt>
 */
public class _YangLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     * Chosen bits are [11, 6, 4]
     * Total runtime size is 15392 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 10] << 6) | ((ch >> 4) & 0x3f)] << 4) | (ch & 0xf)];
    }

    /* The ZZ_CMAP_Z table has 1088 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15" +
                    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1" +
                    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43" +
                    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1" +
                    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277" +
                    "\12");

    /* The ZZ_CMAP_Y table has 3328 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34" +
                    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13" +
                    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31" +
                    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\3\13\1\40\2\13\1\41" +
                    "\1\1\1\13\1\42\4\1\1\13\1\43\1\1\1\44\1\22\7\13\1\45\1\24\1\34\1\46\1\35\1" +
                    "\47\1\50\1\51\1\45\1\16\1\52\1\46\1\35\1\53\1\54\1\55\1\56\1\57\1\60\1\22" +
                    "\1\35\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\35\1\61\1\66\1\67\1\45\1\70\1\71" +
                    "\1\72\1\73\1\33\1\74\1\75\1\56\1\1\1\76\1\77\1\35\1\100\1\101\1\102\1\45\1" +
                    "\1\1\76\1\77\1\35\1\103\1\101\1\104\1\45\1\105\1\106\1\77\1\13\1\37\1\107" +
                    "\1\110\1\45\1\111\1\112\1\113\1\13\1\114\1\115\1\116\1\56\1\117\1\24\2\13" +
                    "\1\31\1\120\1\121\2\1\1\122\1\123\1\124\1\125\1\126\1\127\2\1\1\63\1\130\1" +
                    "\121\1\131\1\132\1\13\1\133\1\24\1\134\1\132\1\13\1\133\1\135\3\1\4\13\1\121" +
                    "\4\13\1\41\2\13\1\136\2\13\1\137\24\13\1\140\1\141\2\13\1\140\2\13\1\142\1" +
                    "\143\1\14\3\13\1\143\3\13\1\37\2\1\1\13\1\1\5\13\1\144\1\24\45\13\1\36\1\13" +
                    "\1\145\1\31\4\13\1\146\1\147\1\150\1\151\1\13\1\151\1\13\1\152\1\150\1\153" +
                    "\5\13\1\154\1\121\1\1\1\155\1\121\5\13\1\26\2\13\1\31\4\13\1\57\1\13\1\120" +
                    "\2\42\1\56\1\13\1\41\1\151\2\13\1\42\1\13\2\121\2\1\1\13\1\42\3\13\1\120\1" +
                    "\13\1\36\2\121\1\156\1\120\4\1\4\13\1\42\1\121\1\157\1\152\7\13\1\152\3\13" +
                    "\1\26\1\100\2\13\1\41\1\147\4\1\1\160\1\13\1\161\17\13\1\162\21\13\1\144\2" +
                    "\13\1\144\1\163\1\13\1\41\3\13\1\164\1\165\1\166\1\133\1\165\1\167\1\1\1\170" +
                    "\1\171\1\63\1\172\1\1\1\173\1\1\1\133\3\1\2\13\1\63\1\174\1\175\1\176\1\127" +
                    "\1\177\1\1\2\13\1\147\62\1\1\56\2\13\1\121\161\1\2\13\1\120\2\13\1\120\10" +
                    "\13\1\200\1\152\2\13\1\136\3\13\1\201\1\171\1\13\1\202\4\203\2\13\2\1\1\171" +
                    "\35\1\1\204\1\1\1\24\1\205\1\24\4\13\1\206\1\24\4\13\1\137\1\207\1\13\1\41" +
                    "\1\24\4\13\1\120\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1\57\4\1\135\13\1\57\2" +
                    "\1\10\13\1\133\4\1\2\13\1\41\20\13\1\133\1\13\1\42\1\1\3\13\1\210\7\13\1\16" +
                    "\1\1\1\211\1\212\5\13\1\213\1\13\1\120\1\26\3\1\1\211\2\13\1\26\1\1\3\13\1" +
                    "\152\4\13\1\57\1\121\1\13\1\214\2\13\1\41\2\13\1\152\1\13\1\133\4\13\1\215" +
                    "\1\121\1\13\1\120\3\13\1\202\1\41\1\121\1\13\1\113\4\13\1\32\1\155\1\13\1" +
                    "\216\1\217\1\220\1\203\2\13\1\137\1\57\7\13\1\221\1\121\72\13\1\152\1\13\1" +
                    "\222\2\13\1\42\20\1\26\13\1\41\6\13\1\121\2\1\1\202\1\223\1\35\1\224\1\225" +
                    "\6\13\1\16\1\1\1\226\25\13\1\41\1\1\4\13\1\212\2\13\1\26\2\1\1\42\1\13\1\1" +
                    "\1\13\1\227\1\230\2\1\1\134\7\13\1\133\1\1\1\121\1\24\1\231\1\24\1\31\1\56" +
                    "\4\13\1\120\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\41\2\1\7\13\1\31\4\1\3" +
                    "\13\1\151\7\1\1\236\10\1\1\13\1\133\3\13\2\63\1\1\2\13\1\1\1\13\1\31\2\13" +
                    "\1\31\1\13\1\41\2\13\1\237\1\240\2\1\11\13\1\41\1\121\2\13\1\237\1\13\1\42" +
                    "\2\13\1\26\3\13\1\152\11\1\23\13\1\202\1\13\1\57\1\26\11\1\1\241\2\13\1\242" +
                    "\1\13\1\57\1\13\1\202\1\13\1\120\4\1\1\13\1\243\1\13\1\57\1\13\1\121\4\1\3" +
                    "\13\1\244\4\1\1\245\1\246\1\13\1\247\2\1\1\13\1\133\1\13\1\133\2\1\1\132\1" +
                    "\13\1\202\1\1\3\13\1\57\1\13\1\57\1\13\1\32\1\13\1\16\6\1\4\13\1\147\3\1\3" +
                    "\13\1\32\3\13\1\32\60\1\4\13\1\202\1\1\1\56\1\171\3\13\1\31\1\1\1\13\1\147" +
                    "\1\121\3\13\1\134\1\1\2\13\1\250\4\13\1\251\1\252\2\1\1\13\1\22\1\13\1\253" +
                    "\4\1\1\254\1\27\1\147\3\13\1\31\1\121\1\34\1\46\1\35\1\61\1\66\1\255\1\256" +
                    "\1\151\10\1\4\13\1\31\1\121\2\1\4\13\1\257\1\121\12\1\3\13\1\260\1\63\1\261" +
                    "\2\1\4\13\1\262\1\121\2\1\3\13\1\26\1\121\3\1\1\13\1\100\1\42\1\121\26\1\4" +
                    "\13\1\121\1\171\34\1\3\13\1\147\20\1\1\35\2\13\1\14\1\63\1\121\1\1\1\212\1" +
                    "\13\1\212\1\132\1\202\64\1\71\13\1\121\6\1\6\13\1\120\1\1\14\13\1\152\53\1" +
                    "\2\13\1\120\75\1\44\13\1\202\33\1\43\13\1\147\1\13\1\120\1\121\6\1\1\13\1" +
                    "\41\1\151\3\13\1\202\1\152\1\121\1\226\1\263\1\13\67\1\4\13\1\151\2\13\1\120" +
                    "\1\171\1\13\4\1\1\63\1\1\76\13\1\133\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1" +
                    "\31\1\133\1\147\1\264\114\1\1\265\1\266\1\267\1\1\1\270\11\1\1\271\33\1\5" +
                    "\13\1\134\3\13\1\150\1\272\1\273\1\274\3\13\1\275\1\276\1\13\1\277\1\300\1" +
                    "\77\24\13\1\260\1\13\1\77\1\137\1\13\1\137\1\13\1\134\1\13\1\134\1\120\1\13" +
                    "\1\120\1\13\1\35\1\13\1\35\1\13\1\301\3\13\40\1\3\13\1\222\2\13\1\133\1\302" +
                    "\1\303\1\157\1\24\25\1\1\14\1\213\1\304\75\1\14\13\1\151\1\202\2\1\4\13\1" +
                    "\31\1\121\112\1\1\274\1\13\1\305\1\306\1\307\1\310\1\311\1\312\1\313\1\42" +
                    "\1\314\1\42\47\1\1\13\1\121\1\13\1\121\1\13\1\121\47\1\55\13\1\202\2\1\103" +
                    "\13\1\151\15\13\1\41\150\13\1\16\25\1\41\13\1\41\56\1\17\13\41\1");

    /* The ZZ_CMAP_A table has 3280 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\11\0\1\36\1\2\2\36\1\2\22\0\1\36\1\0\1\37\4\0\1\40\2\0\1\46\1\52\1\0\1\22" +
                    "\1\43\1\45\12\41\1\44\1\51\5\0\21\42\1\50\10\42\1\0\1\47\2\0\1\42\1\0\1\12" +
                    "\1\30\1\13\1\16\1\20\1\17\1\26\1\23\1\4\1\42\1\32\1\24\1\5\1\14\1\7\1\6\1" +
                    "\34\1\10\1\31\1\11\1\27\1\21\1\35\1\25\1\15\1\33\1\53\1\0\1\54\7\0\1\1\12" +
                    "\0\1\1\11\0\1\3\12\0\1\3\4\0\1\3\5\0\27\3\1\0\12\3\4\0\14\3\16\0\5\3\7\0\1" +
                    "\3\1\0\1\3\1\0\5\3\1\0\2\3\2\0\4\3\1\0\1\3\6\0\1\3\1\0\3\3\1\0\1\3\1\0\4\3" +
                    "\1\0\23\3\1\0\11\3\1\0\26\3\2\0\1\3\6\0\10\3\10\0\16\3\1\0\1\3\1\0\2\3\1\0" +
                    "\2\3\1\0\1\3\10\0\13\3\5\0\3\3\15\0\12\3\4\0\6\3\1\0\10\3\2\0\12\3\1\0\23" +
                    "\3\2\0\14\3\2\0\11\3\4\0\1\3\5\0\16\3\2\0\14\3\4\0\5\3\1\0\10\3\6\0\20\3\2" +
                    "\0\13\3\2\0\16\3\1\0\1\3\3\0\4\3\2\0\11\3\2\0\2\3\2\0\4\3\10\0\1\3\4\0\2\3" +
                    "\1\0\1\3\1\0\3\3\1\0\6\3\4\0\2\3\1\0\2\3\1\0\2\3\1\0\2\3\2\0\1\3\1\0\5\3\4" +
                    "\0\2\3\2\0\3\3\3\0\1\3\7\0\4\3\1\0\1\3\7\0\20\3\13\0\3\3\1\0\11\3\1\0\2\3" +
                    "\1\0\2\3\1\0\5\3\2\0\12\3\1\0\3\3\1\0\3\3\2\0\1\3\30\0\1\3\7\0\3\3\1\0\10" +
                    "\3\2\0\6\3\2\0\2\3\2\0\3\3\10\0\2\3\4\0\2\3\1\0\1\3\1\0\1\3\20\0\2\3\1\0\6" +
                    "\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3\1\0\2\3\3\0\2\3\3\0\3\3\3\0\5\3\3\0\3\3" +
                    "\1\0\4\3\2\0\1\3\6\0\1\3\10\0\4\3\1\0\10\3\1\0\3\3\1\0\30\3\3\0\10\3\1\0\3" +
                    "\3\1\0\4\3\7\0\2\3\1\0\3\3\5\0\4\3\1\0\5\3\2\0\4\3\5\0\2\3\7\0\1\3\2\0\2\3" +
                    "\16\0\3\3\1\0\10\3\1\0\7\3\1\0\3\3\1\0\5\3\5\0\4\3\7\0\1\3\12\0\6\3\2\0\2" +
                    "\3\1\0\22\3\3\0\10\3\1\0\11\3\1\0\1\3\2\0\7\3\3\0\1\3\4\0\6\3\1\0\1\3\1\0" +
                    "\10\3\2\0\2\3\14\0\17\3\1\0\12\3\7\0\2\3\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6" +
                    "\0\4\3\1\0\7\3\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0\15\3\1\0\3\3\2\0\5\3\1" +
                    "\0\1\3\1\0\6\3\2\0\12\3\2\0\4\3\10\0\2\3\13\0\1\3\1\0\1\3\1\0\1\3\4\0\12\3" +
                    "\1\0\24\3\3\0\5\3\1\0\12\3\6\0\1\3\11\0\6\3\1\0\1\3\5\0\1\3\2\0\13\3\1\0\15" +
                    "\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0\1\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3" +
                    "\2\0\16\3\2\0\6\3\2\0\1\1\32\3\3\0\13\3\7\0\15\3\1\0\7\3\13\0\4\3\14\0\1\3" +
                    "\1\0\2\3\14\0\4\3\3\0\1\3\4\0\2\3\15\0\3\3\11\0\1\3\23\0\10\3\1\0\23\3\1\0" +
                    "\2\3\6\0\6\3\5\0\15\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\6\3\1\0\7\3\1\0\1\3\3\0" +
                    "\3\3\1\0\7\3\3\0\4\3\2\0\6\3\4\0\13\1\15\0\2\1\5\0\1\1\17\0\1\3\4\0\1\3\12" +
                    "\0\1\1\1\0\1\3\15\0\1\3\2\0\1\3\4\0\1\3\2\0\12\3\1\0\1\3\3\0\5\3\6\0\1\3\1" +
                    "\0\1\3\1\0\1\3\1\0\4\3\1\0\1\3\5\0\5\3\4\0\1\3\1\0\5\3\6\0\15\3\7\0\10\3\11" +
                    "\0\7\3\1\0\7\3\1\0\1\1\4\0\3\3\11\0\5\3\2\0\5\3\3\0\7\3\2\0\2\3\2\0\3\3\5" +
                    "\0\16\3\1\0\12\3\1\0\1\3\7\0\11\3\2\0\27\3\2\0\15\3\3\0\1\3\1\0\1\3\2\0\1" +
                    "\3\16\0\1\3\2\0\5\3\12\0\6\3\2\0\6\3\2\0\6\3\11\0\13\3\1\0\2\3\2\0\7\3\4\0" +
                    "\5\3\3\0\5\3\5\0\12\3\1\0\5\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0\12\3\3\0\15\3\3" +
                    "\0\2\3\30\0\16\3\4\0\1\3\2\0\6\3\2\0\6\3\2\0\6\3\2\0\3\3\3\0\14\3\1\0\16\3" +
                    "\1\0\2\3\1\0\1\3\15\0\1\3\2\0\4\3\4\0\10\3\1\0\5\3\12\0\6\3\2\0\1\3\1\0\14" +
                    "\3\1\0\2\3\3\0\1\3\2\0\4\3\1\0\2\3\12\0\10\3\6\0\6\3\1\0\2\3\5\0\10\3\1\0" +
                    "\3\3\1\0\13\3\4\0\3\3\4\0\5\3\2\0\1\3\11\0\5\3\5\0\3\3\3\0\13\3\1\0\1\3\3" +
                    "\0\10\3\6\0\1\3\1\0\7\3\1\0\1\3\1\0\4\3\1\0\2\3\6\0\1\3\5\0\7\3\2\0\7\3\3" +
                    "\0\6\3\1\0\1\3\10\0\6\3\2\0\10\3\10\0\6\3\2\0\1\3\3\0\1\3\13\0\10\3\5\0\15" +
                    "\3\3\0\2\3\6\0\5\3\3\0\6\3\10\0\10\3\2\0\7\3\16\0\4\3\4\0\3\3\15\0\1\3\2\0" +
                    "\2\3\2\0\4\3\1\0\14\3\1\0\1\3\1\0\7\3\1\0\21\3\1\0\4\3\2\0\10\3\1\0\7\3\1" +
                    "\0\14\3\1\0\4\3\1\0\5\3\1\0\1\3\3\0\11\3\1\0\10\3\2\0\2\3\5\0\1\3\16\0\1\3" +
                    "\13\0\2\3\1\0\2\3\1\0\5\3\6\0\2\3\1\0\1\3\2\0\1\3\1\0\12\3\1\0\4\3\1\0\1\3" +
                    "\1\0\1\3\6\0\1\3\4\0\1\3\1\0\1\3\1\0\1\3\1\0\3\3\1\0\2\3\1\0\1\3\2\0\1\3\1" +
                    "\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\2\3\1\0\1\3\2\0\4\3\1\0\7\3\1\0\4\3\1\0" +
                    "\4\3\1\0\1\3\1\0\12\3\1\0\5\3\1\0\3\3\1\0\5\3\1\0\5\3");

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\1\26\3\2\4\1\5\2\1" +
                    "\1\6\1\7\1\10\1\11\27\0\4\3\1\12\7\3" +
                    "\1\13\51\3\1\4\1\0\1\14\1\15\3\16\1\17" +
                    "\63\0\6\3\1\20\2\3\1\21\10\3\1\22\12\3" +
                    "\1\23\1\24\5\3\1\25\26\3\1\26\5\3\1\27" +
                    "\1\3\1\0\1\14\15\0\1\30\54\0\13\3\1\31" +
                    "\4\3\1\32\12\3\1\33\1\34\7\3\1\35\20\3" +
                    "\1\36\2\3\1\37\1\40\5\3\1\41\1\42\1\43" +
                    "\4\3\1\44\1\0\1\15\63\0\1\3\1\45\21\3" +
                    "\1\46\32\3\1\47\3\3\1\50\3\3\1\51\6\3" +
                    "\47\0\1\52\6\3\1\53\3\3\1\54\4\3\1\55" +
                    "\2\3\1\56\5\3\1\57\1\3\1\60\3\3\1\61" +
                    "\1\62\11\3\1\63\6\3\1\64\1\3\1\65\2\3" +
                    "\1\66\1\67\1\3\33\0\1\70\11\3\1\71\3\3" +
                    "\1\72\3\3\1\73\1\3\1\74\1\75\1\3\1\76" +
                    "\1\77\6\3\1\100\1\3\1\101\2\3\1\102\10\3" +
                    "\22\0\1\3\1\103\2\3\1\104\2\3\1\105\1\106" +
                    "\2\3\1\107\1\3\1\110\1\3\1\111\16\3\1\112" +
                    "\3\3\1\113\12\0\3\3\1\114\3\3\1\115\2\3" +
                    "\1\116\2\3\1\117\3\3\1\120\4\3\1\121\1\122" +
                    "\1\123\1\3\1\124\1\113\11\0\1\3\1\125\2\3" +
                    "\1\126\7\3\1\127\4\3\1\130\7\0\10\3\1\131" +
                    "\1\3\1\132\3\3\3\0\1\133\1\134\1\135\1\136" +
                    "\2\3\1\137\1\3\1\140\3\3\2\0\1\141\1\3" +
                    "\1\142\1\3\1\143\1\144\3\3\1\145\1\146";

    private static int[] zzUnpackAction() {
        int[] result = new int[818];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b" +
                    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3" +
                    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b" +
                    "\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\207" +
                    "\0\55\0\207\0\207\0\55\0\u0573\0\u05a0\0\u05cd\0\u05fa" +
                    "\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762" +
                    "\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca" +
                    "\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32" +
                    "\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a" +
                    "\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02" +
                    "\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a" +
                    "\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2" +
                    "\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a" +
                    "\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2" +
                    "\0\207\0\u12cf\0\u12fc\0\u1329\0\55\0\u0573\0\207\0\207" +
                    "\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491" +
                    "\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9" +
                    "\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761" +
                    "\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9" +
                    "\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31" +
                    "\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99" +
                    "\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01" +
                    "\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69" +
                    "\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a\0\u032a\0\u1f77\0\u1fa4" +
                    "\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085\0\u20b2\0\u20df\0\u210c" +
                    "\0\u032a\0\u032a\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed\0\u221a" +
                    "\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355\0\u2382" +
                    "\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463\0\u2490\0\u24bd\0\u24ea" +
                    "\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb\0\u25f8\0\u032a\0\u2625" +
                    "\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u032a\0\u2706\0\u2733\0\207" +
                    "\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u286e\0\u289b" +
                    "\0\u28c8\0\u28f5\0\u2922\0\u294f\0\u297c\0\u29a9\0\u29d6\0\u2a03" +
                    "\0\u2a30\0\u2a5d\0\u29a9\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11\0\u2b3e" +
                    "\0\u2b6b\0\u2b98\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c\0\u2c79\0\u2ca6" +
                    "\0\u2cd3\0\u2d00\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4\0\u2de1\0\u2e0e" +
                    "\0\u2e3b\0\u2e68\0\u2e95\0\u2ec2\0\u2eef\0\u2f1c\0\u2f49\0\u2f76" +
                    "\0\u2fa3\0\u2fd0\0\u2ffd\0\u302a\0\u3057\0\u3084\0\u30b1\0\u30de" +
                    "\0\u310b\0\u3138\0\u3165\0\u3192\0\u31bf\0\u31ec\0\u3219\0\u3246" +
                    "\0\u3273\0\u32a0\0\u32cd\0\u32fa\0\u3327\0\u032a\0\u3354\0\u3381" +
                    "\0\u33ae\0\u33db\0\u032a\0\u3408\0\u3435\0\u3462\0\u348f\0\u34bc" +
                    "\0\u34e9\0\u3516\0\u3543\0\u3570\0\u359d\0\u032a\0\u35ca\0\u35f7" +
                    "\0\u3624\0\u3651\0\u367e\0\u36ab\0\u36d8\0\u3705\0\u032a\0\u3732" +
                    "\0\u375f\0\u378c\0\u37b9\0\u37e6\0\u3813\0\u3840\0\u386d\0\u389a" +
                    "\0\u38c7\0\u38f4\0\u3921\0\u394e\0\u397b\0\u39a8\0\u39d5\0\u032a" +
                    "\0\u3a02\0\u3a2f\0\u032a\0\u3a5c\0\u3a89\0\u3ab6\0\u3ae3\0\u3b10" +
                    "\0\u3b3d\0\u032a\0\u032a\0\u032a\0\u3b6a\0\u3b97\0\u3bc4\0\u3bf1" +
                    "\0\u032a\0\u3c1e\0\207\0\u3c4b\0\u3c78\0\u3ca5\0\u3cd2\0\u3cff" +
                    "\0\u3d2c\0\u3d59\0\u3d86\0\u3db3\0\u3de0\0\u3e0d\0\u3e3a\0\u3e67" +
                    "\0\u3e94\0\u3ec1\0\u3eee\0\u3f1b\0\u3f48\0\u3f75\0\u3fa2\0\u3fcf" +
                    "\0\u3ffc\0\u4029\0\u4056\0\u4083\0\u40b0\0\u40dd\0\u410a\0\u4137" +
                    "\0\u4164\0\u4191\0\u41be\0\u41eb\0\u4218\0\u4245\0\u4272\0\u429f" +
                    "\0\u42cc\0\u42f9\0\u4326\0\u4353\0\u4380\0\u43ad\0\u43da\0\u4407" +
                    "\0\u4434\0\u4461\0\u448e\0\u44bb\0\u44e8\0\u4515\0\u4542\0\u032a" +
                    "\0\u456f\0\u459c\0\u45c9\0\u45f6\0\u4623\0\u4650\0\u467d\0\u46aa" +
                    "\0\u46d7\0\u4704\0\u4731\0\u475e\0\u478b\0\u47b8\0\u47e5\0\u4812" +
                    "\0\u483f\0\u032a\0\u486c\0\u4899\0\u48c6\0\u48f3\0\u4920\0\u494d" +
                    "\0\u497a\0\u49a7\0\u49d4\0\u4a01\0\u4a2e\0\u4a5b\0\u4a88\0\u4ab5" +
                    "\0\u4ae2\0\u4b0f\0\u4b3c\0\u4b69\0\u4b96\0\u4bc3\0\u4bf0\0\u4c1d" +
                    "\0\u4c4a\0\u4c77\0\u4ca4\0\u4cd1\0\u032a\0\u4cfe\0\u4d2b\0\u4d58" +
                    "\0\u032a\0\u4d85\0\u4db2\0\u4ddf\0\u032a\0\u4e0c\0\u4e39\0\u4e66" +
                    "\0\u4e93\0\u4ec0\0\u4eed\0\u4f1a\0\u4f47\0\u4f74\0\u4fa1\0\u4fce" +
                    "\0\u4ffb\0\u5028\0\u5055\0\u5082\0\u50af\0\u50dc\0\u5109\0\u5136" +
                    "\0\u5163\0\u5190\0\u51bd\0\u51ea\0\u5217\0\u5244\0\u5271\0\u529e" +
                    "\0\u52cb\0\u52f8\0\u5325\0\u5352\0\u537f\0\u53ac\0\u53d9\0\u5406" +
                    "\0\u5433\0\u5460\0\u548d\0\u54ba\0\u54e7\0\u5514\0\u5541\0\u556e" +
                    "\0\u559b\0\u55c8\0\u032a\0\u55f5\0\u5622\0\u564f\0\u567c\0\u56a9" +
                    "\0\u56d6\0\u032a\0\u5703\0\u5730\0\u575d\0\u032a\0\u578a\0\u57b7" +
                    "\0\u57e4\0\u5811\0\u032a\0\u583e\0\u586b\0\u032a\0\u5898\0\u58c5" +
                    "\0\u58f2\0\u591f\0\u594c\0\u032a\0\u5979\0\u032a\0\u59a6\0\u59d3" +
                    "\0\u5a00\0\u032a\0\u032a\0\u5a2d\0\u5a5a\0\u5a87\0\u5ab4\0\u5ae1" +
                    "\0\u5b0e\0\u5b3b\0\u5b68\0\u5b95\0\u032a\0\u5bc2\0\u5bef\0\u5c1c" +
                    "\0\u5c49\0\u5c76\0\u5ca3\0\u032a\0\u5cd0\0\u032a\0\u5cfd\0\u5d2a" +
                    "\0\u032a\0\u032a\0\u5d57\0\u5d84\0\u5db1\0\u5dde\0\u5e0b\0\u5e38" +
                    "\0\u5e65\0\u5e92\0\u5ebf\0\u5eec\0\u5f19\0\u5f46\0\u5f73\0\u5fa0" +
                    "\0\u5fcd\0\u5ffa\0\u6027\0\u6054\0\u6081\0\u60ae\0\u60db\0\u6108" +
                    "\0\u6135\0\u6162\0\u618f\0\u61bc\0\u61e9\0\u6216\0\u032a\0\u6243" +
                    "\0\u6270\0\u629d\0\u62ca\0\u62f7\0\u6324\0\u6351\0\u637e\0\u63ab" +
                    "\0\u032a\0\u63d8\0\u6405\0\u6432\0\u032a\0\u645f\0\u648c\0\u64b9" +
                    "\0\u032a\0\u64e6\0\u032a\0\u032a\0\u6513\0\u032a\0\u032a\0\u6540" +
                    "\0\u656d\0\u659a\0\u65c7\0\u65f4\0\u6621\0\u032a\0\u664e\0\u032a" +
                    "\0\u667b\0\u66a8\0\u032a\0\u66d5\0\u6702\0\u672f\0\u675c\0\u6789" +
                    "\0\u67b6\0\u67e3\0\u6810\0\u683d\0\u686a\0\u6897\0\u68c4\0\u68f1" +
                    "\0\u691e\0\u694b\0\u6978\0\u69a5\0\u69d2\0\u69ff\0\u6a2c\0\u6a59" +
                    "\0\u6a86\0\u6ab3\0\u6ae0\0\u6b0d\0\u6b3a\0\u6b67\0\u032a\0\u6b94" +
                    "\0\u6bc1\0\u032a\0\u6bee\0\u6c1b\0\u032a\0\u032a\0\u6c48\0\u6c75" +
                    "\0\u032a\0\u6ca2\0\u6ccf\0\u6cfc\0\u032a\0\u6d29\0\u6d56\0\u6d83" +
                    "\0\u6db0\0\u6ddd\0\u6e0a\0\u6e37\0\u6e64\0\u6e91\0\u6ebe\0\u6eeb" +
                    "\0\u6f18\0\u6f45\0\u6f72\0\u032a\0\u6f9f\0\u6fcc\0\u6ff9\0\u7026" +
                    "\0\u7053\0\u7080\0\u70ad\0\u70da\0\u7107\0\u7134\0\u7161\0\u718e" +
                    "\0\u71bb\0\u71e8\0\u7215\0\u7242\0\u726f\0\u032a\0\u729c\0\u72c9" +
                    "\0\u72f6\0\u032a\0\u7323\0\u7350\0\u032a\0\u737d\0\u73aa\0\u032a" +
                    "\0\u73d7\0\u7404\0\u7431\0\u032a\0\u745e\0\u748b\0\u74b8\0\u74e5" +
                    "\0\u032a\0\u032a\0\u032a\0\u7512\0\u032a\0\207\0\u753f\0\u756c" +
                    "\0\u7599\0\u75c6\0\u75f3\0\u7620\0\u764d\0\u767a\0\u76a7\0\u76d4" +
                    "\0\u032a\0\u7701\0\u772e\0\u032a\0\u775b\0\u7788\0\u77b5\0\u77e2" +
                    "\0\u780f\0\u783c\0\u7869\0\u032a\0\u7896\0\u78c3\0\u78f0\0\u791d" +
                    "\0\u032a\0\u794a\0\u7977\0\u79a4\0\u79d1\0\u79fe\0\u7a2b\0\u7a58" +
                    "\0\u7a85\0\u7ab2\0\u7adf\0\u7b0c\0\u7b39\0\u7b66\0\u7b93\0\u7bc0" +
                    "\0\u032a\0\u7bed\0\u032a\0\u7c1a\0\u7c47\0\u7c74\0\u7ca1\0\u7cce" +
                    "\0\u7cfb\0\u032a\0\u032a\0\u032a\0\u032a\0\u7d28\0\u7d55\0\u032a" +
                    "\0\u7d82\0\u032a\0\u7daf\0\u7ddc\0\u7e09\0\u7e36\0\u7e63\0\u032a" +
                    "\0\u7e90\0\u032a\0\u7ebd\0\u032a\0\u032a\0\u7eea\0\u7f17\0\u7f44" +
                    "\0\u032a\0\u032a";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[818];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
                    "\1\22\1\2\1\23\1\24\1\23\1\25\1\26\1\27" +
                    "\1\30\1\31\2\23\1\32\1\3\1\33\1\34\1\35" +
                    "\1\23\2\2\1\36\1\4\1\37\1\23\1\40\1\41" +
                    "\1\42\1\43\1\44\2\45\17\0\1\44\13\0\1\45" +
                    "\4\0\2\44\2\0\1\44\2\0\1\44\3\0\2\3" +
                    "\1\0\1\46\1\47\1\50\1\51\1\52\1\53\1\54" +
                    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\2\0" +
                    "\1\64\1\0\1\65\1\66\1\67\1\70\1\71\2\0" +
                    "\1\72\1\3\77\0\1\23\1\73\6\23\1\74\1\23" +
                    "\1\75\1\76\16\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\1\100\2\23\1\101\2\23\1\102\14\23\1\103" +
                    "\6\23\3\0\3\23\1\77\3\0\1\23\10\0\3\23" +
                    "\1\104\1\105\1\23\1\106\23\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\4\23\1\107\16\23\1\110\1\111" +
                    "\5\23\3\0\3\23\1\77\3\0\1\23\10\0\2\23" +
                    "\1\112\3\23\1\113\5\23\1\114\15\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\4\23\1\115\4\23\1\116" +
                    "\20\23\3\0\3\23\1\77\3\0\1\23\10\0\4\23" +
                    "\1\117\2\23\1\120\1\121\1\23\1\122\10\23\1\123" +
                    "\6\23\3\0\3\23\1\77\3\0\1\23\10\0\3\23" +
                    "\1\124\2\23\1\125\10\23\1\126\3\23\1\127\6\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\3\23\1\130" +
                    "\2\23\1\131\23\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\1\132\5\23\1\133\23\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\14\23\1\134\15\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\4\23\1\135\1\23\1\136" +
                    "\5\23\1\137\15\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\4\23\1\140\3\23\1\141\10\23\1\142\10\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\6\23\1\143" +
                    "\23\23\3\0\3\23\1\77\3\0\1\23\10\0\32\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\1\144\13\23" +
                    "\1\145\15\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\4\23\1\146\25\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\10\23\1\147\14\23\1\150\4\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\1\151\5\23\1\152\5\23" +
                    "\1\153\15\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\5\23\1\154\3\23\1\155\11\23\1\156\6\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\14\23\1\157\15\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\17\23\1\160" +
                    "\12\23\3\0\3\23\1\77\3\0\1\23\4\0\37\33" +
                    "\1\161\15\33\40\34\1\161\14\34\41\0\1\162\60\0" +
                    "\1\163\1\164\6\0\1\165\2\166\5\167\2\170\2\167" +
                    "\1\170\5\167\1\165\5\167\2\170\4\167\1\166\4\167" +
                    "\2\165\2\167\1\165\1\170\1\167\1\165\2\167\1\0" +
                    "\2\45\1\0\1\46\1\47\1\50\1\51\1\52\1\53" +
                    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63" +
                    "\2\0\1\64\1\0\1\65\1\66\1\67\1\70\1\71" +
                    "\2\0\1\72\1\45\23\0\1\171\6\0\1\172\1\0" +
                    "\1\173\1\174\41\0\1\175\2\0\1\176\2\0\1\177" +
                    "\14\0\1\200\34\0\1\201\1\202\1\0\1\203\52\0" +
                    "\1\204\16\0\1\205\1\206\32\0\1\207\3\0\1\210" +
                    "\5\0\1\211\44\0\1\212\4\0\1\213\47\0\1\214" +
                    "\2\0\1\215\1\216\1\0\1\217\10\0\1\220\34\0" +
                    "\1\221\2\0\1\222\10\0\1\223\3\0\1\224\34\0" +
                    "\1\225\2\0\1\226\46\0\1\227\5\0\1\230\62\0" +
                    "\1\231\44\0\1\232\1\0\1\233\5\0\1\234\44\0" +
                    "\1\235\3\0\1\236\10\0\1\237\41\0\1\240\46\0" +
                    "\1\200\13\0\1\241\44\0\1\242\60\0\1\243\14\0" +
                    "\1\244\27\0\1\245\5\0\1\222\5\0\1\246\45\0" +
                    "\1\247\3\0\1\250\11\0\1\251\45\0\1\252\57\0" +
                    "\1\253\35\0\2\23\1\254\27\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\2\23\1\255\4\23\1\256\5\23" +
                    "\1\257\14\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\14\23\1\260\15\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\16\23\1\261\13\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\32\77\3\0\4\77\3\0\1\77\10\0" +
                    "\10\23\1\262\21\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\12\23\1\263\17\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\10\23\1\264\10\23\1\265\10\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\25\23\1\266\4\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\25\23\1\267" +
                    "\4\23\3\0\3\23\1\77\3\0\1\23\10\0\14\23" +
                    "\1\270\15\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\5\23\1\271\24\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\12\23\1\272\7\23\1\273\7\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\5\23\1\274\24\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\25\23\1\275\4\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\7\23\1\276" +
                    "\22\23\3\0\3\23\1\77\3\0\1\23\10\0\10\23" +
                    "\1\277\21\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\2\23\1\300\10\23\1\301\1\23\1\302\12\23\1\303" +
                    "\1\23\3\0\3\23\1\77\3\0\1\23\10\0\23\23" +
                    "\1\304\6\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\2\23\1\305\27\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\22\23\1\306\7\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\5\23\1\307\24\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\11\23\1\310\1\311\17\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\12\23\1\312\17\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\22\23\1\313" +
                    "\7\23\3\0\3\23\1\77\3\0\1\23\10\0\10\23" +
                    "\1\314\21\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\25\23\1\315\4\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\3\23\1\316\26\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\4\23\1\317\25\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\5\23\1\320\24\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\1\23\1\321\30\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\10\23\1\322\21\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\10\23\1\323" +
                    "\21\23\3\0\3\23\1\77\3\0\1\23\10\0\2\23" +
                    "\1\324\10\23\1\325\1\23\1\326\2\23\1\327\4\23" +
                    "\1\330\4\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\6\23\1\331\23\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\20\23\1\332\11\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\6\23\1\333\23\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\4\23\1\334\25\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\23\23\1\335\6\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\5\23\1\336\24\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\20\23\1\337" +
                    "\11\23\3\0\3\23\1\77\3\0\1\23\10\0\25\23" +
                    "\1\340\4\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\6\23\1\341\1\23\1\342\21\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\3\23\1\343\26\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\1\344\23\23\1\345\5\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\14\23\1\346" +
                    "\15\23\3\0\3\23\1\77\3\0\1\23\10\0\5\23" +
                    "\1\347\24\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\25\23\1\350\4\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\20\23\1\351\11\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\6\23\1\352\23\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\25\23\1\353\4\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\24\23\1\354\5\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\11\23\1\355\20\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\14\23\1\356" +
                    "\15\23\3\0\3\23\1\77\3\0\1\23\45\0\1\357" +
                    "\13\0\2\163\1\360\52\163\46\164\1\361\6\164\6\0" +
                    "\1\362\54\0\1\363\4\0\1\364\5\0\1\365\53\0" +
                    "\1\366\56\0\1\367\46\0\1\370\56\0\1\371\52\0" +
                    "\1\372\10\0\1\370\60\0\1\245\54\0\1\373\43\0" +
                    "\1\374\45\0\1\375\45\0\1\376\13\0\1\377\7\0" +
                    "\1\u0100\7\0\1\376\27\0\1\u0101\74\0\1\u0102\36\0" +
                    "\1\u0103\55\0\1\u0104\46\0\1\u0105\10\0\1\u0106\1\0" +
                    "\1\u0107\12\0\1\u0108\47\0\1\u0109\33\0\1\u010a\74\0" +
                    "\1\u010b\37\0\1\u010c\60\0\1\u010d\1\u0103\54\0\1\u0103" +
                    "\64\0\1\u010e\42\0\1\u010f\71\0\1\u0109\32\0\1\u0110" +
                    "\55\0\1\u0111\55\0\1\u0112\50\0\1\u0113\63\0\1\u0114" +
                    "\54\0\1\u0115\46\0\1\u0116\10\0\1\u0117\1\0\1\u0118" +
                    "\2\0\1\u0119\4\0\1\u011a\35\0\1\u011b\66\0\1\222" +
                    "\42\0\1\u011c\52\0\1\u011d\73\0\1\u011e\36\0\1\u011f" +
                    "\67\0\1\212\42\0\1\u0120\1\0\1\u0121\47\0\1\u0122" +
                    "\51\0\1\u0123\23\0\1\u0124\44\0\1\u0125\45\0\1\u0103" +
                    "\67\0\1\u0126\42\0\1\u0127\73\0\1\u0128\53\0\1\u0129" +
                    "\41\0\1\u0103\57\0\1\u012a\40\0\3\23\1\u012b\26\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\23\23\1\u012c" +
                    "\6\23\3\0\3\23\1\77\3\0\1\23\10\0\20\23" +
                    "\1\u012d\11\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\14\23\1\u012e\15\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\10\23\1\u012f\21\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\13\23\1\u0130\16\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\16\23\1\u0131\13\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\1\u0132\22\23\1\u0133\6\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\12\23\1\u0134" +
                    "\17\23\3\0\3\23\1\77\3\0\1\23\10\0\16\23" +
                    "\1\u0135\13\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\5\23\1\u0136\24\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\1\u0137\31\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\13\23\1\u0138\11\23\1\u0139\4\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\5\23\1\u013a\11\23\1\u013b" +
                    "\12\23\3\0\3\23\1\77\3\0\1\23\10\0\14\23" +
                    "\1\u013c\15\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\6\23\1\u013d\23\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\2\23\1\u013e\27\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\3\23\1\u013f\26\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\22\23\1\u0140\7\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\20\23\1\u0141\11\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\1\u0142\13\23\1\u0143" +
                    "\15\23\3\0\3\23\1\77\3\0\1\23\10\0\1\u0144" +
                    "\31\23\3\0\3\23\1\77\3\0\1\23\10\0\23\23" +
                    "\1\u0145\6\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\14\23\1\u0146\15\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\14\23\1\u0147\15\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\23\23\1\u0148\6\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\1\u0149\31\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\12\23\1\u014a\6\23\1\u014b\10\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\1\23\1\u014c" +
                    "\30\23\3\0\3\23\1\77\3\0\1\23\10\0\5\23" +
                    "\1\u014d\5\23\1\u014e\16\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\14\23\1\u014f\15\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\1\u0150\31\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\4\23\1\u0151\25\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\1\u0152\15\23\1\u0153\13\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\14\23\1\u0154" +
                    "\15\23\3\0\3\23\1\77\3\0\1\23\10\0\16\23" +
                    "\1\u0155\13\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\22\23\1\u0156\7\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\4\23\1\u0157\25\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\6\23\1\u0158\23\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\1\u0159\31\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\14\23\1\u015a\15\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\7\23\1\u015b\22\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\7\23\1\u015c\22\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\25\23\1\u015d" +
                    "\4\23\3\0\3\23\1\77\3\0\1\23\10\0\5\23" +
                    "\1\u015e\24\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\3\23\1\u015f\26\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\1\23\1\u0160\30\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\14\23\1\u0161\15\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\23\23\1\u0162\6\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\5\23\1\u0163\24\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\13\23\1\u0164\16\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\22\23\1\u0165" +
                    "\7\23\3\0\3\23\1\77\3\0\1\23\10\0\23\23" +
                    "\1\u0166\6\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\5\23\1\u0167\22\23\1\u0168\1\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\3\23\1\u0169\26\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\4\23\1\u016a\20\23\1\u016b" +
                    "\4\23\3\0\3\23\1\77\3\0\1\23\10\0\14\23" +
                    "\1\u016c\15\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\3\23\1\u016d\26\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\5\23\1\u016e\24\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\5\23\1\u016f\24\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\1\23\1\u0170\30\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\10\23\1\u0171\21\23\3\0" +
                    "\3\23\1\77\3\0\1\23\45\0\1\u0172\13\0\45\164" +
                    "\1\u0173\1\361\6\164\7\0\1\u0174\74\0\1\245\51\0" +
                    "\1\u0175\50\0\1\u0176\50\0\1\u0177\57\0\1\u0178\37\0" +
                    "\1\376\17\0\1\u0179\13\0\1\376\22\0\1\u017a\22\0" +
                    "\1\u017b\43\0\1\u017c\42\0\1\215\67\0\1\u017d\11\0" +
                    "\1\u017e\34\0\1\u017f\11\0\1\u0103\33\0\1\376\33\0" +
                    "\1\376\36\0\1\u0180\46\0\1\u0181\50\0\1\363\55\0" +
                    "\1\u0182\73\0\1\u0109\52\0\1\u0183\34\0\1\u0184\13\0" +
                    "\1\u0185\40\0\1\u0186\77\0\1\u0187\45\0\1\u0103\54\0" +
                    "\1\u0188\63\0\1\u010e\31\0\1\u0189\66\0\1\u018a\6\0" +
                    "\1\u018b\34\0\1\u018c\60\0\1\u018d\5\0\1\u018e\41\0" +
                    "\1\u018f\60\0\1\u018c\46\0\1\376\1\0\1\u0190\15\0" +
                    "\1\u0191\13\0\1\376\36\0\1\u0192\56\0\1\u0193\60\0" +
                    "\1\u0194\36\0\1\u0195\56\0\1\u0196\46\0\1\u0197\70\0" +
                    "\1\u0198\47\0\1\u0199\54\0\1\u019a\52\0\1\u019b\52\0" +
                    "\1\u019c\52\0\1\u0103\67\0\1\u019d\53\0\1\u019e\63\0" +
                    "\1\u019f\55\0\1\u01a0\36\0\1\u01a1\22\0\1\212\27\0" +
                    "\1\u01a2\55\0\1\u0103\20\0\1\u0103\32\0\1\u01a3\56\0" +
                    "\1\u01a4\54\0\1\u01a5\50\0\1\u01a6\63\0\1\u0103\44\0" +
                    "\4\23\1\u01a7\25\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\5\23\1\u01a8\24\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\23\23\1\u01a9\6\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\4\23\1\u01aa\25\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\5\23\1\u01ab\24\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\14\23\1\u01ac\15\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\14\23\1\u01ad" +
                    "\15\23\3\0\3\23\1\77\3\0\1\23\10\0\13\23" +
                    "\1\u01ae\16\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\20\23\1\u01af\11\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\6\23\1\u01b0\23\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\14\23\1\u01b1\15\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\5\23\1\u01b2\24\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\1\u01b3\31\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\14\23\1\u01b4\15\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\14\23\1\u01b5\15\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\4\23\1\u01b6" +
                    "\25\23\3\0\3\23\1\77\3\0\1\23\10\0\10\23" +
                    "\1\u01b7\21\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\23\23\1\u01b8\6\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\20\23\1\u01b9\11\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\14\23\1\u01ba\15\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\6\23\1\u01bb\23\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\10\23\1\u01bc\21\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\4\23\1\u01bd\25\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\25\23\1\u01be" +
                    "\4\23\3\0\3\23\1\77\3\0\1\23\10\0\1\u01bf" +
                    "\31\23\3\0\3\23\1\77\3\0\1\23\10\0\12\23" +
                    "\1\u01c0\17\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\1\23\1\u01c1\30\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\3\23\1\u01c2\26\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\6\23\1\u01c3\23\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\1\23\1\u01c4\30\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\14\23\1\u01c5\15\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\6\23\1\u01c6\23\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\1\u01c7\31\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\7\23\1\u01c8" +
                    "\22\23\3\0\3\23\1\77\3\0\1\23\10\0\14\23" +
                    "\1\u01c9\15\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\13\23\1\u01ca\16\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\25\23\1\u01cb\4\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\25\23\1\u01cc\4\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\14\23\1\u01cd\15\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\16\23\1\u01ce\13\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\14\23\1\u01cf\15\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\23\23\1\u01d0" +
                    "\6\23\3\0\3\23\1\77\3\0\1\23\10\0\6\23" +
                    "\1\u01d1\23\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\5\23\1\u01d2\24\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\4\23\1\u01d3\25\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\5\23\1\u01d4\24\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\14\23\1\u01d5\15\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\23\23\1\u01d6\6\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\4\23\1\u01d7\25\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\10\23\1\u01d8" +
                    "\21\23\3\0\3\23\1\77\3\0\1\23\10\0\14\23" +
                    "\1\u01d9\15\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\16\23\1\u01da\13\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\5\23\1\u01db\24\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\2\23\1\u01dc\27\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\25\23\1\u01dd\4\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\23\23\1\u01de\6\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\23\23\1\u01df\6\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\10\23\1\u01e0" +
                    "\21\23\3\0\3\23\1\77\3\0\1\23\10\0\23\23" +
                    "\1\u01e1\6\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\14\23\1\u01e2\15\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\3\23\1\u01e3\26\23\3\0\3\23\1\77\3\0" +
                    "\1\23\26\0\1\u01e4\42\0\1\245\73\0\1\u01e5\35\0" +
                    "\1\u01e6\55\0\1\u01e7\63\0\1\234\54\0\1\u01e8\53\0" +
                    "\1\u01e9\61\0\1\u0109\42\0\1\u01ea\46\0\1\u01eb\70\0" +
                    "\1\u01ec\54\0\1\u01ed\44\0\1\u01ee\60\0\1\u01ef\64\0" +
                    "\1\u0119\42\0\1\u018f\56\0\1\u0109\50\0\1\u017e\75\0" +
                    "\1\u01f0\27\0\1\u01f1\52\0\1\376\13\0\1\u01f2\17\0" +
                    "\1\376\25\0\1\u012a\57\0\1\u01f3\47\0\1\u01f4\67\0" +
                    "\1\u01f5\46\0\1\u01f6\46\0\1\u01f7\63\0\1\u0109\60\0" +
                    "\1\u01f8\66\0\1\u01f9\54\0\1\u01fa\43\0\1\u01fb\56\0" +
                    "\1\u01fc\52\0\1\u01fd\63\0\1\u01fe\37\0\1\u01ff\53\0" +
                    "\1\u0109\53\0\1\u0200\55\0\1\u0201\72\0\1\u0202\35\0" +
                    "\1\u0203\60\0\1\u0204\42\0\1\376\17\0\1\u0205\13\0" +
                    "\1\376\27\0\1\u0206\51\0\1\u0207\77\0\1\u0103\52\0" +
                    "\1\u0208\41\0\1\u0209\67\0\1\u01a1\45\0\1\u011e\43\0" +
                    "\1\u020a\51\0\5\23\1\u020b\24\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\12\23\1\u020c\17\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\5\23\1\u020d\24\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\1\u020e\31\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\6\23\1\u020f\23\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\20\23\1\u0210" +
                    "\11\23\3\0\3\23\1\77\3\0\1\23\10\0\1\u0211" +
                    "\31\23\3\0\3\23\1\77\3\0\1\23\10\0\14\23" +
                    "\1\u0212\15\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\5\23\1\u0213\24\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\20\23\1\u0214\11\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\1\u0215\31\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\21\23\1\u0216\10\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\10\23\1\u0217\21\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\4\23\1\u0218\25\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\14\23\1\u0219\15\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\1\u021a\31\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\5\23\1\u021b" +
                    "\24\23\3\0\3\23\1\77\3\0\1\23\10\0\14\23" +
                    "\1\u021c\15\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\7\23\1\u021d\22\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\14\23\1\u021e\15\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\14\23\1\u021f\15\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\1\u0220\31\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\4\23\1\u0221\25\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\14\23\1\u0222\15\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\14\23\1\u0223\15\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\10\23\1\u0224" +
                    "\21\23\3\0\3\23\1\77\3\0\1\23\10\0\5\23" +
                    "\1\u0225\24\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\20\23\1\u0226\11\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\10\23\1\u0227\21\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\1\u0228\6\23\1\u0229\22\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\22\23\1\u022a\7\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\14\23\1\u022b\15\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\10\23\1\u022c" +
                    "\21\23\3\0\3\23\1\77\3\0\1\23\10\0\1\u022d" +
                    "\31\23\3\0\3\23\1\77\3\0\1\23\10\0\23\23" +
                    "\1\u022e\6\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\2\23\1\u022f\27\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\20\23\1\u0230\11\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\15\23\1\u0231\14\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\7\23\1\u0232\22\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\20\23\1\u0233\11\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\5\23\1\u0234\24\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\14\23\1\u0235" +
                    "\15\23\3\0\3\23\1\77\3\0\1\23\10\0\1\u0236" +
                    "\31\23\3\0\3\23\1\77\3\0\1\23\10\0\1\u0237" +
                    "\31\23\3\0\3\23\1\77\3\0\1\23\10\0\4\23" +
                    "\1\u0238\25\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\16\23\1\u0239\13\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\25\23\1\u023a\4\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\20\23\1\u023b\11\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\17\23\1\u023c\12\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\1\u023d\31\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\14\23\1\u023e\15\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\10\23\1\u023f\21\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\22\23\1\u0240" +
                    "\7\23\3\0\3\23\1\77\3\0\1\23\10\0\25\23" +
                    "\1\u0241\4\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\1\23\1\u0242\30\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\12\23\1\u0243\17\23\3\0\3\23\1\77\3\0" +
                    "\1\23\45\0\1\u0244\31\0\1\u0109\47\0\1\u0245\47\0" +
                    "\1\u0246\74\0\1\u0247\34\0\1\u0248\61\0\1\u0249\70\0" +
                    "\1\u0103\43\0\1\u018f\50\0\1\u012a\64\0\1\u024a\40\0" +
                    "\1\u024b\54\0\1\u024c\60\0\1\u024d\64\0\1\u024e\45\0" +
                    "\1\u024f\67\0\1\u0103\44\0\1\245\44\0\1\u0250\6\0" +
                    "\1\245\67\0\1\u0103\32\0\1\u0251\77\0\1\u0252\33\0" +
                    "\1\u0183\72\0\1\u0253\51\0\1\u0254\46\0\1\u0255\65\0" +
                    "\1\245\41\0\1\u0256\47\0\1\u0257\54\0\1\u0258\60\0" +
                    "\1\u0109\66\0\1\u0259\63\0\1\u010c\47\0\1\u025a\53\0" +
                    "\1\u0103\35\0\1\u025b\64\0\1\u025c\66\0\1\u025d\44\0" +
                    "\1\u025e\42\0\14\23\1\u025f\15\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\16\23\1\u0260\13\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\5\23\1\u0261\24\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\5\23\1\u0262\24\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\14\23\1\u0263" +
                    "\15\23\3\0\3\23\1\77\3\0\1\23\10\0\14\23" +
                    "\1\u0264\15\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\3\23\1\u0265\26\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\14\23\1\u0266\15\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\3\23\1\u0267\26\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\7\23\1\u0268\22\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\10\23\1\u0269\21\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\12\23\1\u026a\17\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\27\23\1\u026b" +
                    "\2\23\3\0\3\23\1\77\3\0\1\23\10\0\5\23" +
                    "\1\u026c\24\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\14\23\1\u026d\15\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\10\23\1\u026e\21\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\3\23\1\u026f\26\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\14\23\1\u0270\15\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\13\23\1\u0271\16\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\10\23\1\u0272\21\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\6\23\1\u0273" +
                    "\23\23\3\0\3\23\1\77\3\0\1\23\10\0\5\23" +
                    "\1\u0274\24\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\10\23\1\u0275\21\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\5\23\1\u0276\24\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\5\23\1\u0277\24\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\7\23\1\u0278\22\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\2\23\1\u0279\27\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\6\23\1\u027a\23\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\14\23\1\u027b" +
                    "\15\23\3\0\3\23\1\77\3\0\1\23\10\0\14\23" +
                    "\1\u027c\15\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\6\23\1\u027d\23\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\5\23\1\u027e\24\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\1\u027f\13\23\1\u0280\15\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\2\23\1\u0281\27\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\3\23\1\u0282\26\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\14\23\1\u0283" +
                    "\15\23\3\0\3\23\1\77\3\0\1\23\10\0\1\23" +
                    "\1\u0284\4\23\1\u0285\23\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\1\u0286\31\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\1\u0287\31\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\10\23\1\u0288\21\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\12\23\1\u0289\17\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\25\23\1\u028a\4\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\23\23\1\u028b\6\23" +
                    "\3\0\3\23\1\77\3\0\1\23\26\0\1\u028c\16\0" +
                    "\1\u028d\35\0\1\u028e\43\0\1\252\63\0\1\u028f\54\0" +
                    "\1\u0290\43\0\1\u0291\63\0\1\u0292\71\0\1\u0293\30\0" +
                    "\1\u0294\65\0\1\u0295\53\0\1\u0103\47\0\1\u0103\56\0" +
                    "\1\u0248\53\0\1\u0293\47\0\1\u0296\66\0\1\u010e\54\0" +
                    "\1\u0297\46\0\1\u0298\46\0\1\u0189\13\0\1\u0103\42\0" +
                    "\1\215\55\0\1\u0299\52\0\1\u029a\4\0\1\u029b\46\0" +
                    "\1\200\64\0\1\u01f7\56\0\1\u029c\67\0\1\u029d\52\0" +
                    "\1\u017b\31\0\1\23\1\u029e\30\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\11\23\1\u029f\20\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\23\23\1\u02a0\6\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\1\23\1\u02a1\30\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\4\23\1\u02a2" +
                    "\25\23\3\0\3\23\1\77\3\0\1\23\10\0\4\23" +
                    "\1\u02a3\25\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\1\23\1\u02a4\30\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\10\23\1\u02a5\21\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\14\23\1\u02a6\15\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\16\23\1\u02a7\13\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\6\23\1\u02a8\23\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\14\23\1\u02a9\15\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\7\23\1\u02aa" +
                    "\22\23\3\0\3\23\1\77\3\0\1\23\10\0\10\23" +
                    "\1\u02ab\21\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\16\23\1\u02ac\13\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\5\23\1\u02ad\24\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\14\23\1\u02ae\15\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\6\23\1\u02af\23\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\2\23\1\u02b0\27\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\7\23\1\u02b1\22\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\1\23\1\u02b2" +
                    "\30\23\3\0\3\23\1\77\3\0\1\23\10\0\4\23" +
                    "\1\u02b3\25\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\5\23\1\u02b4\24\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\3\23\1\u02b5\26\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\5\23\1\u02b6\24\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\10\23\1\u02b7\21\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\14\23\1\u02b8\15\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\2\23\1\u02b9\27\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\3\23\1\u02ba" +
                    "\26\23\3\0\3\23\1\77\3\0\1\23\10\0\25\23" +
                    "\1\u02bb\4\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\22\23\1\u02bc\7\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\14\23\1\u02bd\15\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\16\23\1\u02be\13\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\20\23\1\u02bf\11\23\3\0\3\23" +
                    "\1\77\3\0\1\23\45\0\1\u02c0\35\0\1\u028c\37\0" +
                    "\1\u02c1\54\0\1\u02c2\57\0\1\u0103\54\0\1\252\66\0" +
                    "\1\u02c3\44\0\1\215\56\0\1\u02c4\62\0\1\u02c5\40\0" +
                    "\1\u02c6\56\0\1\u0204\55\0\1\u029c\57\0\1\u02c7\60\0" +
                    "\1\u02c8\42\0\1\u02c9\66\0\1\217\56\0\1\u02ca\36\0" +
                    "\6\23\1\u02cb\23\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\4\23\1\u02cc\25\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\14\23\1\u02cd\15\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\11\23\1\u02ce\20\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\14\23\1\u02cf\15\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\24\23\1\u02d0\5\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\5\23\1\u02d1" +
                    "\24\23\3\0\3\23\1\77\3\0\1\23\10\0\14\23" +
                    "\1\u02d2\15\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\16\23\1\u02d3\13\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\1\u02d4\31\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\4\23\1\u02d5\25\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\5\23\1\u02d6\24\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\3\23\1\u02d7\26\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\14\23\1\u02d8\15\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\14\23\1\u02d9\15\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\25\23\1\u02da" +
                    "\4\23\3\0\3\23\1\77\3\0\1\23\10\0\14\23" +
                    "\1\u02db\15\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\10\23\1\u02dc\21\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\1\u02dd\31\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\16\23\1\u02de\13\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\25\23\1\u02df\4\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\2\23\1\u02e0\27\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\10\23\1\u02e1\21\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\5\23\1\u02e2\24\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\12\23\1\u02e3" +
                    "\17\23\3\0\3\23\1\77\3\0\1\23\10\0\5\23" +
                    "\1\u02e4\24\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\14\23\1\u02e5\15\23\3\0\3\23\1\77\3\0\1\23" +
                    "\45\0\1\u02e6\25\0\1\u02e7\62\0\1\u02e8\64\0\1\252" +
                    "\26\0\1\376\17\0\1\u02e9\13\0\1\376\22\0\1\u02ea" +
                    "\57\0\1\u02eb\67\0\1\u02ec\63\0\1\u02ed\31\0\1\u02ee" +
                    "\57\0\1\u02ef\47\0\5\23\1\u02f0\24\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\14\23\1\u02f1\15\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\10\23\1\u02f2\21\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\10\23\1\u02f3" +
                    "\21\23\3\0\3\23\1\77\3\0\1\23\10\0\11\23" +
                    "\1\u02f4\20\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\1\u02f5\31\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\12\23\1\u02f6\17\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\10\23\1\u02f7\21\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\1\u02f8\31\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\4\23\1\u02f9\25\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\10\23\1\u02fa\21\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\1\u02fb\31\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\12\23\1\u02fc\17\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\3\23\1\u02fd\26\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\12\23\1\u02fe" +
                    "\17\23\3\0\3\23\1\77\3\0\1\23\10\0\25\23" +
                    "\1\u02ff\4\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\16\23\1\u0300\13\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\3\23\1\u0301\26\23\3\0\3\23\1\77\3\0" +
                    "\1\23\15\0\1\u0302\57\0\1\u0303\56\0\1\u0304\52\0" +
                    "\1\u0305\50\0\1\u0298\62\0\1\u0306\67\0\1\u0307\45\0" +
                    "\1\u0308\41\0\1\u0103\51\0\7\23\1\u0309\22\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\5\23\1\u030a\24\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\5\23\1\u030b" +
                    "\24\23\3\0\3\23\1\77\3\0\1\23\10\0\3\23" +
                    "\1\u030c\26\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\6\23\1\u030d\23\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\25\23\1\u030e\4\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\3\23\1\u030f\26\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\5\23\1\u0310\24\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\5\23\1\u0311\24\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\3\23\1\u0312\26\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\10\23\1\u0313" +
                    "\21\23\3\0\3\23\1\77\3\0\1\23\10\0\1\u0314" +
                    "\31\23\3\0\3\23\1\77\3\0\1\23\10\0\6\23" +
                    "\1\u0315\23\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\5\23\1\u0316\24\23\3\0\3\23\1\77\3\0\1\23" +
                    "\17\0\1\u0206\52\0\1\u01a1\55\0\1\u0198\73\0\1\u0317" +
                    "\27\0\1\u0318\62\0\1\u0104\53\0\1\u0319\47\0\17\23" +
                    "\1\u031a\12\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\25\23\1\u031b\4\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\25\23\1\u031c\4\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\10\23\1\u031d\21\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\5\23\1\u031e\24\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\5\23\1\u031f\24\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\10\23\1\u0320\21\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\14\23\1\u0321" +
                    "\15\23\3\0\3\23\1\77\3\0\1\23\10\0\10\23" +
                    "\1\u0322\21\23\3\0\3\23\1\77\3\0\1\23\10\0" +
                    "\22\23\1\u0323\7\23\3\0\3\23\1\77\3\0\1\23" +
                    "\10\0\22\23\1\u0324\7\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\6\23\1\u0325\23\23\3\0\3\23\1\77" +
                    "\3\0\1\23\15\0\1\u0326\71\0\1\u0327\40\0\1\u01f7" +
                    "\46\0\14\23\1\u0328\15\23\3\0\3\23\1\77\3\0" +
                    "\1\23\10\0\6\23\1\u0329\23\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\12\23\1\u032a\17\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\1\u032b\31\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\14\23\1\u032c\15\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\22\23\1\u032d\7\23" +
                    "\3\0\3\23\1\77\3\0\1\23\16\0\1\u01ec\46\0" +
                    "\1\u0303\54\0\10\23\1\u032e\21\23\3\0\3\23\1\77" +
                    "\3\0\1\23\10\0\5\23\1\u032f\24\23\3\0\3\23" +
                    "\1\77\3\0\1\23\10\0\7\23\1\u0330\22\23\3\0" +
                    "\3\23\1\77\3\0\1\23\10\0\25\23\1\u0331\4\23" +
                    "\3\0\3\23\1\77\3\0\1\23\10\0\14\23\1\u0332" +
                    "\15\23\3\0\3\23\1\77\3\0\1\23\4\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[32625];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\2\1\1\11\33\1\1\11\1\1\2\11\27\0" +
                    "\66\1\1\11\1\0\4\1\2\11\63\0\103\1\1\0" +
                    "\1\11\15\0\1\1\54\0\107\1\1\0\1\11\63\0" +
                    "\75\1\47\0\71\1\33\0\55\1\22\0\43\1\12\0" +
                    "\33\1\1\11\11\0\22\1\7\0\16\1\3\0\14\1" +
                    "\2\0\13\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[818];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    public _YangLexer() {
        this((java.io.Reader) null);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _YangLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return YANG_H_NON_WORD;
                    }
                    // fall through
                    case 103:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 104:
                        break;
                    case 3: {
                        return YANG_H_IDENTIFIER;
                    }
                    // fall through
                    case 105:
                        break;
                    case 4: {
                        return YANG_H_STRING;
                    }
                    // fall through
                    case 106:
                        break;
                    case 5: {
                        return YANG_H_DIGIT;
                    }
                    // fall through
                    case 107:
                        break;
                    case 6: {
                        return YANG_H_SEMICOLON;
                    }
                    // fall through
                    case 108:
                        break;
                    case 7: {
                        return YANG_H_OPERATORS;
                    }
                    // fall through
                    case 109:
                        break;
                    case 8: {
                        return YANG_H_LEFT_BRACE;
                    }
                    // fall through
                    case 110:
                        break;
                    case 9: {
                        return YANG_H_RIGHT_BRACE;
                    }
                    // fall through
                    case 111:
                        break;
                    case 10: {
                        return YANG_H_EXTENSION_IDENTIFIER;
                    }
                    // fall through
                    case 112:
                        break;
                    case 11: {
                        return YANG_H_OR_KEYWORD;
                    }
                    // fall through
                    case 113:
                        break;
                    case 12: {
                        return YANG_H_SINGLE_LINE_COMMENT;
                    }
                    // fall through
                    case 114:
                        break;
                    case 13: {
                        return YANG_H_BLOCK_COMMENT;
                    }
                    // fall through
                    case 115:
                        break;
                    case 14: {
                        return YANG_H_INVALID_ESCAPE;
                    }
                    // fall through
                    case 116:
                        break;
                    case 15: {
                        return YANG_H_VALID_ESCAPE;
                    }
                    // fall through
                    case 117:
                        break;
                    case 16: {
                        return YANG_H_MIN_KEYWORD;
                    }
                    // fall through
                    case 118:
                        break;
                    case 17: {
                        return YANG_H_MAX_KEYWORD;
                    }
                    // fall through
                    case 119:
                        break;
                    case 18: {
                        return YANG_H_RPC_KEYWORD;
                    }
                    // fall through
                    case 120:
                        break;
                    case 19: {
                        return YANG_H_AND_KEYWORD;
                    }
                    // fall through
                    case 121:
                        break;
                    case 20: {
                        return YANG_H_ADD_KEYWORD;
                    }
                    // fall through
                    case 122:
                        break;
                    case 21: {
                        return YANG_H_NOT_KEYWORD;
                    }
                    // fall through
                    case 123:
                        break;
                    case 22: {
                        return YANG_H_BIT_KEYWORD;
                    }
                    // fall through
                    case 124:
                        break;
                    case 23: {
                        return YANG_H_KEY_KEYWORD;
                    }
                    // fall through
                    case 125:
                        break;
                    case 24: {
                        return YANG_H_KEYWORD_MATCHER;
                    }
                    // fall through
                    case 126:
                        break;
                    case 25: {
                        return YANG_H_MUST_KEYWORD;
                    }
                    // fall through
                    case 127:
                        break;
                    case 26: {
                        return YANG_H_PATH_KEYWORD;
                    }
                    // fall through
                    case 128:
                        break;
                    case 27: {
                        return YANG_H_TRUE_KEYWORD;
                    }
                    // fall through
                    case 129:
                        break;
                    case 28: {
                        return YANG_H_TYPE_KEYWORD;
                    }
                    // fall through
                    case 130:
                        break;
                    case 29: {
                        return YANG_H_CASE_KEYWORD;
                    }
                    // fall through
                    case 131:
                        break;
                    case 30: {
                        return YANG_H_ENUM_KEYWORD;
                    }
                    // fall through
                    case 132:
                        break;
                    case 31: {
                        return YANG_H_LIST_KEYWORD;
                    }
                    // fall through
                    case 133:
                        break;
                    case 32: {
                        return YANG_H_LEAF_KEYWORD;
                    }
                    // fall through
                    case 134:
                        break;
                    case 33: {
                        return YANG_H_USER_KEYWORD;
                    }
                    // fall through
                    case 135:
                        break;
                    case 34: {
                        return YANG_H_USES_KEYWORD;
                    }
                    // fall through
                    case 136:
                        break;
                    case 35: {
                        return YANG_H_BASE_KEYWORD;
                    }
                    // fall through
                    case 137:
                        break;
                    case 36: {
                        return YANG_H_WHEN_KEYWORD;
                    }
                    // fall through
                    case 138:
                        break;
                    case 37: {
                        return YANG_H_INPUT_KEYWORD;
                    }
                    // fall through
                    case 139:
                        break;
                    case 38: {
                        return YANG_H_RANGE_KEYWORD;
                    }
                    // fall through
                    case 140:
                        break;
                    case 39: {
                        return YANG_H_FALSE_KEYWORD;
                    }
                    // fall through
                    case 141:
                        break;
                    case 40: {
                        return YANG_H_VALUE_KEYWORD;
                    }
                    // fall through
                    case 142:
                        break;
                    case 41: {
                        return YANG_H_UNITS_KEYWORD;
                    }
                    // fall through
                    case 143:
                        break;
                    case 42: {
                        return YANG_H_IMPORT_KEYWORD;
                    }
                    // fall through
                    case 144:
                        break;
                    case 43: {
                        return YANG_H_MODULE_KEYWORD;
                    }
                    // fall through
                    case 145:
                        break;
                    case 44: {
                        return YANG_H_PREFIX_KEYWORD;
                    }
                    // fall through
                    case 146:
                        break;
                    case 45: {
                        return YANG_H_OUTPUT_KEYWORD;
                    }
                    // fall through
                    case 147:
                        break;
                    case 46: {
                        return YANG_H_REFINE_KEYWORD;
                    }
                    // fall through
                    case 148:
                        break;
                    case 47: {
                        return YANG_H_ACTION_KEYWORD;
                    }
                    // fall through
                    case 149:
                        break;
                    case 48: {
                        return YANG_H_ANYXML_KEYWORD;
                    }
                    // fall through
                    case 150:
                        break;
                    case 49: {
                        return YANG_H_CONFIG_KEYWORD;
                    }
                    // fall through
                    case 151:
                        break;
                    case 50: {
                        return YANG_H_CHOICE_KEYWORD;
                    }
                    // fall through
                    case 152:
                        break;
                    case 51: {
                        return YANG_H_DELETE_KEYWORD;
                    }
                    // fall through
                    case 153:
                        break;
                    case 52: {
                        return YANG_H_LENGTH_KEYWORD;
                    }
                    // fall through
                    case 154:
                        break;
                    case 53: {
                        return YANG_H_UNIQUE_KEYWORD;
                    }
                    // fall through
                    case 155:
                        break;
                    case 54: {
                        return YANG_H_STATUS_KEYWORD;
                    }
                    // fall through
                    case 156:
                        break;
                    case 55: {
                        return YANG_H_SYSTEM_KEYWORD;
                    }
                    // fall through
                    case 157:
                        break;
                    case 56: {
                        return YANG_H_INCLUDE_KEYWORD;
                    }
                    // fall through
                    case 158:
                        break;
                    case 57: {
                        return YANG_H_PATTERN_KEYWORD;
                    }
                    // fall through
                    case 159:
                        break;
                    case 58: {
                        return YANG_H_REPLACE_KEYWORD;
                    }
                    // fall through
                    case 160:
                        break;
                    case 59: {
                        return YANG_H_TYPEDEF_KEYWORD;
                    }
                    // fall through
                    case 161:
                        break;
                    case 60: {
                        return YANG_H_ANYDATA_KEYWORD;
                    }
                    // fall through
                    case 162:
                        break;
                    case 61: {
                        return YANG_H_AUGMENT_KEYWORD;
                    }
                    // fall through
                    case 163:
                        break;
                    case 62: {
                        return YANG_H_CONTACT_KEYWORD;
                    }
                    // fall through
                    case 164:
                        break;
                    case 63: {
                        return YANG_H_CURRENT_KEYWORD;
                    }
                    // fall through
                    case 165:
                        break;
                    case 64: {
                        return YANG_H_DEFAULT_KEYWORD;
                    }
                    // fall through
                    case 166:
                        break;
                    case 65: {
                        return YANG_H_DEVIATE_KEYWORD;
                    }
                    // fall through
                    case 167:
                        break;
                    case 66: {
                        return YANG_H_FEATURE_KEYWORD;
                    }
                    // fall through
                    case 168:
                        break;
                    case 67: {
                        return YANG_H_IDENTITY_KEYWORD;
                    }
                    // fall through
                    case 169:
                        break;
                    case 68: {
                        return YANG_H_MODIFIER_KEYWORD;
                    }
                    // fall through
                    case 170:
                        break;
                    case 69: {
                        return YANG_H_POSITION_KEYWORD;
                    }
                    // fall through
                    case 171:
                        break;
                    case 70: {
                        return YANG_H_PRESENCE_KEYWORD;
                    }
                    // fall through
                    case 172:
                        break;
                    case 71: {
                        return YANG_H_OBSOLETE_KEYWORD;
                    }
                    // fall through
                    case 173:
                        break;
                    case 72: {
                        return YANG_H_REVISION_KEYWORD;
                    }
                    // fall through
                    case 174:
                        break;
                    case 73: {
                        return YANG_H_ARGUMENT_KEYWORD;
                    }
                    // fall through
                    case 175:
                        break;
                    case 74: {
                        return YANG_H_GROUPING_KEYWORD;
                    }
                    // fall through
                    case 176:
                        break;
                    case 75: {
                        return YANG_H_DATE_ARG;
                    }
                    // fall through
                    case 177:
                        break;
                    case 76: {
                        return YANG_H_MANDATORY_KEYWORD;
                    }
                    // fall through
                    case 178:
                        break;
                    case 77: {
                        return YANG_H_REFERENCE_KEYWORD;
                    }
                    // fall through
                    case 179:
                        break;
                    case 78: {
                        return YANG_H_CONTAINER_KEYWORD;
                    }
                    // fall through
                    case 180:
                        break;
                    case 79: {
                        return YANG_H_NAMESPACE_KEYWORD;
                    }
                    // fall through
                    case 181:
                        break;
                    case 80: {
                        return YANG_H_DEVIATION_KEYWORD;
                    }
                    // fall through
                    case 182:
                        break;
                    case 81: {
                        return YANG_H_EXTENSION_KEYWORD;
                    }
                    // fall through
                    case 183:
                        break;
                    case 82: {
                        return YANG_H_LEAF_LIST_KEYWORD;
                    }
                    // fall through
                    case 184:
                        break;
                    case 83: {
                        return YANG_H_UNBOUNDED_KEYWORD;
                    }
                    // fall through
                    case 185:
                        break;
                    case 84: {
                        return YANG_H_SUBMODULE_KEYWORD;
                    }
                    // fall through
                    case 186:
                        break;
                    case 85: {
                        return YANG_H_IF_FEATURE_KEYWORD;
                    }
                    // fall through
                    case 187:
                        break;
                    case 86: {
                        return YANG_H_ORDERED_BY_KEYWORD;
                    }
                    // fall through
                    case 188:
                        break;
                    case 87: {
                        return YANG_H_DEPRECATED_KEYWORD;
                    }
                    // fall through
                    case 189:
                        break;
                    case 88: {
                        return YANG_H_BELONGS_TO_KEYWORD;
                    }
                    // fall through
                    case 190:
                        break;
                    case 89: {
                        return YANG_H_YIN_ELEMENT_KEYWORD;
                    }
                    // fall through
                    case 191:
                        break;
                    case 90: {
                        return YANG_H_DESCRIPTION_KEYWORD;
                    }
                    // fall through
                    case 192:
                        break;
                    case 91: {
                        return YANG_H_INVERT_MATCH_KEYWORD;
                    }
                    // fall through
                    case 193:
                        break;
                    case 92: {
                        return YANG_H_MIN_ELEMENTS_KEYWORD;
                    }
                    // fall through
                    case 194:
                        break;
                    case 93: {
                        return YANG_H_MAX_ELEMENTS_KEYWORD;
                    }
                    // fall through
                    case 195:
                        break;
                    case 94: {
                        return YANG_H_ORGANIZATION_KEYWORD;
                    }
                    // fall through
                    case 196:
                        break;
                    case 95: {
                        return YANG_H_NOTIFICATION_KEYWORD;
                    }
                    // fall through
                    case 197:
                        break;
                    case 96: {
                        return YANG_H_YANG_VERSION_KEYWORD;
                    }
                    // fall through
                    case 198:
                        break;
                    case 97: {
                        return YANG_H_REVISION_DATE_KEYWORD;
                    }
                    // fall through
                    case 199:
                        break;
                    case 98: {
                        return YANG_H_NOT_SUPPORTED_KEYWORD;
                    }
                    // fall through
                    case 200:
                        break;
                    case 99: {
                        return YANG_H_ERROR_MESSAGE_KEYWORD;
                    }
                    // fall through
                    case 201:
                        break;
                    case 100: {
                        return YANG_H_ERROR_APP_TAG_KEYWORD;
                    }
                    // fall through
                    case 202:
                        break;
                    case 101: {
                        return YANG_H_FRACTION_DIGITS_KEYWORD;
                    }
                    // fall through
                    case 203:
                        break;
                    case 102: {
                        return YANG_H_REQUIRE_INSTANCE_KEYWORD;
                    }
                    // fall through
                    case 204:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
