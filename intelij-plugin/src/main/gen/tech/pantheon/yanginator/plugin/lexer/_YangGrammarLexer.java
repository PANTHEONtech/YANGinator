/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 *
 *   Copyright (c) 2021 PANTHEON.tech, s.r.o. All rights reserved.
 *
 *   This program and the accompanying materials are made available under the
 *   terms of the Eclipse Public License v1.0 which accompanies this distribution,
 *   and is available at http://www.eclipse.org/legal/epl-v10.html
 *
 */

package tech.pantheon.yanginator.plugin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ADD_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ALPHA;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ANYXML_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ARGUMENT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ASTERISK;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_AUGMENT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_BACK_SLASH;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_BASE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_BELONGS_TO_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_BIT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_BLOCK_COMMENT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_CARRIAGE_RETURN;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_CASE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_CHOICE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_CLOSED_BRACKET;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_COLON;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_CONFIG_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_CONTACT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_CONTAINER_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_CURRENT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DASH;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DEFAULT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DELETE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DEPRECATED_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DESCRIPTION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DEVIATE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DEVIATION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOUBLE_DOT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOUBLE_QUOTE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ENUM_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_EQUAL;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ERROR_APP_TAG_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ERROR_MESSAGE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_EXTENSION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_FALSE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_FEATURE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_FORWARD_SLASH;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_FRACTION_DIGITS_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_GROUPING_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_IDENTITY_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_IF_FEATURE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_IMPORT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_INCLUDE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_INPUT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_KEY_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_LEAF_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_LEAF_LIST_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_LEFT_BRACE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_LEFT_PARENTHESIS;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_LENGTH_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_LINEFEED;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_LIST_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_MANDATORY_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_MAX_ELEMENTS_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_MAX_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_MIN_ELEMENTS_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_MIN_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_MODULE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_MUST_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_NAMESPACE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_NOTIFICATION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_NOT_SUPPORTED_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_OBSOLETE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_OPEN_BRACKET;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ORDERED_BY_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ORGANIZATION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_OTHER_CHARACTER;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_OUTPUT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_PATH_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_PATTERN_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_PIPE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_POSITION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_POSITIVE_NUMBER;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_PREFIX_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_PRESENCE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_RANGE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_REFERENCE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_REFINE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_REPLACE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_REQUIRE_INSTANCE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_REVISION_DATE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_REVISION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_RIGHT_BRACE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_RIGHT_PARENTHESIS;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_RPC_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SEMICOLON;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SINGLE_LINE_COMMENT_START;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SINGLE_QUOTE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SPACE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_STATUS_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_STRINGS_DOUBLE_QUOTE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_STRINGS_SINGLE_QUOTE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SUBMODULE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SYSTEM_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_TAB;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_TRUE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_TYPEDEF_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_TYPE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_UNBOUNDED_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_UNDERSCORE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_UNIQUE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_UNITS_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_USER_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_USES_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_VALUE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_WHEN_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_YANG_VERSION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_YIN_ELEMENT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ZERO;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_YangGrammarLexer.flex</tt>
 */
public class _YangGrammarLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\27\1\25\2\24\1\26\22\0\1\24\1\0\1\3\4\0\1\4\1\13\1\14\1\2\2\0\1\12"+
    "\1\11\1\20\1\22\11\31\1\6\1\5\1\0\1\15\3\0\32\23\1\16\1\30\1\17\1\0\1\1\1"+
    "\0\1\32\1\45\1\51\1\54\1\43\1\53\1\41\1\52\1\50\1\23\1\57\1\37\1\36\1\33\1"+
    "\47\1\55\1\61\1\40\1\46\1\44\1\42\1\56\1\62\1\35\1\34\1\60\1\7\1\21\1\10\7"+
    "\0\1\24\32\0\1\24\337\0\1\24\177\0\13\24\35\0\2\24\5\0\1\24\57\0\1\24\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\25\24\1\33\1\0\1\34\1\35"+
    "\1\36\70\0\1\37\5\0\1\40\2\0\1\41\10\0"+
    "\1\42\13\0\1\43\34\0\1\44\1\0\1\45\12\0"+
    "\1\46\2\0\1\47\1\0\1\50\12\0\1\51\1\52"+
    "\1\53\2\0\1\54\1\55\1\56\15\0\1\57\15\0"+
    "\1\60\4\0\1\61\16\0\1\62\7\0\1\63\15\0"+
    "\1\64\7\0\1\65\13\0\1\66\1\67\11\0\1\70"+
    "\2\0\1\71\1\0\1\72\5\0\1\73\4\0\1\74"+
    "\1\0\1\75\2\0\1\76\2\0\1\77\5\0\1\100"+
    "\1\101\2\0\1\102\6\0\1\103\2\0\1\104\12\0"+
    "\1\105\7\0\1\106\5\0\1\107\2\0\1\110\1\0"+
    "\1\111\1\0\1\112\1\0\1\113\1\0\1\114\1\0"+
    "\1\115\2\0\1\116\12\0\1\117\1\0\1\120\10\0"+
    "\1\121\1\0\1\122\5\0\1\123\1\124\1\125\4\0"+
    "\1\126\2\0\1\127\1\130\2\0\1\131\1\132\3\0"+
    "\1\133\3\0\1\134\3\0\1\135\12\0\1\136\1\0"+
    "\1\137\1\140\2\0\1\141\3\0\1\142\10\0\1\143"+
    "\1\0\1\144\1\145\1\146\1\147\4\0\1\150\1\0"+
    "\1\151\1\152\1\0\1\153\1\154\4\0\1\155\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\63\0\146\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\231\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\314\0\63\0\377\0\u0132\0\u0165\0\u0198\0\u01cb"+
    "\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363"+
    "\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb"+
    "\0\63\0\u052e\0\63\0\63\0\63\0\u0561\0\u0594\0\u05c7"+
    "\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7"+
    "\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f"+
    "\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27"+
    "\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf"+
    "\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57"+
    "\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\63\0\u1089\0\u10bc"+
    "\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254"+
    "\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\63"+
    "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\63\0\u161d\0\u1650\0\u1683\0\u16b6"+
    "\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e"+
    "\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e"+
    "\0\63\0\u1bb1\0\63\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0"+
    "\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\63\0\u1de2\0\u1e15"+
    "\0\u1e48\0\u1e7b\0\63\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a"+
    "\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\63\0\63\0\63"+
    "\0\u20ac\0\u20df\0\u2112\0\63\0\63\0\u2145\0\u2178\0\u21ab"+
    "\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343"+
    "\0\u2376\0\u23a9\0\63\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8"+
    "\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640"+
    "\0\63\0\u2673\0\u26a6\0\u26d9\0\u270c\0\63\0\u273f\0\u2772"+
    "\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871\0\u28a4\0\u28d7\0\u290a"+
    "\0\u293d\0\u2970\0\u29a3\0\u29d6\0\63\0\u2a09\0\u2a3c\0\u2a6f"+
    "\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\63\0\u2b6e\0\u2ba1\0\u2bd4"+
    "\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c"+
    "\0\u2d9f\0\u2dd2\0\63\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1"+
    "\0\u2f04\0\u2f37\0\63\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\u3036"+
    "\0\u3069\0\u309c\0\u30cf\0\u3102\0\u3135\0\u3168\0\63\0\63"+
    "\0\u319b\0\u31ce\0\u3201\0\u3234\0\u3267\0\u329a\0\u32cd\0\u3300"+
    "\0\u3333\0\63\0\u3366\0\u3399\0\63\0\u33cc\0\63\0\u33ff"+
    "\0\u3432\0\u3465\0\u3498\0\u34cb\0\63\0\u34fe\0\u3531\0\u3564"+
    "\0\u3597\0\63\0\u35ca\0\63\0\u35fd\0\u3630\0\63\0\u3663"+
    "\0\u3696\0\63\0\u36c9\0\u36fc\0\u372f\0\u3762\0\u3795\0\63"+
    "\0\63\0\u37c8\0\u37fb\0\63\0\u382e\0\u3861\0\u3894\0\u38c7"+
    "\0\u38fa\0\u392d\0\63\0\u3960\0\u3993\0\63\0\u39c6\0\u39f9"+
    "\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8\0\u3b2b\0\u3b5e\0\u3b91"+
    "\0\63\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d\0\u3c90\0\u3cc3\0\u3cf6"+
    "\0\63\0\u3d29\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5\0\63\0\u3e28"+
    "\0\u3e5b\0\63\0\u3e8e\0\63\0\u3ec1\0\63\0\u3ef4\0\63"+
    "\0\u3f27\0\63\0\u3f5a\0\63\0\u3f8d\0\u3fc0\0\63\0\u3ff3"+
    "\0\u4026\0\u4059\0\u408c\0\u40bf\0\u40f2\0\u4125\0\u4158\0\u418b"+
    "\0\u41be\0\u41f1\0\u4224\0\63\0\u4257\0\u428a\0\u42bd\0\u42f0"+
    "\0\u4323\0\u4356\0\u4389\0\u43bc\0\63\0\u43ef\0\63\0\u4422"+
    "\0\u4455\0\u4488\0\u44bb\0\u44ee\0\63\0\63\0\63\0\u4521"+
    "\0\u4554\0\u4587\0\u45ba\0\63\0\u45ed\0\u4620\0\63\0\63"+
    "\0\u4653\0\u4686\0\63\0\63\0\u46b9\0\u46ec\0\u471f\0\63"+
    "\0\u4752\0\u4785\0\u47b8\0\63\0\u47eb\0\u481e\0\u4851\0\63"+
    "\0\u4884\0\u48b7\0\u48ea\0\u491d\0\u4950\0\u4983\0\u49b6\0\u49e9"+
    "\0\u4a1c\0\u4a4f\0\63\0\u4a82\0\63\0\63\0\u4ab5\0\u4ae8"+
    "\0\63\0\u4b1b\0\u4b4e\0\u4b81\0\63\0\u4bb4\0\u4be7\0\u4c1a"+
    "\0\u4c4d\0\u4c80\0\u4cb3\0\u4ce6\0\u4d19\0\63\0\u4d4c\0\63"+
    "\0\63\0\63\0\63\0\u4d7f\0\u4db2\0\u4de5\0\u4e18\0\63"+
    "\0\u4e4b\0\63\0\63\0\u4e7e\0\63\0\63\0\u4eb1\0\u4ee4"+
    "\0\u4f17\0\u4f4a\0\63\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\25\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\25\1\53\1\54\1\55\1\56\1\57"+
    "\2\25\1\60\74\0\1\61\53\0\1\62\15\0\1\63"+
    "\45\0\1\64\1\65\111\0\1\66\4\0\1\67\1\0"+
    "\1\70\11\0\1\71\40\0\1\72\14\0\1\73\45\0"+
    "\1\74\15\0\1\75\44\0\1\76\7\0\1\77\4\0"+
    "\1\100\1\101\55\0\1\102\4\0\1\103\44\0\1\104"+
    "\10\0\1\105\11\0\1\106\45\0\1\107\55\0\1\110"+
    "\12\0\1\111\47\0\1\112\1\0\1\113\2\0\1\114"+
    "\56\0\1\115\3\0\1\116\54\0\1\117\10\0\1\120"+
    "\4\0\1\121\46\0\1\122\5\0\1\123\1\0\1\124"+
    "\56\0\1\125\1\0\1\126\2\0\1\127\50\0\1\130"+
    "\2\0\1\131\14\0\1\132\1\133\40\0\1\134\7\0"+
    "\1\135\4\0\1\136\2\0\1\137\42\0\1\140\5\0"+
    "\1\141\2\0\1\142\62\0\1\143\51\0\1\144\5\0"+
    "\1\145\6\0\1\146\45\0\1\147\73\0\1\150\71\0"+
    "\1\151\10\0\2\62\1\152\60\62\34\0\1\153\67\0"+
    "\1\154\62\0\1\155\75\0\1\156\44\0\1\157\70\0"+
    "\1\160\51\0\1\161\62\0\1\162\62\0\1\163\1\0"+
    "\1\164\73\0\1\165\70\0\1\166\41\0\1\167\61\0"+
    "\1\170\1\171\75\0\1\172\47\0\1\173\102\0\1\174"+
    "\1\0\1\175\1\176\2\0\1\177\52\0\1\200\60\0"+
    "\1\201\60\0\1\202\2\0\1\203\55\0\1\204\61\0"+
    "\1\205\64\0\1\206\56\0\1\207\77\0\1\210\47\0"+
    "\1\211\66\0\1\212\53\0\1\213\67\0\1\214\64\0"+
    "\1\215\61\0\1\216\47\0\1\217\71\0\1\220\12\0"+
    "\1\221\52\0\1\222\64\0\1\223\65\0\1\224\3\0"+
    "\1\225\62\0\1\226\17\0\1\227\113\0\1\230\65\0"+
    "\1\231\54\0\1\232\55\0\1\233\76\0\1\234\52\0"+
    "\1\235\55\0\1\236\62\0\1\237\67\0\1\240\6\0"+
    "\1\241\4\0\1\242\1\0\1\243\1\244\50\0\1\245"+
    "\61\0\1\246\65\0\1\247\53\0\1\250\57\0\1\251"+
    "\71\0\1\252\17\0\2\62\1\152\15\62\1\253\42\62"+
    "\35\0\1\254\67\0\1\255\56\0\1\256\67\0\1\257"+
    "\31\0\1\260\35\0\1\261\53\0\1\262\33\0\1\263"+
    "\124\0\1\264\20\0\1\265\114\0\1\266\60\0\1\267"+
    "\32\0\1\270\123\0\1\271\50\0\1\272\65\0\1\273"+
    "\57\0\1\274\64\0\1\275\4\0\1\276\51\0\1\277"+
    "\73\0\1\300\54\0\1\301\62\0\1\302\67\0\1\303"+
    "\57\0\1\304\14\0\1\305\41\0\1\306\5\0\1\307"+
    "\52\0\1\310\67\0\1\311\66\0\1\312\56\0\1\313"+
    "\62\0\1\314\62\0\1\315\66\0\1\316\57\0\1\317"+
    "\54\0\1\320\70\0\1\321\50\0\1\322\73\0\1\323"+
    "\74\0\1\324\54\0\1\325\52\0\1\326\65\0\1\327"+
    "\67\0\1\330\66\0\1\331\42\0\1\332\72\0\1\333"+
    "\57\0\1\334\66\0\1\335\6\0\1\336\57\0\1\337"+
    "\60\0\1\340\65\0\1\341\55\0\1\342\61\0\1\343"+
    "\70\0\1\344\43\0\1\345\70\0\1\346\72\0\1\347"+
    "\56\0\1\350\5\0\1\351\56\0\1\352\4\0\1\353"+
    "\57\0\1\354\54\0\1\355\53\0\1\356\65\0\1\357"+
    "\62\0\1\360\67\0\1\361\65\0\1\362\62\0\1\363"+
    "\67\0\1\364\21\0\1\365\113\0\1\366\51\0\1\367"+
    "\73\0\1\370\56\0\1\371\66\0\1\372\31\0\1\373"+
    "\114\0\1\374\61\0\1\375\57\0\1\376\55\0\1\377"+
    "\61\0\1\u0100\76\0\1\u0101\64\0\1\u0102\67\0\1\u0103"+
    "\47\0\1\u0104\66\0\1\u0105\56\0\1\u0106\53\0\1\u0107"+
    "\67\0\1\u0108\76\0\1\u0109\41\0\1\u010a\72\0\1\u010b"+
    "\66\0\1\u010c\55\0\1\u010d\53\0\1\u010e\67\0\1\u010f"+
    "\64\0\1\u0110\57\0\1\u0111\65\0\1\u0112\64\0\1\u0113"+
    "\56\0\1\u0114\65\0\1\u0115\63\0\1\u0116\61\0\1\u0117"+
    "\51\0\1\u0118\100\0\1\u0119\63\0\1\u011a\54\0\1\u011b"+
    "\63\0\1\u011c\60\0\1\u011d\64\0\1\u011e\56\0\1\u011f"+
    "\64\0\1\u0120\63\0\1\u0121\51\0\1\u0122\73\0\1\u0123"+
    "\62\0\1\u0124\67\0\1\u0125\56\0\1\u0126\61\0\1\u0127"+
    "\56\0\1\u0128\66\0\1\u0129\52\0\1\u012a\104\0\1\u012b"+
    "\47\0\1\u012c\70\0\1\u012d\70\0\1\u012e\43\0\1\u012f"+
    "\67\0\1\u0130\55\0\1\u0131\66\0\1\u0132\56\0\1\u0133"+
    "\62\0\1\u0134\75\0\1\u0135\53\0\1\u0136\62\0\1\u0137"+
    "\70\0\1\u0138\61\0\1\u0139\52\0\1\u013a\72\0\1\u013b"+
    "\45\0\1\u013c\72\0\1\u013d\65\0\1\u013e\26\0\1\u013f"+
    "\113\0\1\u0140\60\0\1\u0141\57\0\1\u0142\100\0\1\u0143"+
    "\54\0\1\u0144\64\0\1\u0145\55\0\1\u0146\63\0\1\u0147"+
    "\61\0\1\u0148\73\0\1\u0149\52\0\1\u014a\50\0\1\u014b"+
    "\100\0\1\u014c\45\0\1\u014d\77\0\1\u014e\1\u014f\52\0"+
    "\1\u0150\64\0\1\u0151\67\0\1\u0152\52\0\1\u0153\65\0"+
    "\1\u0154\67\0\1\u0155\51\0\1\u0156\74\0\1\u0157\55\0"+
    "\1\u0158\56\0\1\u0159\55\0\1\u015a\64\0\1\u015b\75\0"+
    "\1\u015c\45\0\1\u015d\73\0\1\u015e\50\0\1\u015f\105\0"+
    "\1\u0160\56\0\1\u0161\54\0\1\u0162\62\0\1\u0163\66\0"+
    "\1\u0164\56\0\1\u0165\62\0\1\u0166\67\0\1\u0167\45\0"+
    "\1\u0168\72\0\1\u0169\66\0\1\u016a\56\0\1\u016b\52\0"+
    "\1\u016c\103\0\1\u016d\56\0\1\u016e\44\0\1\u016f\3\0"+
    "\1\u0170\77\0\1\u0171\55\0\1\u0172\56\0\1\u0173\100\0"+
    "\1\u0174\56\0\1\u0175\52\0\1\u0176\61\0\1\u0177\63\0"+
    "\1\u0178\62\0\1\u0179\62\0\1\u017a\51\0\1\u017b\73\0"+
    "\1\u017c\65\0\1\u017d\56\0\1\u017e\74\0\1\u017f\51\0"+
    "\1\u0180\50\0\1\u0181\73\0\1\u0182\4\0\1\u0183\45\0"+
    "\1\u0184\100\0\1\u0185\60\0\1\u0186\57\0\1\u0187\67\0"+
    "\1\u0188\66\0\1\u0189\37\0\1\u018a\70\0\1\u018b\60\0"+
    "\1\u018c\64\0\1\u018d\60\0\1\u018e\62\0\1\u018f\72\0"+
    "\1\u0190\65\0\1\u0191\44\0\1\u0192\41\0\1\u0193\111\0"+
    "\1\u0194\64\0\1\u0195\66\0\1\u0196\70\0\1\u0197\50\0"+
    "\1\u0198\31\0\1\u0199\107\0\1\u019a\55\0\1\u019b\42\0"+
    "\1\u019c\113\0\1\u019d\61\0\1\u019e\54\0\1\u019f\71\0"+
    "\1\u01a0\52\0\1\u01a1\73\0\1\u01a2\62\0\1\u01a3\65\0"+
    "\1\u01a4\56\0\1\u01a5\52\0\1\u01a6\72\0\1\u01a7\66\0"+
    "\1\u01a8\57\0\1\u01a9\64\0\1\u01aa\57\0\1\u01ab\53\0"+
    "\1\u01ac\71\0\1\u01ad\62\0\1\u01ae\63\0\1\u01af\61\0"+
    "\1\u01b0\31\0\1\u01b1\120\0\1\u01b2\66\0\1\u01b3\41\0"+
    "\1\u01b4\104\0\1\u01b5\53\0\1\u01b6\60\0\1\u01b7\61\0"+
    "\1\u01b8\63\0\1\u01b9\63\0\1\u01ba\55\0\1\u01bb\62\0"+
    "\1\u01bc\34\0\1\u01bd\120\0\1\u01be\55\0\1\u01bf\52\0"+
    "\1\u01c0\67\0\1\u01c1\72\0\1\u01c2\62\0\1\u01c3\45\0"+
    "\1\u01c4\62\0\1\u01c5\62\0\1\u01c6\103\0\1\u01c7\41\0"+
    "\1\u01c8\41\0\1\u01c9\116\0\1\u01ca\63\0\1\u01cb\63\0"+
    "\1\u01cc\46\0\1\u01cd\71\0\1\u01ce\73\0\1\u01cf\55\0"+
    "\1\u01d0\67\0\1\u01d1\52\0\1\u01d2\65\0\1\u01d3\62\0"+
    "\1\u01d4\57\0\1\u01d5\62\0\1\u01d6\62\0\1\u01d7\50\0"+
    "\1\u01d8\76\0\1\u01d9\60\0\1\u01da\50\0\1\u01db\77\0"+
    "\1\u01dc\63\0\1\u01dd\45\0\1\u01de\72\0\1\u01df\52\0"+
    "\1\u01e0\62\0\1\u01e1\75\0\1\u01e2\62\0\1\u01e3\60\0"+
    "\1\u01e4\62\0\1\u01e5\50\0\1\u01e6\71\0\1\u01e7\54\0"+
    "\1\u01e8\70\0\1\u01e9\75\0\1\u01ea\51\0\1\u01eb\51\0"+
    "\1\u01ec\71\0\1\u01ed\64\0\1\u01ee\67\0\1\u01ef\45\0"+
    "\1\u01f0\73\0\1\u01f1\67\0\1\u01f2\57\0\1\u01f3\57\0"+
    "\1\u01f4\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20349];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\11\11\1\1\6\11\1\1\7\11\1\1\1\11"+
    "\25\1\1\11\1\0\3\11\70\0\1\11\5\0\1\1"+
    "\2\0\1\1\10\0\1\11\13\0\1\11\34\0\1\11"+
    "\1\0\1\11\12\0\1\11\2\0\1\1\1\0\1\11"+
    "\12\0\3\11\2\0\1\1\2\11\15\0\1\11\15\0"+
    "\1\11\4\0\1\11\16\0\1\11\7\0\1\11\15\0"+
    "\1\11\7\0\1\11\13\0\2\11\11\0\1\11\2\0"+
    "\1\11\1\0\1\11\5\0\1\11\4\0\1\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\5\0\2\11\2\0"+
    "\1\11\6\0\1\11\2\0\1\11\12\0\1\11\7\0"+
    "\1\11\5\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\12\0\1\1\1\0\1\11\10\0\1\11\1\0"+
    "\1\11\5\0\3\11\4\0\1\11\2\0\2\11\2\0"+
    "\2\11\3\0\1\11\3\0\1\11\3\0\1\11\12\0"+
    "\1\11\1\0\2\11\2\0\1\11\3\0\1\11\10\0"+
    "\1\11\1\0\4\11\4\0\1\11\1\0\2\11\1\0"+
    "\2\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _YangGrammarLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _YangGrammarLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return YANG_OTHER_CHARACTER;
            } 
            // fall through
          case 111: break;
          case 2: 
            { return YANG_UNDERSCORE;
            } 
            // fall through
          case 112: break;
          case 3: 
            { return YANG_ASTERISK;
            } 
            // fall through
          case 113: break;
          case 4: 
            { return YANG_DOUBLE_QUOTE;
            } 
            // fall through
          case 114: break;
          case 5: 
            { return YANG_SINGLE_QUOTE;
            } 
            // fall through
          case 115: break;
          case 6: 
            { return YANG_SEMICOLON;
            } 
            // fall through
          case 116: break;
          case 7: 
            { return YANG_COLON;
            } 
            // fall through
          case 117: break;
          case 8: 
            { return YANG_LEFT_BRACE;
            } 
            // fall through
          case 118: break;
          case 9: 
            { return YANG_RIGHT_BRACE;
            } 
            // fall through
          case 119: break;
          case 10: 
            { return YANG_DOT;
            } 
            // fall through
          case 120: break;
          case 11: 
            { return YANG_DASH;
            } 
            // fall through
          case 121: break;
          case 12: 
            { return YANG_LEFT_PARENTHESIS;
            } 
            // fall through
          case 122: break;
          case 13: 
            { return YANG_RIGHT_PARENTHESIS;
            } 
            // fall through
          case 123: break;
          case 14: 
            { return YANG_EQUAL;
            } 
            // fall through
          case 124: break;
          case 15: 
            { return YANG_OPEN_BRACKET;
            } 
            // fall through
          case 125: break;
          case 16: 
            { return YANG_CLOSED_BRACKET;
            } 
            // fall through
          case 126: break;
          case 17: 
            { return YANG_FORWARD_SLASH;
            } 
            // fall through
          case 127: break;
          case 18: 
            { return YANG_PIPE;
            } 
            // fall through
          case 128: break;
          case 19: 
            { return YANG_ZERO;
            } 
            // fall through
          case 129: break;
          case 20: 
            { return YANG_ALPHA;
            } 
            // fall through
          case 130: break;
          case 21: 
            { return YANG_SPACE;
            } 
            // fall through
          case 131: break;
          case 22: 
            { return YANG_LINEFEED;
            } 
            // fall through
          case 132: break;
          case 23: 
            { return YANG_CARRIAGE_RETURN;
            } 
            // fall through
          case 133: break;
          case 24: 
            { return YANG_TAB;
            } 
            // fall through
          case 134: break;
          case 25: 
            { return YANG_BACK_SLASH;
            } 
            // fall through
          case 135: break;
          case 26: 
            { return YANG_POSITIVE_NUMBER;
            } 
            // fall through
          case 136: break;
          case 27: 
            { return YANG_DOUBLE_DOT;
            } 
            // fall through
          case 137: break;
          case 28: 
            { return YANG_SINGLE_LINE_COMMENT_START;
            } 
            // fall through
          case 138: break;
          case 29: 
            { return YANG_STRINGS_DOUBLE_QUOTE;
            } 
            // fall through
          case 139: break;
          case 30: 
            { return YANG_STRINGS_SINGLE_QUOTE;
            } 
            // fall through
          case 140: break;
          case 31: 
            { return YANG_ADD_KEYWORD;
            } 
            // fall through
          case 141: break;
          case 32: 
            { return YANG_MAX_KEYWORD;
            } 
            // fall through
          case 142: break;
          case 33: 
            { return YANG_MIN_KEYWORD;
            } 
            // fall through
          case 143: break;
          case 34: 
            { return YANG_RPC_KEYWORD;
            } 
            // fall through
          case 144: break;
          case 35: 
            { return YANG_BIT_KEYWORD;
            } 
            // fall through
          case 145: break;
          case 36: 
            { return YANG_KEY_KEYWORD;
            } 
            // fall through
          case 146: break;
          case 37: 
            { return YANG_BLOCK_COMMENT;
            } 
            // fall through
          case 147: break;
          case 38: 
            { return YANG_MUST_KEYWORD;
            } 
            // fall through
          case 148: break;
          case 39: 
            { return YANG_LEAF_KEYWORD;
            } 
            // fall through
          case 149: break;
          case 40: 
            { return YANG_LIST_KEYWORD;
            } 
            // fall through
          case 150: break;
          case 41: 
            { return YANG_USER_KEYWORD;
            } 
            // fall through
          case 151: break;
          case 42: 
            { return YANG_USES_KEYWORD;
            } 
            // fall through
          case 152: break;
          case 43: 
            { return YANG_ENUM_KEYWORD;
            } 
            // fall through
          case 153: break;
          case 44: 
            { return YANG_TYPE_KEYWORD;
            } 
            // fall through
          case 154: break;
          case 45: 
            { return YANG_TRUE_KEYWORD;
            } 
            // fall through
          case 155: break;
          case 46: 
            { return YANG_BASE_KEYWORD;
            } 
            // fall through
          case 156: break;
          case 47: 
            { return YANG_CASE_KEYWORD;
            } 
            // fall through
          case 157: break;
          case 48: 
            { return YANG_PATH_KEYWORD;
            } 
            // fall through
          case 158: break;
          case 49: 
            { return YANG_WHEN_KEYWORD;
            } 
            // fall through
          case 159: break;
          case 50: 
            { return YANG_RANGE_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 51: 
            { return YANG_UNITS_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 52: 
            { return YANG_INPUT_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 53: 
            { return YANG_FALSE_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 54: 
            { return YANG_VALUE_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 55: 
            { return YANG_ANYXML_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 56: 
            { return YANG_MODULE_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 57: 
            { return YANG_LENGTH_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 58: 
            { return YANG_REFINE_KEYWORD;
            } 
            // fall through
          case 168: break;
          case 59: 
            { return YANG_UNIQUE_KEYWORD;
            } 
            // fall through
          case 169: break;
          case 60: 
            { return YANG_SYSTEM_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 61: 
            { return YANG_STATUS_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 62: 
            { return YANG_OUTPUT_KEYWORD;
            } 
            // fall through
          case 172: break;
          case 63: 
            { return YANG_IMPORT_KEYWORD;
            } 
            // fall through
          case 173: break;
          case 64: 
            { return YANG_CONFIG_KEYWORD;
            } 
            // fall through
          case 174: break;
          case 65: 
            { return YANG_CHOICE_KEYWORD;
            } 
            // fall through
          case 175: break;
          case 66: 
            { return YANG_DELETE_KEYWORD;
            } 
            // fall through
          case 176: break;
          case 67: 
            { return YANG_PREFIX_KEYWORD;
            } 
            // fall through
          case 177: break;
          case 68: 
            { return YANG_AUGMENT_KEYWORD;
            } 
            // fall through
          case 178: break;
          case 69: 
            { return YANG_REPLACE_KEYWORD;
            } 
            // fall through
          case 179: break;
          case 70: 
            { return YANG_TYPEDEF_KEYWORD;
            } 
            // fall through
          case 180: break;
          case 71: 
            { return YANG_INCLUDE_KEYWORD;
            } 
            // fall through
          case 181: break;
          case 72: 
            { return YANG_CURRENT_KEYWORD;
            } 
            // fall through
          case 182: break;
          case 73: 
            { return YANG_CONTACT_KEYWORD;
            } 
            // fall through
          case 183: break;
          case 74: 
            { return YANG_FEATURE_KEYWORD;
            } 
            // fall through
          case 184: break;
          case 75: 
            { return YANG_DEFAULT_KEYWORD;
            } 
            // fall through
          case 185: break;
          case 76: 
            { return YANG_DEVIATE_KEYWORD;
            } 
            // fall through
          case 186: break;
          case 77: 
            { return YANG_PATTERN_KEYWORD;
            } 
            // fall through
          case 187: break;
          case 78: 
            { return YANG_ARGUMENT_KEYWORD;
            } 
            // fall through
          case 188: break;
          case 79: 
            { return YANG_REVISION_KEYWORD;
            } 
            // fall through
          case 189: break;
          case 80: 
            { return YANG_GROUPING_KEYWORD;
            } 
            // fall through
          case 190: break;
          case 81: 
            { return YANG_OBSOLETE_KEYWORD;
            } 
            // fall through
          case 191: break;
          case 82: 
            { return YANG_IDENTITY_KEYWORD;
            } 
            // fall through
          case 192: break;
          case 83: 
            { return YANG_PRESENCE_KEYWORD;
            } 
            // fall through
          case 193: break;
          case 84: 
            { return YANG_POSITION_KEYWORD;
            } 
            // fall through
          case 194: break;
          case 85: 
            { return YANG_NAMESPACE_KEYWORD;
            } 
            // fall through
          case 195: break;
          case 86: 
            { return YANG_MANDATORY_KEYWORD;
            } 
            // fall through
          case 196: break;
          case 87: 
            { return YANG_LEAF_LIST_KEYWORD;
            } 
            // fall through
          case 197: break;
          case 88: 
            { return YANG_REFERENCE_KEYWORD;
            } 
            // fall through
          case 198: break;
          case 89: 
            { return YANG_UNBOUNDED_KEYWORD;
            } 
            // fall through
          case 199: break;
          case 90: 
            { return YANG_EXTENSION_KEYWORD;
            } 
            // fall through
          case 200: break;
          case 91: 
            { return YANG_SUBMODULE_KEYWORD;
            } 
            // fall through
          case 201: break;
          case 92: 
            { return YANG_CONTAINER_KEYWORD;
            } 
            // fall through
          case 202: break;
          case 93: 
            { return YANG_DEVIATION_KEYWORD;
            } 
            // fall through
          case 203: break;
          case 94: 
            { return YANG_BELONGS_TO_KEYWORD;
            } 
            // fall through
          case 204: break;
          case 95: 
            { return YANG_ORDERED_BY_KEYWORD;
            } 
            // fall through
          case 205: break;
          case 96: 
            { return YANG_IF_FEATURE_KEYWORD;
            } 
            // fall through
          case 206: break;
          case 97: 
            { return YANG_DEPRECATED_KEYWORD;
            } 
            // fall through
          case 207: break;
          case 98: 
            { return YANG_YIN_ELEMENT_KEYWORD;
            } 
            // fall through
          case 208: break;
          case 99: 
            { return YANG_DESCRIPTION_KEYWORD;
            } 
            // fall through
          case 209: break;
          case 100: 
            { return YANG_NOTIFICATION_KEYWORD;
            } 
            // fall through
          case 210: break;
          case 101: 
            { return YANG_YANG_VERSION_KEYWORD;
            } 
            // fall through
          case 211: break;
          case 102: 
            { return YANG_MAX_ELEMENTS_KEYWORD;
            } 
            // fall through
          case 212: break;
          case 103: 
            { return YANG_MIN_ELEMENTS_KEYWORD;
            } 
            // fall through
          case 213: break;
          case 104: 
            { return YANG_ORGANIZATION_KEYWORD;
            } 
            // fall through
          case 214: break;
          case 105: 
            { return YANG_NOT_SUPPORTED_KEYWORD;
            } 
            // fall through
          case 215: break;
          case 106: 
            { return YANG_REVISION_DATE_KEYWORD;
            } 
            // fall through
          case 216: break;
          case 107: 
            { return YANG_ERROR_APP_TAG_KEYWORD;
            } 
            // fall through
          case 217: break;
          case 108: 
            { return YANG_ERROR_MESSAGE_KEYWORD;
            } 
            // fall through
          case 218: break;
          case 109: 
            { return YANG_FRACTION_DIGITS_KEYWORD;
            } 
            // fall through
          case 219: break;
          case 110: 
            { return YANG_REQUIRE_INSTANCE_KEYWORD;
            } 
            // fall through
          case 220: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
