/*
 *
 *   Copyright (c) 2021 PANTHEON.tech, s.r.o. All rights reserved.
 *
 *   This program and the accompanying materials are made available under the
 *   terms of the Eclipse Public License v1.0 which accompanies this distribution,
 *   and is available at http://www.eclipse.org/legal/epl-v10.html
 *
 */

{
 parserClass="tech.pantheon.yanginator.plugin.parser.YangParser"



  implements="tech.pantheon.yanginator.plugin.psi.YangNamedElement"
  extends="tech.pantheon.yanginator.plugin.psi.impl.YangNamedElementImpl"

  psiClassPrefix="Yang"
  psiImplClassSuffix="Impl"
  psiPackage="tech.pantheon.yanginator.plugin.psi"
  psiImplPackage="tech.pantheon.yanginator.plugin.psi.impl"

  elementTypeHolderClass="tech.pantheon.yanginator.plugin.psi.YangTypes"
  elementTypePrefix="YANG_"
  elementTypeClass="tech.pantheon.yanginator.plugin.psi.YangElementType"
  tokenTypeClass="tech.pantheon.yanginator.plugin.psi.YangTokenType"

  extends(".*stmt|unknown_statement.*")=Statement

  generateTokenAccessors=true
}


yang ::=  (module-stmt | submodule-stmt)

tokens ::= BLOCK_COMMENT


//***********************************
//generated by parser (RFCParser module)
//***********************************
//directly from
//https://datatracker.ietf.org/doc/html/rfc6020#section-12
//***********************************
//based on rfc6020
//this rfc is not flawless and grammar needed to be updated additionally based on testing and other needs but stmts
//are still in the same order as rfc6020 so it should not be hard to find differences between this part of bnf file
//and rfc6020
//***********************************


module-stmt ::= optsep MODULE_KEYWORD sep identifier-arg-quoted
 optsep
 ( LEFT_BRACE stmtsep
 module-header-stmts
 linkage-stmts?
 meta-stmts?
 revision-stmts?
 body-stmts
 RIGHT_BRACE ) optsep


submodule-stmt ::= optsep SUBMODULE_KEYWORD sep identifier-arg-quoted
 optsep
 ( LEFT_BRACE stmtsep
 submodule-header-stmts
 linkage-stmts?
 meta-stmts?
 revision-stmts?
 body-stmts
 RIGHT_BRACE ) optsep

module-header-stmts-body ::= ( yang-version-stmt stmtsep ) | // ?
 namespace-stmt stmtsep |
 prefix-stmt stmtsep

 module-header-stmts ::= module-header-stmts-body +

submodule-header-stmts-body ::= ( yang-version-stmt stmtsep ) | // ?
 belongs-to-stmt stmtsep

 submodule-header-stmts ::=
 submodule-header-stmts-body +

meta-stmts-body ::= ( organization-stmt stmtsep ) | // ?
 ( contact-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 meta-stmts ::= meta-stmts-body +

linkage-stmts-body ::= ( import-stmt stmtsep ) | // *
 ( include-stmt stmtsep ) // *

 linkage-stmts ::= linkage-stmts-body +

revision-stmts ::= ( revision-stmt stmtsep ) +

body-stmts ::= ( ( extension-stmt |
 feature-stmt |
 identity-stmt |
 typedef-stmt |
 grouping-stmt |
 data-def-stmt |
 augment-stmt |
 rpc-stmt |
 notification-stmt |
 deviation-stmt ) stmtsep ) *

data-def-stmt ::= container-stmt |
 leaf-stmt |
 leaf-list-stmt |
 list-stmt |
 choice-stmt |
 anyxml-stmt |
 uses-stmt

yang-version-stmt ::= YANG_VERSION_KEYWORD sep yang-version-arg-str
 optsep stmtend

yang-version-arg-str ::= yang-version-arg | ( DOUBLE_QUOTE yang-version-arg DOUBLE_QUOTE ) /* a string that matches the rule
 yang-version-arg > */
yang-version-arg ::= "1" (DOT "1")?

import-stmt ::= IMPORT_KEYWORD sep identifier-arg-quoted optsep
 ( LEFT_BRACE stmtsep
 prefix-stmt stmtsep
 ( revision-date-stmt stmtsep ) ?
 RIGHT_BRACE )

include-stmt ::= INCLUDE_KEYWORD sep identifier-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 ( revision-date-stmt stmtsep ) ?
 RIGHT_BRACE ) )

namespace-stmt ::= NAMESPACE_KEYWORD sep uri-str optsep stmtend

prefix-stmt ::= PREFIX_KEYWORD sep prefix-arg-str
 optsep stmtend

belongs-to-stmt ::= BELONGS_TO_KEYWORD sep identifier-arg-quoted
 optsep
 ( LEFT_BRACE stmtsep
 prefix-stmt stmtsep
 RIGHT_BRACE )

organization-stmt ::= ORGANIZATION_KEYWORD sep string
 optsep stmtend

contact-stmt ::= CONTACT_KEYWORD sep string optsep stmtend

description-stmt ::= DESCRIPTION_KEYWORD sep string optsep
 stmtend

reference-stmt ::= REFERENCE_KEYWORD sep string optsep stmtend

units-stmt ::= UNITS_KEYWORD sep string optsep stmtend

revision-stmt ::= REVISION_KEYWORD sep revision-date optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 ( description-stmt stmtsep ) ?
 ( reference-stmt stmtsep ) ?
 RIGHT_BRACE ) )

revision-date ::= date-arg-str

revision-date-stmt ::= REVISION_DATE_KEYWORD sep revision-date stmtend

extension-stmt-body ::= ( argument-stmt stmtsep ) | // ?
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 extension-stmt ::= EXTENSION_KEYWORD sep identifier-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 extension-stmt-body *
 RIGHT_BRACE ) )

argument-stmt ::= ARGUMENT_KEYWORD sep identifier-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 ( yin-element-stmt stmtsep ) ?
 RIGHT_BRACE ) )

yin-element-stmt ::= YIN_ELEMENT_KEYWORD sep yin-element-arg-str
 stmtend

yin-element-arg-str ::= yin-element-arg | ( DOUBLE_QUOTE yin-element-arg DOUBLE_QUOTE ) /* a string that matches the rule
 yin-element-arg > */
yin-element-arg ::= TRUE_KEYWORD | FALSE_KEYWORD

identity-stmt-body ::= ( base-stmt stmtsep ) | // ?
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 identity-stmt ::= IDENTITY_KEYWORD sep identifier-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 identity-stmt-body *
 RIGHT_BRACE )
 )
 {
    implements="tech.pantheon.yanginator.plugin.reference.YangGeneratedReferenceType"
    extends="tech.pantheon.yanginator.plugin.reference.YangGeneratedReferenceTypeImpl"
 }

base-stmt ::= BASE_KEYWORD sep identifier-ref-arg-quoted
 optsep stmtend
 {
    implements="tech.pantheon.yanginator.plugin.reference.YangGeneratedReferenceType"
    extends="tech.pantheon.yanginator.plugin.reference.YangGeneratedReferenceTypeImpl"
 }

feature-stmt-body ::= ( if-feature-stmt stmtsep ) | // *
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 feature-stmt ::= FEATURE_KEYWORD sep identifier-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 feature-stmt-body +
 RIGHT_BRACE ) )

if-feature-stmt ::= IF_FEATURE_KEYWORD sep identifier-ref-arg-quoted
 optsep stmtend

typedef-stmt-body ::= (type-stmt stmtsep) |
 ( units-stmt stmtsep ) | // ?
 ( default-stmt stmtsep ) | // ?
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 typedef-stmt ::= TYPEDEF_KEYWORD sep identifier-arg-quoted optsep
 ( LEFT_BRACE stmtsep
 typedef-stmt-body +
 RIGHT_BRACE )
 {
    implements="tech.pantheon.yanginator.plugin.reference.YangGeneratedReferenceType"
    extends="tech.pantheon.yanginator.plugin.reference.YangGeneratedReferenceTypeImpl"
 }

type-stmt ::= TYPE_KEYWORD sep identifier-ref-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 type-body-stmts
 RIGHT_BRACE ) )
 {
    implements="tech.pantheon.yanginator.plugin.reference.YangGeneratedReferenceType"
    extends="tech.pantheon.yanginator.plugin.reference.YangGeneratedReferenceTypeImpl"
 }

type-body-stmts ::= numerical-restrictions |
 decimal64-specification |
 enum-specification |
 leafref-specification |
 identityref-specification |
 instance-identifier-specification |
 bits-specification |
 union-specification |
 string-restrictions     //order different than rfc6020 because string-restrictions can be empty so it have to be matched last.

numerical-restrictions ::= range-stmt stmtsep

range-stmt-body ::= ( error-message-stmt stmtsep ) | // ?
 ( error-app-tag-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 range-stmt ::= RANGE_KEYWORD sep range-arg-str optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 range-stmt-body *
 RIGHT_BRACE ) )

decimal64-specification ::= fraction-digits-stmt stmtsep // stmsep is not corresponding with rfc6020 (added additionally)

fraction-digits-stmt ::= FRACTION_DIGITS_KEYWORD sep
 fraction-digits-arg-str stmtend

fraction-digits-arg-str ::= fraction-digits-arg | ( DOUBLE_QUOTE fraction-digits-arg DOUBLE_QUOTE ) /* a string that matches the rule
 fraction-digits-arg > */
fraction-digits-arg ::= ( "1" ( ZERO | "1" | "2" | "3" | "4" |
 "5" | "6" | "7" | "8" ) ? )
 | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

string-restrictions-body ::= ( length-stmt stmtsep ) | // ?
 ( pattern-stmt stmtsep ) // *

 string-restrictions ::= string-restrictions-body *

length-stmt-body ::= ( error-message-stmt stmtsep ) | // ?
 ( error-app-tag-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 length-stmt ::= LENGTH_KEYWORD sep length-arg-str optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 length-stmt-body *
 RIGHT_BRACE ) )

pattern-stmt-body ::= ( error-message-stmt stmtsep ) | // ?
 ( error-app-tag-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 pattern-stmt ::= PATTERN_KEYWORD sep string optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 pattern-stmt-body *
 RIGHT_BRACE ) )

default-stmt ::= DEFAULT_KEYWORD sep string stmtend

enum-specification ::= ( enum-stmt stmtsep ) +

enum-stmt-body ::= ( value-stmt stmtsep ) | // ?
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 enum-stmt ::= ENUM_KEYWORD sep string optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 enum-stmt-body *
 RIGHT_BRACE ) )

leafref-specification-body ::= (path-stmt stmtsep) |
 ( require-instance-stmt stmtsep ) // ?

 leafref-specification ::=
 leafref-specification-body +

path-stmt ::= PATH_KEYWORD sep path-arg-str stmtend

require-instance-stmt ::= REQUIRE_INSTANCE_KEYWORD sep
 require-instance-arg-str stmtend

require-instance-arg-str ::= require-instance-arg | ( DOUBLE_QUOTE require-instance-arg DOUBLE_QUOTE ) /* a string that matches the rule
 require-instance-arg > */
require-instance-arg ::= TRUE_KEYWORD | FALSE_KEYWORD

instance-identifier-specification ::=
 ( require-instance-stmt stmtsep )

identityref-specification ::=
 base-stmt stmtsep

union-specification ::= ( type-stmt stmtsep ) +

bits-specification ::= ( bit-stmt stmtsep ) +

bit-stmt-body ::= ( position-stmt stmtsep ) | // ?
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 bit-stmt ::= BIT_KEYWORD sep identifier-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 bit-stmt-body *
 RIGHT_BRACE )
 )


position-stmt ::= POSITION_KEYWORD sep
 position-value-arg-str stmtend

position-value-arg-str ::= position-value-arg | ( DOUBLE_QUOTE position-value-arg DOUBLE_QUOTE ) /* a string that matches the rule
 position-value-arg > */
position-value-arg ::= non-negative-integer-value

status-stmt ::= STATUS_KEYWORD sep status-arg-str stmtend

status-arg-str ::= status-arg | ( DOUBLE_QUOTE status-arg DOUBLE_QUOTE ) /* a string that matches the rule
 status-arg > */
status-arg ::= CURRENT_KEYWORD |
 OBSOLETE_KEYWORD |
 DEPRECATED_KEYWORD

config-stmt ::= CONFIG_KEYWORD sep
 config-arg-str stmtend

config-arg-str ::= config-arg | ( DOUBLE_QUOTE config-arg DOUBLE_QUOTE ) /* a string that matches the rule
 config-arg > */
config-arg ::= TRUE_KEYWORD | FALSE_KEYWORD

mandatory-stmt ::= MANDATORY_KEYWORD sep
 mandatory-arg-str stmtend

mandatory-arg-str ::= mandatory-arg | ( DOUBLE_QUOTE mandatory-arg DOUBLE_QUOTE ) /* a string that matches the rule
 mandatory-arg > */
mandatory-arg ::= TRUE_KEYWORD | FALSE_KEYWORD

presence-stmt ::= PRESENCE_KEYWORD sep string stmtend

ordered-by-stmt ::= ORDERED_BY_KEYWORD sep
 ordered-by-arg-str stmtend

ordered-by-arg-str ::= ordered-by-arg | ( DOUBLE_QUOTE ordered-by-arg DOUBLE_QUOTE ) /* a string that matches the rule
 ordered-by-arg > */
ordered-by-arg ::= USER_KEYWORD | SYSTEM_KEYWORD

must-stmt-body ::= ( error-message-stmt stmtsep ) | // ?
 ( error-app-tag-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 must-stmt ::= MUST_KEYWORD sep string optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 must-stmt-body *
 RIGHT_BRACE ) )

error-message-stmt ::= ERROR_MESSAGE_KEYWORD sep string stmtend

error-app-tag-stmt ::= ERROR_APP_TAG_KEYWORD sep string stmtend

min-elements-stmt ::= MIN_ELEMENTS_KEYWORD sep
 min-value-arg-str stmtend

min-value-arg-str ::= min-value-arg | ( DOUBLE_QUOTE min-value-arg DOUBLE_QUOTE ) /* a string that matches the rule
 min-value-arg > */
min-value-arg ::= non-negative-integer-value

max-elements-stmt ::= MAX_ELEMENTS_KEYWORD sep
 max-value-arg-str stmtend

max-value-arg-str ::= max-value-arg | ( DOUBLE_QUOTE max-value-arg DOUBLE_QUOTE ) /* a string that matches the rule
 max-value-arg > */
max-value-arg ::= UNBOUNDED_KEYWORD |
 positive-integer-value

value-stmt ::= VALUE_KEYWORD sep ( integer-value | integer-value-str ) stmtend

grouping-stmt-body ::= ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) | // ?
 (  (typedef-stmt |
 grouping-stmt ) stmtsep ) | // *
 ( data-def-stmt stmtsep ) // *

 grouping-stmt ::= GROUPING_KEYWORD sep identifier-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 grouping-stmt-body *
 RIGHT_BRACE ) )
 {
    implements="tech.pantheon.yanginator.plugin.reference.YangGeneratedReferenceType"
    extends="tech.pantheon.yanginator.plugin.reference.YangGeneratedReferenceTypeImpl"
 }

container-stmt-body ::= ( when-stmt stmtsep ) | // ?
 ( if-feature-stmt stmtsep ) | // *
 ( must-stmt stmtsep ) | // *
 ( presence-stmt stmtsep ) | // ?
 ( config-stmt stmtsep ) | // ?
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) | // ?
 ( ( typedef-stmt |
 grouping-stmt ) stmtsep ) | // *
 ( data-def-stmt stmtsep ) // *

 container-stmt ::= CONTAINER_KEYWORD sep identifier-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 container-stmt-body *
 RIGHT_BRACE ) )

leaf-stmt-body ::= ( when-stmt stmtsep ) | // ?
 ( if-feature-stmt stmtsep ) | // *
 ( type-stmt stmtsep) |
 ( units-stmt stmtsep ) | // ?
 ( must-stmt stmtsep ) | // *
 ( default-stmt stmtsep ) | // ?
 ( config-stmt stmtsep ) | // ?
 ( mandatory-stmt stmtsep ) | // ?
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 leaf-stmt ::= LEAF_KEYWORD sep identifier-arg-quoted optsep
 ( LEFT_BRACE stmtsep
 leaf-stmt-body +
 RIGHT_BRACE )

leaf-list-stmt-body ::= ( when-stmt stmtsep ) | // ?
 ( if-feature-stmt stmtsep ) | // *
 (type-stmt stmtsep) |
 ( units-stmt stmtsep ) | // ?
 ( must-stmt stmtsep ) | // *
 ( config-stmt stmtsep ) | // ?
 ( min-elements-stmt stmtsep ) | // ?
 ( max-elements-stmt stmtsep ) | // ?
 ( ordered-by-stmt stmtsep ) | // ?
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 leaf-list-stmt ::= LEAF_LIST_KEYWORD sep identifier-arg-quoted optsep
 ( LEFT_BRACE stmtsep
 leaf-list-stmt-body +
 RIGHT_BRACE )

list-stmt-body ::= ( when-stmt stmtsep ) | // ?
 ( if-feature-stmt stmtsep ) | // *
 ( must-stmt stmtsep ) | // *
 ( key-stmt stmtsep ) | // ?
 ( unique-stmt stmtsep ) | // *
 ( config-stmt stmtsep ) | // ?
 ( min-elements-stmt stmtsep ) | // ?
 ( max-elements-stmt stmtsep ) | // ?
 ( ordered-by-stmt stmtsep ) | // ?
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) | // ?
 ( ( typedef-stmt |
 grouping-stmt ) stmtsep ) | // *
 ( data-def-stmt stmtsep ) // +

 list-stmt ::= LIST_KEYWORD sep identifier-arg-quoted optsep
 ( LEFT_BRACE stmtsep
 list-stmt-body +
 RIGHT_BRACE )

key-stmt ::= KEY_KEYWORD sep key-arg-str stmtend

key-arg-str ::= key-arg | ( DOUBLE_QUOTE key-arg DOUBLE_QUOTE ) /* a string that matches the rule
 key-arg > */
key-arg ::= node-identifier ( sep node-identifier ) *

unique-stmt ::= UNIQUE_KEYWORD sep unique-arg-str stmtend

unique-arg-str ::= unique-arg | ( DOUBLE_QUOTE unique-arg DOUBLE_QUOTE ) /* a string that matches the rule
 unique-arg > */
unique-arg ::= descendant-schema-nodeid
 ( sep descendant-schema-nodeid ) *

choice-stmt-body ::= ( when-stmt stmtsep ) | // ?
 ( if-feature-stmt stmtsep ) | // *
 ( default-stmt stmtsep ) | // ?
 ( config-stmt stmtsep ) | // ?
 ( mandatory-stmt stmtsep ) | // ?
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) | // ?
 ( ( short-case-stmt | case-stmt ) stmtsep ) // *

 choice-stmt ::= CHOICE_KEYWORD sep identifier-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 choice-stmt-body *
 RIGHT_BRACE ) )

short-case-stmt ::= container-stmt |
 leaf-stmt |
 leaf-list-stmt |
 list-stmt |
 anyxml-stmt

case-stmt-body ::= ( when-stmt stmtsep ) | // ?
 ( if-feature-stmt stmtsep ) | // *
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) | // ?
 ( data-def-stmt stmtsep ) // *

 case-stmt ::= CASE_KEYWORD sep identifier-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 case-stmt-body +
 RIGHT_BRACE ) )

anyxml-stmt-body ::= ( when-stmt stmtsep ) | // ?
 ( if-feature-stmt stmtsep ) | // *
 ( must-stmt stmtsep ) | // *
 ( config-stmt stmtsep ) | // ?
 ( mandatory-stmt stmtsep ) | // ?
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 anyxml-stmt ::= ANYXML_KEYWORD sep identifier-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 anyxml-stmt-body *
 RIGHT_BRACE
 )
 )

uses-stmt-body ::= ( when-stmt stmtsep ) | // ?
 ( if-feature-stmt stmtsep ) | // *
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) | // ?
 ( refine-stmt stmtsep ) | // *
 ( uses-augment-stmt stmtsep ) // *

 uses-stmt ::= USES_KEYWORD sep identifier-ref-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 uses-stmt-body *
 RIGHT_BRACE ) )
 {
    implements="tech.pantheon.yanginator.plugin.reference.YangGeneratedReferenceType"
    extends="tech.pantheon.yanginator.plugin.reference.YangGeneratedReferenceTypeImpl"
 }

refine-stmt ::= REFINE_KEYWORD sep refine-arg-str optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 ( refine-container-stmts |
 refine-leaf-stmts |
 refine-leaf-list-stmts |
 refine-list-stmts |
 refine-choice-stmts |
 refine-case-stmts |
 refine-anyxml-stmts )
 RIGHT_BRACE ) )

refine-arg-str ::= refine-arg | ( DOUBLE_QUOTE refine-arg DOUBLE_QUOTE ) /* a string that matches the rule
 refine-arg > */
refine-arg ::= descendant-schema-nodeid

refine-container-stmts-body ::= ( must-stmt stmtsep ) | // *
 ( presence-stmt stmtsep ) | // ?
 ( config-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 refine-container-stmts ::=
 refine-container-stmts-body *

refine-leaf-stmts-body ::= ( must-stmt stmtsep ) | // *
 ( default-stmt stmtsep ) | // ?
 ( config-stmt stmtsep ) | // ?
 ( mandatory-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

refine-leaf-stmts ::= refine-leaf-stmts-body *

refine-leaf-list-stmts-body ::= ( must-stmt stmtsep ) | // *
 ( config-stmt stmtsep ) | // ?
 ( min-elements-stmt stmtsep ) | // ?
 ( max-elements-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 refine-leaf-list-stmts ::=
 refine-leaf-list-stmts-body *

refine-list-stmts-body ::= ( must-stmt stmtsep ) | // *
 ( config-stmt stmtsep ) | // ?
 ( min-elements-stmt stmtsep ) | // ?
 ( max-elements-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 refine-list-stmts ::= refine-list-stmts-body *

refine-choice-stmts-body ::= ( default-stmt stmtsep ) | // ?
 ( config-stmt stmtsep ) | // ?
 ( mandatory-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 refine-choice-stmts ::= refine-choice-stmts-body *

refine-case-stmts-body ::= ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 refine-case-stmts ::= refine-case-stmts-body *

refine-anyxml-stmts-body ::= ( must-stmt stmtsep ) | // *
 ( config-stmt stmtsep ) | // ?
 ( mandatory-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 refine-anyxml-stmts ::= refine-anyxml-stmts-body *

uses-augment-stmt-body ::= ( when-stmt stmtsep ) | // ?
 ( if-feature-stmt stmtsep ) | // *
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) | // ?
 ( ( data-def-stmt stmtsep ) |
 ( case-stmt stmtsep ) ) // +

 uses-augment-stmt ::= AUGMENT_KEYWORD sep uses-augment-arg-str optsep
 ( LEFT_BRACE stmtsep
 uses-augment-stmt-body +
 RIGHT_BRACE )

uses-augment-arg-str ::= uses-augment-arg | ( DOUBLE_QUOTE uses-augment-arg DOUBLE_QUOTE ) /* a string that matches the rule
 uses-augment-arg > */
uses-augment-arg ::= descendant-schema-nodeid

augment-stmt-body ::= ( when-stmt stmtsep ) | // ?
 ( if-feature-stmt stmtsep ) | // *
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) | // ?
 ( ( data-def-stmt stmtsep ) |
 ( case-stmt stmtsep ) ) // +

 augment-stmt ::= AUGMENT_KEYWORD sep augment-arg-str optsep
 ( LEFT_BRACE stmtsep
 augment-stmt-body +
 RIGHT_BRACE )

augment-arg-str ::= augment-arg | ( DOUBLE_QUOTE augment-arg-quoted DOUBLE_QUOTE ) /* a string that matches the rule
 augment-arg > */
augment-arg ::= absolute-schema-nodeid
augment-arg-quoted ::= absolute-schema-nodeid-quoted

unknown-statement ::= prefix COLON identifier ( sep string ) ? optsep
 ( SEMICOLON | ( LEFT_BRACE unknown-statement2 * RIGHT_BRACE ) )

unknown-statement2 ::= ( prefix COLON ) ? identifier ( sep string ) ? optsep
 ( SEMICOLON | ( LEFT_BRACE unknown-statement2 * RIGHT_BRACE ) )

when-stmt-body ::= ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) // ?

 when-stmt ::= WHEN_KEYWORD sep string optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 when-stmt-body *
 RIGHT_BRACE ) )

rpc-stmt-body ::= ( if-feature-stmt stmtsep ) | // *
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) | // ?
 ( ( typedef-stmt |
 grouping-stmt ) stmtsep ) | // *
 ( input-stmt stmtsep ) | // ?
 ( output-stmt stmtsep ) // ?

 rpc-stmt ::= RPC_KEYWORD sep identifier-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 rpc-stmt-body *
 RIGHT_BRACE ) )

input-stmt-body ::= ( ( typedef-stmt |
 grouping-stmt ) stmtsep ) | // *
 ( data-def-stmt stmtsep ) // +

 input-stmt ::= INPUT_KEYWORD optsep
 ( LEFT_BRACE stmtsep
 input-stmt-body +
 RIGHT_BRACE )

output-stmt-body ::= ( ( typedef-stmt |
 grouping-stmt ) stmtsep ) | // *
 ( data-def-stmt stmtsep ) // +

 output-stmt ::= OUTPUT_KEYWORD optsep
 ( LEFT_BRACE stmtsep
 output-stmt-body +
 RIGHT_BRACE )

notification-stmt-body ::= ( if-feature-stmt stmtsep ) | // *
 ( status-stmt stmtsep ) | // ?
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) | // ?
 ( ( typedef-stmt |
 grouping-stmt ) stmtsep ) | // *
 ( data-def-stmt stmtsep ) // *

 notification-stmt ::= NOTIFICATION_KEYWORD sep
 identifier-arg-quoted optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 notification-stmt-body *
 RIGHT_BRACE ) )

// Changed to allow check for multiplicity
deviation-stmt-body-args ::= deviate-not-supported-stmt |
 (
    deviate-add-stmt |
    deviate-replace-stmt |
    deviate-delete-stmt
 ) +

deviation-stmt-body ::=
 ( description-stmt stmtsep ) | // ?
 ( reference-stmt stmtsep ) | // ?
 ( deviation-stmt-body-args stmtsep ) // stmsep is not in rfc but should be there ;)

 deviation-stmt ::= DEVIATION_KEYWORD sep
 deviation-arg-str optsep
 (
 LEFT_BRACE stmtsep
 deviation-stmt-body +
 RIGHT_BRACE
 )

deviation-arg-str ::= deviation-arg | ( DOUBLE_QUOTE deviation-arg DOUBLE_QUOTE ) /* a string that matches the rule
 deviation-arg > */
deviation-arg ::= absolute-schema-nodeid

deviate-not-supported-stmt ::=
 DEVIATE_KEYWORD sep
 NOT_SUPPORTED_KEYWORD optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 RIGHT_BRACE ) )

deviate-add-stmt ::= DEVIATE_KEYWORD sep ADD_KEYWORD optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 ( units-stmt stmtsep ) ?
 ( must-stmt stmtsep ) *
 ( unique-stmt stmtsep ) *
 ( default-stmt stmtsep ) ?
 ( config-stmt stmtsep ) ?
 ( mandatory-stmt stmtsep ) ?
 ( min-elements-stmt stmtsep ) ?
 ( max-elements-stmt stmtsep ) ?
 RIGHT_BRACE ) )

deviate-delete-stmt ::= DEVIATE_KEYWORD sep DELETE_KEYWORD optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 ( units-stmt stmtsep ) ?
 ( must-stmt stmtsep ) *
 ( unique-stmt stmtsep ) *
 ( default-stmt stmtsep ) ?
 RIGHT_BRACE ) )

deviate-replace-stmt ::= DEVIATE_KEYWORD sep REPLACE_KEYWORD optsep
 ( SEMICOLON |
 ( LEFT_BRACE stmtsep
 ( type-stmt stmtsep ) ?
 ( units-stmt stmtsep ) ?
 ( default-stmt stmtsep ) ?
 ( config-stmt stmtsep ) ?
 ( mandatory-stmt stmtsep ) ?
 ( min-elements-stmt stmtsep ) ?
 ( max-elements-stmt stmtsep ) ?
 RIGHT_BRACE ) )
 // ;; Ranges

range-arg-str ::= range-arg | ( DOUBLE_QUOTE range-arg DOUBLE_QUOTE ) /* a string that matches the rule
 range-arg > */
range-arg ::= range-part ( optsep PIPE optsep range-part ) *

range-part ::= range-boundary
 ( optsep DOUBLE_DOT optsep range-boundary ) ?

range-boundary ::= MIN_KEYWORD | MAX_KEYWORD |
 integer-value | decimal-value
 // ;; Lengths

length-arg-str ::= length-arg | ( DOUBLE_QUOTE length-arg DOUBLE_QUOTE ) /* a string that matches the rule
 length-arg > */
length-arg ::= length-part ( optsep PIPE optsep length-part ) *

length-part ::= length-boundary
 ( optsep DOUBLE_DOT optsep length-boundary ) ?

length-boundary ::= MIN_KEYWORD | MAX_KEYWORD |
 non-negative-integer-value
 // ;; Date

date-arg-str ::= date-arg | ( DOUBLE_QUOTE date-arg-quoted DOUBLE_QUOTE ) /* a string that matches the rule
 date-arg > */
date-arg ::= STRING_SPLITTER? DIGIT STRING_SPLITTER? DIGIT STRING_SPLITTER? DIGIT STRING_SPLITTER? DIGIT
    STRING_SPLITTER? DASH STRING_SPLITTER? DIGIT STRING_SPLITTER? DIGIT STRING_SPLITTER? DASH STRING_SPLITTER?
     DIGIT STRING_SPLITTER? DIGIT

date-arg-quoted ::= DIGIT DIGIT DIGIT DIGIT DASH DIGIT DIGIT DASH DIGIT DIGIT
 // ;; Schema Node Identifiers

schema-nodeid ::= absolute-schema-nodeid |
 descendant-schema-nodeid

absolute-schema-nodeid ::= (FORWARD_SLASH node-identifier )+
absolute-schema-nodeid-quoted ::= ( STRING_SPLITTER? FORWARD_SLASH STRING_SPLITTER?  node-identifier-quoted STRING_SPLITTER?) +


descendant-schema-nodeid ::=
 node-identifier
 absolute-schema-nodeid

node-identifier ::= ( prefix COLON )? identifier
node-identifier-quoted ::= (STRING_SPLITTER? prefix-quoted STRING_SPLITTER? COLON ) ? STRING_SPLITTER? identifier-quoted
 // ;; Instance Identifiers

instance-identifier ::= ( FORWARD_SLASH ( node-identifier predicate * ) ) +

predicate ::= OPEN_BRACKET WSP * ( predicate-expr | pos ) * WSP "] ?"

predicate-expr ::= ( node-identifier | DOT ) WSP * EQUAL WSP *
 ( ( DOUBLE_QUOTE non-quoted-string DOUBLE_QUOTE ) |
 ( SINGLE_QUOTE non-quoted-string SINGLE_QUOTE ) )

pos ::= non-negative-integer-value
 // ;; leafref path

path-arg-str ::= path-arg | ( DOUBLE_QUOTE path-arg DOUBLE_QUOTE ) /* a string that matches the rule
 path-arg > */
path-arg ::= absolute-path | relative-path

absolute-path ::= ( FORWARD_SLASH ( node-identifier path-predicate * ) ) +

// easiest/fastest way was adding string splitters even into non string paths instead of defining all string types separatly
relative-path ::= ((( DOT STRING_SPLITTER? DOT) | DOUBLE_DOT) FORWARD_SLASH STRING_SPLITTER? ) + descendant-path

descendant-path ::= node-identifier
 ( path-predicate * absolute-path ) ?

path-predicate ::= OPEN_BRACKET STRING_SPLITTER? (WSP STRING_SPLITTER?)* path-equality-expr (WSP STRING_SPLITTER?)* STRING_SPLITTER? CLOSED_BRACKET STRING_SPLITTER?

path-equality-expr ::= node-identifier (WSP STRING_SPLITTER?)* STRING_SPLITTER? EQUAL STRING_SPLITTER? (WSP STRING_SPLITTER?)* path-key-expr

path-key-expr ::= STRING_SPLITTER? current-function-invocation STRING_SPLITTER? (WSP STRING_SPLITTER?)* FORWARD_SLASH STRING_SPLITTER? (WSP STRING_SPLITTER?)*
 rel-path-keyexpr

rel-path-keyexpr ::= ( DOUBLE_DOT WSP * FORWARD_SLASH WSP * ) +
 ( node-identifier WSP * FORWARD_SLASH WSP * ) *
 node-identifier








//***********************************
//no longer generated by parser
//***********************************

//////////////////////////////
// ;;
// ;; RFC 3986
// ;;
//////////////////////////////

uri-str ::= URI | (DOUBLE_QUOTE URI DOUBLE_QUOTE) // /* a string that matches the rule URI > */

URI ::= scheme COLON hier-part ( "?" query ) ? ( "#" fragment ) ?

hier-part ::= "//" authority path-abempty
 | path-absolute
 | path-rootless
 | path-empty

scheme ::= ALPHA ( ALPHA | DIGIT | "+" | DASH | DOT | identifier-literal) *

authority ::= ( userinfo "@" ) ? host ( COLON port ) ?

userinfo ::= ( unreserved | pct-encoded | sub-delims | COLON ) *

host ::= IP-literal | IPv4address | reg-name

port ::= DIGIT *

IP-literal ::= OPEN_BRACKET ( IPv6address | IPvFuture ) CLOSED_BRACKET

IPvFuture ::= "v" HEXDIG + DOT ( unreserved | sub-delims | COLON ) +

IPv4address ::= dec-octet DOT dec-octet DOT dec-octet DOT dec-octet

dec-octet ::= DIGIT | (POSITIVE_NUMBER? POSITIVE_NUMBER? POSITIVE_NUMBER? )
//; 0-9
// | %x31-39 DIGIT ; 10-99
// | "1" DIGIT DIGIT ; 100-199
// | "2" %x30-34 DIGIT ; 200-249
// | "25" %x30-35 ; 250-255

reg-name ::= ( unreserved | pct-encoded | sub-delims | identifier-literal) *

path-abempty ::= ( FORWARD_SLASH segment ) *

path-absolute ::= FORWARD_SLASH ( segment-nz ( FORWARD_SLASH segment ) * ) ?

path-rootless ::= segment-nz ( FORWARD_SLASH segment ) *

path-empty ::= pchar

segment ::= pchar *

segment-nz ::= pchar +

pchar ::= unreserved | pct-encoded | sub-delims | COLON | "@" | identifier-literal

fragment ::= query

query ::= ( pchar | FORWARD_SLASH | "?" ) *

pct-encoded ::= "%" HEXDIG HEXDIG

unreserved ::= ALPHA | DIGIT | DASH | DOT | UNDERSCORE | "~"

sub-delims ::= "!" | "$" | "&" | SINGLE_QUOTE | LEFT_PARENTHESIS | RIGHT_PARENTHESIS
    | "+" | "," | SEMICOLON | EQUAL

IPv6address   ::=
                                                                                                    ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ls32
|                                                                                              "::" ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ls32
| (                                                                                     h16 )? "::" ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ls32
| ( ( h16 ":" ) ?                                                                       h16 )? "::" ( h16 ":" ) ( h16 ":" ) ( h16 ":" ) ls32
| ( ( h16 ":" ) ? ( h16 ":" ) ?                                                         h16 )? "::" ( h16 ":" ) ( h16 ":" ) ls32
| ( ( h16 ":" ) ? ( h16 ":" ) ? ( h16 ":" ) ?                                           h16 )? "::" ( h16 ":" )  ls32
| ( ( h16 ":" ) ? ( h16 ":" ) ? ( h16 ":" ) ? ( h16 ":" ) ?                             h16 )? "::"              ls32
| ( ( h16 ":" ) ? ( h16 ":" ) ? ( h16 ":" ) ? ( h16 ":" ) ? ( h16 ":" ) ?               h16 )? "::"              h16
| ( ( h16 ":" ) ? ( h16 ":" ) ? ( h16 ":" ) ? ( h16 ":" ) ? ( h16 ":" ) ? ( h16 ":" ) ? h16 )? "::"

h16 ::= ( HEXDIG HEXDIG HEXDIG HEXDIG )+
ls32 ::= ( h16 ":" h16 ) | IPv4address


//////////////////////////////
// ;;
// ;; Basic rfc6020 rules
// ;;
//////////////////////////////

current-function-invocation ::= ( CURRENT_KEYWORD | splitted-current-keyword ) STRING_SPLITTER?  (WSP STRING_SPLITTER?)* LEFT_PARENTHESIS
STRING_SPLITTER? (WSP STRING_SPLITTER?)* RIGHT_PARENTHESIS//

splitted-current-keyword ::= "c" STRING_SPLITTER? "u" STRING_SPLITTER? "r" STRING_SPLITTER? "r" STRING_SPLITTER? "e"
    STRING_SPLITTER? "n" STRING_SPLITTER? "t"

prefix-arg-str ::= prefix-arg | ( DOUBLE_QUOTE prefix-arg-quoted DOUBLE_QUOTE )// < a string that matches the rule prefix-arg >

prefix-arg ::= prefix

prefix-arg-quoted ::= prefix-quoted

prefix ::= identifier

prefix-quoted ::= identifier-quoted

identifier-arg-quoted ::=  identifier-arg | ( DOUBLE_QUOTE identifier-arg DOUBLE_QUOTE ) //< a string that matches the rule identifier-arg > #

identifier-arg ::= identifier

// ;; An identifier MUST NOT start with (('X'|'x') ('M'|'m') ('L'|'l'))
identifier ::= identifier-quoted // (ALPHA | UNDERSCORE | identifier-literal) (ALPHA | DIGIT | UNDERSCORE | DASH | DOT | identifier-literal)*

identifier-quoted ::= STRING_SPLITTER? !(('X'|'x') ('M'|'m') ('L'|'l')) (ALPHA | UNDERSCORE | identifier-literal) STRING_SPLITTER? (ALPHA | DIGIT | UNDERSCORE | DASH | DOT | identifier-literal | STRING_SPLITTER)*

STRING_SPLITTER ::= DOUBLE_QUOTE sep? "+" sep? DOUBLE_QUOTE
SINGLE_QUOTE_STRING_SPLITTER ::= SINGLE_QUOTE sep? "+" sep? SINGLE_QUOTE

identifier-ref-arg-quoted ::= identifier-ref-arg | ( DOUBLE_QUOTE identifier-ref-arg DOUBLE_QUOTE ) //< a string that matches the rule identifier-ref-arg >

identifier-ref-arg  ::= (prefix COLON)? identifier

// rfc6020 defines that string could be quoted on unquoted but single quoted string is used sometimes also
string ::= (DOUBLE_QUOTE (identifier-literal | quoted-string-body-characters | SINGLE_QUOTE | STRING_SPLITTER) *  DOUBLE_QUOTE)
    | ( non-quoted-string) |
    ( SINGLE_QUOTE (identifier-literal | single-quoted-string-body-characters | SINGLE_QUOTE_STRING_SPLITTER)* SINGLE_QUOTE)

non-quoted-string ::= (identifier-literal | unquoted-string-body-characters)+

integer-value  ::= ("-" non-negative-integer-value) | non-negative-integer-value
integer-value-str  ::= DOUBLE_QUOTE (("-" non-negative-integer-value) | non-negative-integer-value) DOUBLE_QUOTE

non-negative-integer-value ::= ZERO | positive-integer-value

positive-integer-value ::= (non-zero-digit DIGIT*)

zero-integer-value ::= DIGIT+

stmtend  ::= SEMICOLON | (LEFT_BRACE unknown-statement* RIGHT_BRACE)


private sep ::=  (WSP | line-break)+ // unconditional separator

private optsep ::=  ( WSP | line-break )*

private stmtsep ::=  (WSP | line-break  | unknown-statement)*

private line-break ::= CRLF | LF

non-zero-digit ::= POSITIVE_NUMBER

decimal-value ::= integer-value DOT zero-integer-value


//*****************************
//;;
//;; RFC 5234 core rules.
//;;
//*****************************

private CR ::= comment? CARRIAGE_RETURN comment? // carriage return

private CRLF ::= CR LF  // Internet standard new line

DIGIT ::= POSITIVE_NUMBER | ZERO   // 0-9


HEXDIG ::= DIGIT | 'a' | 'b' | 'c' | 'd' | 'e' | 'f'    // only lower-case a..f

private HTAB ::= (SP SP SP SP) | TAB   // horizontal tab // {4}

private LF ::= ( LINEFEED | LINE_COMMENT ) //linefeed

private SP ::= BLOCK_COMMENT? SPACE BLOCK_COMMENT?

quoted-string-body-characters ::= new-line-characters | VCHAR | SP | HTAB | identifier-literal | SINGLE_LINE_COMMENT_START
    | STRINGS_DOUBLE_QUOTE | STRINGS_SINGLE_QUOTE
single-quoted-string-body-characters ::= new-line-characters | VCHAR | SP | HTAB | identifier-literal | SINGLE_LINE_COMMENT_START
    | STRINGS_DOUBLE_QUOTE | STRINGS_SINGLE_QUOTE

unquoted-string-body-characters ::= unquoted-vchar | identifier-literal | SINGLE_LINE_COMMENT_START


comment ::= LINE_COMMENT | BLOCK_COMMENT

LINE_COMMENT ::= SINGLE_LINE_COMMENT_START ( single-line-characters )* new-line-characters?

single-line-characters ::= VCHAR | SP | HTAB | identifier-literal | SINGLE_LINE_COMMENT_START
    | DOUBLE_QUOTE | SINGLE_QUOTE

VCHAR ::= OTHER_CHARACTER | SINGLE_LINE_COMMENT_START
 | DIGIT  | ALPHA | POSITIVE_NUMBER |  ASTERISK
 | SEMICOLON | COLON | LEFT_BRACE | RIGHT_BRACE | DOT | DOUBLE_DOT | DASH | UNDERSCORE
 | LEFT_PARENTHESIS | RIGHT_PARENTHESIS | EQUAL | OPEN_BRACKET | CLOSED_BRACKET | FORWARD_SLASH | BACK_SLASH | PIPE

unquoted-vchar ::= OTHER_CHARACTER | SINGLE_LINE_COMMENT_START
 | DIGIT  | ALPHA | POSITIVE_NUMBER |  ASTERISK
 | COLON | LEFT_BRACE | RIGHT_BRACE | DOT | DOUBLE_DOT | DASH | UNDERSCORE
 | LEFT_PARENTHESIS | RIGHT_PARENTHESIS | EQUAL | OPEN_BRACKET | CLOSED_BRACKET | FORWARD_SLASH | BACK_SLASH | PIPE

new-line-characters  ::= LINEFEED | CARRIAGE_RETURN

private WSP ::= BLOCK_COMMENT? (SP | HTAB) BLOCK_COMMENT? // whitespace

identifier-literal ::=
        ANYXML_KEYWORD          |
        ARGUMENT_KEYWORD        |
        AUGMENT_KEYWORD         |
        BASE_KEYWORD            |
        BELONGS_TO_KEYWORD      |
        BIT_KEYWORD             |
        CASE_KEYWORD            |
        CHOICE_KEYWORD          |
        CONFIG_KEYWORD          |
        CONTACT_KEYWORD         |
        CONTAINER_KEYWORD       |
        DEFAULT_KEYWORD         |
        DESCRIPTION_KEYWORD     |
        ENUM_KEYWORD            |
        ERROR_APP_TAG_KEYWORD   |
        ERROR_MESSAGE_KEYWORD   |
        EXTENSION_KEYWORD       |
        DEVIATION_KEYWORD       |
        DEVIATE_KEYWORD         |
        FEATURE_KEYWORD         |
        FRACTION_DIGITS_KEYWORD |
        GROUPING_KEYWORD        |
        IDENTITY_KEYWORD        |
        IF_FEATURE_KEYWORD      |
        IMPORT_KEYWORD          |
        INCLUDE_KEYWORD         |
        INPUT_KEYWORD           |
        KEY_KEYWORD             |
        LEAF_KEYWORD            |
        LEAF_LIST_KEYWORD       |
        LENGTH_KEYWORD          |
        LIST_KEYWORD            |
        MANDATORY_KEYWORD       |
        MAX_ELEMENTS_KEYWORD    |
        MIN_ELEMENTS_KEYWORD    |
        MODULE_KEYWORD          |
        MUST_KEYWORD            |
        NAMESPACE_KEYWORD       |
        NOTIFICATION_KEYWORD    |
        ORDERED_BY_KEYWORD      |

        ORGANIZATION_KEYWORD    |
        OUTPUT_KEYWORD          |
        PATH_KEYWORD            |
        PATTERN_KEYWORD         |
        POSITION_KEYWORD        |
        PREFIX_KEYWORD          |
        PRESENCE_KEYWORD        |
        RANGE_KEYWORD           |
        REFERENCE_KEYWORD       |
        REFINE_KEYWORD          |
        REQUIRE_INSTANCE_KEYWORD|
        REVISION_KEYWORD        |
        REVISION_DATE_KEYWORD   |
        RPC_KEYWORD             |
        STATUS_KEYWORD          |
        SUBMODULE_KEYWORD       |
        TYPE_KEYWORD            |
        TYPEDEF_KEYWORD         |
        UNIQUE_KEYWORD          |
        UNITS_KEYWORD           |
        USES_KEYWORD            |
        VALUE_KEYWORD           |
        WHEN_KEYWORD            |
        YANG_VERSION_KEYWORD    |
        YIN_ELEMENT_KEYWORD     |

        // other keywords

        CURRENT_KEYWORD         |
        DELETE_KEYWORD          |
        DEPRECATED_KEYWORD      |
        FALSE_KEYWORD           |
        ADD_KEYWORD             |
        MAX_KEYWORD             |
        MIN_KEYWORD             |
        NOT_SUPPORTED_KEYWORD   |
        OBSOLETE_KEYWORD        |
        REPLACE_KEYWORD         |
        SYSTEM_KEYWORD          |
        TRUE_KEYWORD            |
        UNBOUNDED_KEYWORD       |
        USER_KEYWORD

//*******************
// highlighter tokens
//*******************
// every one needs to be mentioned here so parser code needs to be generated only from this .bnf file and not from
// yanghighlighter.bnf

h_identifier-literal ::=
    H_ANYXML_KEYWORD          |
    H_ARGUMENT_KEYWORD        |
    H_AUGMENT_KEYWORD         |
    H_BASE_KEYWORD            |
    H_BELONGS_TO_KEYWORD      |
    H_BIT_KEYWORD             |
    H_CASE_KEYWORD            |
    H_CHOICE_KEYWORD          |
    H_CONFIG_KEYWORD          |
    H_CONTACT_KEYWORD         |
    H_CONTAINER_KEYWORD       |
    H_DEFAULT_KEYWORD         |
    H_DESCRIPTION_KEYWORD     |
    H_ENUM_KEYWORD            |
    H_ERROR_APP_TAG_KEYWORD   |
    H_ERROR_MESSAGE_KEYWORD   |
    H_EXTENSION_KEYWORD       |
    H_DEVIATION_KEYWORD       |
    H_DEVIATE_KEYWORD         |
    H_FEATURE_KEYWORD         |
    H_FRACTION_DIGITS_KEYWORD |
    H_GROUPING_KEYWORD        |
    H_IDENTITY_KEYWORD        |
    H_IF_FEATURE_KEYWORD      |
    H_IMPORT_KEYWORD          |
    H_INCLUDE_KEYWORD         |
    H_INPUT_KEYWORD           |
    H_KEY_KEYWORD             |
    H_LEAF_KEYWORD            |
    H_LEAF_LIST_KEYWORD       |
    H_LENGTH_KEYWORD          |
    H_LIST_KEYWORD            |
    H_MANDATORY_KEYWORD       |
    H_MAX_ELEMENTS_KEYWORD    |
    H_MIN_ELEMENTS_KEYWORD    |
    H_MODULE_KEYWORD          |
    H_MUST_KEYWORD            |
    H_NAMESPACE_KEYWORD       |
    H_NOTIFICATION_KEYWORD    |
    H_ORDERED_BY_KEYWORD      |

    H_ORGANIZATION_KEYWORD    |
    H_OUTPUT_KEYWORD          |
    H_PATH_KEYWORD            |
    H_PATTERN_KEYWORD         |
    H_POSITION_KEYWORD        |
    H_PREFIX_KEYWORD          |
    H_PRESENCE_KEYWORD        |
    H_RANGE_KEYWORD           |
    H_REFERENCE_KEYWORD       |
    H_REFINE_KEYWORD          |
    H_REQUIRE_INSTANCE_KEYWORD|
    H_REVISION_KEYWORD        |
    H_REVISION_DATE_KEYWORD   |
    H_RPC_KEYWORD             |
    H_STATUS_KEYWORD          |
    H_SUBMODULE_KEYWORD       |
    H_TYPE_KEYWORD            |
    H_TYPEDEF_KEYWORD         |
    H_UNIQUE_KEYWORD          |
    H_UNITS_KEYWORD           |
    H_USES_KEYWORD            |
    H_VALUE_KEYWORD           |
    H_WHEN_KEYWORD            |
    H_YANG_VERSION_KEYWORD    |
    H_YIN_ELEMENT_KEYWORD     |

    // other keywords

    H_CURRENT_KEYWORD         |
    H_DELETE_KEYWORD          |
    H_DEPRECATED_KEYWORD      |
    H_FALSE_KEYWORD           |
    H_ADD_KEYWORD             |
    H_MAX_KEYWORD             |
    H_MIN_KEYWORD             |
    H_NOT_SUPPORTED_KEYWORD   |
    H_OBSOLETE_KEYWORD        |
    H_REPLACE_KEYWORD         |
    H_SYSTEM_KEYWORD          |
    H_TRUE_KEYWORD            |
    H_UNBOUNDED_KEYWORD       |
    H_USER_KEYWORD            |
    H_SEMICOLON

// u just need to add tokens from highlighter there so u can generate parser code only from this file
highlighter-tokens ::= H_NOT_STRING | H_STRING | H_WHITE_SPACE | H_DATE_ARG | H_IDENTIFIER |  H_EXTENSION_IDENTIFIER |
    H_BLOCK_COMMENT | H_SINGLE_LINE_COMMENT | BLOCK_COMMENT_END | H_FS | H_A

private Statements ::= StatementWithSemi*
private StatementWithSemi ::= Statement (';'|&'}') { pin=1 recoverWhile=StatementRecover }
Statement ::=
    deviate-replace-stmt
  | deviate-delete-stmt
  | deviate-add-stmt
  | deviate-not-supported-stmt
  | deviation-stmt
  | notification-stmt
  | output-stmt
  | input-stmt
  | rpc-stmt
  | when-stmt
  | augment-stmt
  | uses-augment-stmt
  | refine-stmt
  | uses-stmt
  | anyxml-stmt
  | case-stmt
  | short-case-stmt
  | choice-stmt
  | unique-stmt
  | key-stmt
  | list-stmt
  | leaf-list-stmt
  | leaf-stmt
  | container-stmt
  | grouping-stmt
  | value-stmt
  | max-elements-stmt
  | min-elements-stmt
  | error-app-tag-stmt
  | error-message-stmt
  | must-stmt
  | ordered-by-stmt
  | presence-stmt
  | mandatory-stmt
  | config-stmt
  | status-stmt
  | position-stmt
  | bit-stmt
  | require-instance-stmt
  | path-stmt
  | enum-stmt
  | default-stmt
  | pattern-stmt
  | length-stmt
  | fraction-digits-stmt
  | range-stmt
  | type-stmt
  | typedef-stmt
  | if-feature-stmt
  | feature-stmt
  | base-stmt
  | identity-stmt
  | yin-element-stmt
  | argument-stmt
  | extension-stmt
  | revision-date-stmt
  | revision-stmt
  | units-stmt
  | reference-stmt
  | description-stmt
  | contact-stmt
  | organization-stmt
  | belongs-to-stmt
  | prefix-stmt
  | namespace-stmt
  | include-stmt
  | import-stmt
  | yang-version-stmt
  | unknown-statement
