plugins {
    id 'org.jetbrains.intellij' version "$intellijGradlePluginVersion"
    id 'org.jetbrains.changelog' version "$changelogVersion"
}

apply plugin: 'org.jetbrains.changelog'

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    version = ideaVersion
    plugins = ['com.intellij.java']
}

changelog {
    path = "${project.parent.projectDir}/CHANGELOG.md"
    header = "${-> version.get()}"
    headerParserRegex = ~/(\d+\.\d+)/
    itemPrefix = "*"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = []
}

tasks {
    patchPluginXml {
        sinceBuild = '211'
        untilBuild = ''
        changeNotes = changelog.getLatest().toHTML() + "<a href=\"https://github.com/PANTHEONtech/YANGinator/blob/master/CHANGELOG.md\">more...</a>"
    }
}

publishPlugin {
    token.set(System.getenv("PUBLISH_TOKEN"))
}

test {
    systemProperty "idea.home.path", "src/test"
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/gen', 'src/main/highlighter'
        }
    }
}

dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jupiterEngineVersion
}

final MAX_VERIFIER_NUMBER = 5
def counter = 0
ext.ideaVersions = new ArrayList<String>()

def makeCommand() {
    def commandBuilder = new StringBuilder()
    commandBuilder.append("rm -rf ../../.pluginVerifier\n")
    commandBuilder.append("gradle runPluginVerifier -PtestVersions=")
    for (int i in 0..ideaVersions.size()-1) {
        commandBuilder.append(ideaVersions.get(i))
        if (i != ideaVersions.size() - 1) {
            commandBuilder.append(",")
        }
    }
    commandBuilder.append("\n")
    return commandBuilder
}

task prepareCompatibilityCheck {
    File runFile = new File("${project.projectDir}/compatibility-check.sh")
    File versionFile = new File("${project.parent.projectDir}/COMPATIBLE.version")
    def commandBuilder = new StringBuilder()
    commandBuilder.append("#!/usr/bin/bash\n\n")
    def line
    versionFile.withReader { reader ->
        while ((line = reader.readLine()) != null) {
            if (!line.isEmpty() && !line.contains('#')) {
                ideaVersions.add(line)
                counter++
                if (counter % MAX_VERIFIER_NUMBER == 0) {
                    commandBuilder.append(makeCommand())
                    ideaVersions.clear()
                }
            }
        }
    }
    if (ideaVersions.size() >= 1) {
        commandBuilder.append(makeCommand())
    }
    commandBuilder.append("\nrm ./compatibility-check.sh")
    runFile.write(commandBuilder.toString())
}

// Runs the IntelliJ Plugin Verifier tool to check the binary compatibility with explicitly specified IntelliJ IDE builds in compatible.version file
runPluginVerifier {
    def testVersions = project.findProperty("testVersions")
    println "Test versions from argument: " + testVersions
    if (testVersions != null) {
        println "Parsed versions from argument: " + Arrays.asList(testVersions.split(","))
        ideVersions = Arrays.asList(testVersions.split(","))
    }
}
