/*
 *
 *   Copyright (c) 2021 PANTHEON.tech, s.r.o. All rights reserved.
 *
 *   This program and the accompanying materials are made available under the
 *   terms of the Eclipse Public License v1.0 which accompanies this distribution,
 *   and is available at http://www.eclipse.org/legal/epl-v10.html
 *
 */

/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package tech.pantheon.yanginator.plugin.highlighter;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ADD_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ANYXML_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ARGUMENT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_AUGMENT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_BASE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_BELONGS_TO_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_BIT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_BLOCK_COMMENT;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_CASE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_CHOICE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_CONFIG_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_CONTACT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_CONTAINER_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_CURRENT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DATE_ARG;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DEFAULT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DELETE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DEPRECATED_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DESCRIPTION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DEVIATE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_DEVIATION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ENUM_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ERROR_APP_TAG_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ERROR_MESSAGE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_EXTENSION_IDENTIFIER;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_EXTENSION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_FALSE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_FEATURE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_FRACTION_DIGITS_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_GROUPING_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_IDENTIFIER;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_IDENTITY_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_IF_FEATURE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_IMPORT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_INCLUDE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_INPUT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_INVALID_ESCAPE;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_KEY_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_LEAF_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_LEAF_LIST_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_LEFT_BRACE;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_LENGTH_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_LIST_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MANDATORY_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MAX_ELEMENTS_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MAX_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MIN_ELEMENTS_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MIN_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MODULE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_MUST_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_NAMESPACE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_NOTIFICATION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_NOT_SUPPORTED_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_OBSOLETE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_OPERATORS;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ORDERED_BY_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_ORGANIZATION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_OUTPUT_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_PATH_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_PATTERN_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_POSITION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_PREFIX_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_PRESENCE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_RANGE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_REFERENCE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_REFINE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_REPLACE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_REQUIRE_INSTANCE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_REVISION_DATE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_REVISION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_RIGHT_BRACE;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_RPC_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_SEMICOLON;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_SINGLE_LINE_COMMENT;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_STATUS_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_STRING;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_SUBMODULE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_SYSTEM_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_TRUE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_TYPEDEF_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_TYPE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_UNBOUNDED_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_UNIQUE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_UNITS_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_USER_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_USES_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_VALID_ESCAPE;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_VALUE_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_WHEN_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_YANG_VERSION_KEYWORD;
import static tech.pantheon.yanginator.plugin.highlighter.psi.YangTypes.YANG_H_YIN_ELEMENT_KEYWORD;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_YangLexer.flex</tt>
 */
public class _YangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\3\1\22\0\1\1\1\0\1\3\7\0\1\12\1\47\1\0\1\5\1\7\1\11\12\4\1\10"+
    "\1\46\5\0\21\6\1\14\10\6\1\0\1\13\2\0\1\6\1\0\1\15\1\30\1\34\1\37\1\26\1\36"+
    "\1\24\1\35\1\33\1\6\1\42\1\22\1\21\1\16\1\32\1\40\1\44\1\23\1\31\1\27\1\25"+
    "\1\41\1\45\1\20\1\17\1\43\1\50\1\0\1\51\7\0\1\1\32\0\1\1\337\0\1\1\177\0\13"+
    "\1\35\0\2\1\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\2\1\25\3\1\4"+
    "\1\5\1\6\1\7\1\0\1\10\1\0\1\11\1\12"+
    "\1\0\1\13\1\14\64\3\3\0\3\3\1\15\5\3"+
    "\1\16\2\3\1\17\10\3\1\20\13\3\1\21\34\3"+
    "\1\22\1\3\1\0\1\23\12\3\1\24\2\3\1\25"+
    "\1\3\1\26\12\3\1\27\1\30\1\31\2\3\1\32"+
    "\1\33\1\34\15\3\1\35\15\3\1\36\4\3\1\37"+
    "\1\0\16\3\1\40\7\3\1\41\15\3\1\42\7\3"+
    "\1\43\13\3\1\44\1\0\1\45\11\3\1\46\2\3"+
    "\1\47\1\3\1\50\5\3\1\51\4\3\1\52\1\3"+
    "\1\53\2\3\1\54\2\3\1\55\5\3\1\56\1\57"+
    "\2\3\1\60\6\3\1\61\1\3\2\0\1\3\1\62"+
    "\12\3\1\63\7\3\1\64\5\3\1\65\2\3\1\66"+
    "\1\3\1\67\1\3\1\70\1\3\1\71\1\3\1\72"+
    "\1\3\1\73\2\3\1\74\1\75\12\3\1\76\1\3"+
    "\1\77\10\3\1\100\1\3\1\101\5\3\1\102\1\103"+
    "\1\74\1\104\4\3\1\105\2\3\1\106\1\107\2\3"+
    "\1\110\1\111\3\3\1\112\3\3\1\113\3\3\1\114"+
    "\12\3\1\115\1\3\1\116\1\117\2\3\1\120\3\3"+
    "\1\121\10\3\1\122\1\3\1\123\1\124\1\125\1\126"+
    "\4\3\1\127\1\3\1\130\1\131\1\3\1\132\1\133"+
    "\4\3\1\134\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6"+
    "\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\52\0\52\0\52"+
    "\0\52\0\176\0\52\0\u04c2\0\u04ec\0\u0516\0\u0540\0\52"+
    "\0\52\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666"+
    "\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6"+
    "\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906"+
    "\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56"+
    "\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6"+
    "\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6"+
    "\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46"+
    "\0\u0e70\0\u0e9a\0\u0ec4\0\322\0\u0eee\0\u0f18\0\u0f42\0\u0f6c"+
    "\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc"+
    "\0\u10e6\0\u1110\0\u113a\0\u1164\0\u118e\0\322\0\u11b8\0\u11e2"+
    "\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332"+
    "\0\u135c\0\322\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458"+
    "\0\u1482\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554\0\u157e\0\u15a8"+
    "\0\u15d2\0\u15fc\0\u1626\0\u1650\0\u167a\0\u16a4\0\u16ce\0\u16f8"+
    "\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca\0\u17f4\0\322\0\u181e"+
    "\0\u1848\0\52\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944"+
    "\0\u196e\0\u1998\0\u19c2\0\u19ec\0\322\0\u1a16\0\u1a40\0\u1a6a"+
    "\0\u1a94\0\322\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66\0\u1b90"+
    "\0\u1bba\0\u1be4\0\u1c0e\0\u1c38\0\322\0\322\0\322\0\u1c62"+
    "\0\u1c8c\0\u1cb6\0\322\0\322\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e"+
    "\0\u1d88\0\u1db2\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a\0\u1e84\0\u1eae"+
    "\0\u1ed8\0\322\0\u1f02\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4"+
    "\0\u1ffe\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0\0\u20fa\0\322"+
    "\0\u2124\0\u214e\0\u2178\0\u21a2\0\322\0\u21cc\0\u21f6\0\u2220"+
    "\0\u224a\0\u2274\0\u229e\0\u22c8\0\u22f2\0\u231c\0\u2346\0\u2370"+
    "\0\u239a\0\u23c4\0\u23ee\0\u2418\0\322\0\u2442\0\u246c\0\u2496"+
    "\0\u24c0\0\u24ea\0\u2514\0\u253e\0\322\0\u2568\0\u2592\0\u25bc"+
    "\0\u25e6\0\u2610\0\u263a\0\u2664\0\u268e\0\u26b8\0\u26e2\0\u270c"+
    "\0\u2736\0\u2760\0\322\0\u278a\0\u27b4\0\u27de\0\u2808\0\u2832"+
    "\0\u285c\0\u2886\0\322\0\u28b0\0\u28da\0\u2904\0\u292e\0\u2958"+
    "\0\u2982\0\u29ac\0\u29d6\0\u2a00\0\u2a2a\0\u2a54\0\322\0\u2a7e"+
    "\0\322\0\u2aa8\0\u2ad2\0\u2afc\0\u2b26\0\u2b50\0\u2b7a\0\u2ba4"+
    "\0\u2bce\0\u2bf8\0\322\0\u2c22\0\u2c4c\0\322\0\u2c76\0\322"+
    "\0\u2ca0\0\u2cca\0\u2cf4\0\u2d1e\0\u2d48\0\322\0\u2d72\0\u2d9c"+
    "\0\u2dc6\0\u2df0\0\322\0\u2e1a\0\322\0\u2e44\0\u2e6e\0\322"+
    "\0\u2e98\0\u2ec2\0\322\0\u2eec\0\u2f16\0\u2f40\0\u2f6a\0\u2f94"+
    "\0\322\0\322\0\u2fbe\0\u2fe8\0\322\0\u3012\0\u303c\0\u3066"+
    "\0\u3090\0\u30ba\0\u30e4\0\322\0\u310e\0\u3138\0\u3162\0\u318c"+
    "\0\322\0\u31b6\0\u31e0\0\u320a\0\u3234\0\u325e\0\u3288\0\u32b2"+
    "\0\u32dc\0\u3306\0\u3330\0\322\0\u335a\0\u3384\0\u33ae\0\u33d8"+
    "\0\u3402\0\u342c\0\u3456\0\322\0\u3480\0\u34aa\0\u34d4\0\u34fe"+
    "\0\u3528\0\322\0\u3552\0\u357c\0\322\0\u35a6\0\322\0\u35d0"+
    "\0\322\0\u35fa\0\322\0\u3624\0\322\0\u364e\0\322\0\u3678"+
    "\0\u36a2\0\u36cc\0\322\0\u36f6\0\u3720\0\u374a\0\u3774\0\u379e"+
    "\0\u37c8\0\u37f2\0\u381c\0\u3846\0\u3870\0\u389a\0\u38c4\0\322"+
    "\0\u38ee\0\u3918\0\u3942\0\u396c\0\u3996\0\u39c0\0\u39ea\0\u3a14"+
    "\0\322\0\u3a3e\0\322\0\u3a68\0\u3a92\0\u3abc\0\u3ae6\0\u3b10"+
    "\0\322\0\322\0\52\0\322\0\u3b3a\0\u3b64\0\u3b8e\0\u3bb8"+
    "\0\322\0\u3be2\0\u3c0c\0\322\0\322\0\u3c36\0\u3c60\0\322"+
    "\0\322\0\u3c8a\0\u3cb4\0\u3cde\0\322\0\u3d08\0\u3d32\0\u3d5c"+
    "\0\322\0\u3d86\0\u3db0\0\u3dda\0\322\0\u3e04\0\u3e2e\0\u3e58"+
    "\0\u3e82\0\u3eac\0\u3ed6\0\u3f00\0\u3f2a\0\u3f54\0\u3f7e\0\322"+
    "\0\u3fa8\0\322\0\322\0\u3fd2\0\u3ffc\0\322\0\u4026\0\u4050"+
    "\0\u407a\0\322\0\u40a4\0\u40ce\0\u40f8\0\u4122\0\u414c\0\u4176"+
    "\0\u41a0\0\u41ca\0\322\0\u41f4\0\322\0\322\0\322\0\322"+
    "\0\u421e\0\u4248\0\u4272\0\u429c\0\322\0\u42c6\0\322\0\322"+
    "\0\u42f0\0\322\0\322\0\u431a\0\u4344\0\u436e\0\u4398\0\322"+
    "\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\2\2\1\7"+
    "\1\2\1\10\1\6\1\11\1\12\1\13\1\6\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\6\1\30\1\31\1\32\1\33"+
    "\1\34\2\6\1\35\1\36\1\37\1\40\1\41\53\0"+
    "\2\3\47\0\3\42\1\43\46\42\4\0\1\44\51\0"+
    "\4\6\1\45\3\0\32\6\15\0\1\46\1\47\37\0"+
    "\14\50\1\51\1\50\1\51\4\50\1\51\3\50\1\51"+
    "\1\50\1\51\20\50\4\0\4\6\1\45\3\0\2\6"+
    "\1\52\4\6\1\53\1\6\1\54\11\6\1\55\6\6"+
    "\10\0\4\6\1\45\3\0\1\6\1\56\14\6\1\57"+
    "\13\6\10\0\4\6\1\45\3\0\1\6\1\60\15\6"+
    "\1\61\12\6\10\0\4\6\1\45\3\0\1\6\1\62"+
    "\7\6\1\63\4\6\1\64\1\65\12\6\10\0\4\6"+
    "\1\45\3\0\12\6\1\66\4\6\1\67\12\6\10\0"+
    "\4\6\1\45\3\0\1\6\1\70\10\6\1\71\11\6"+
    "\1\72\5\6\10\0\4\6\1\45\3\0\7\6\1\73"+
    "\22\6\10\0\4\6\1\45\3\0\2\6\1\74\12\6"+
    "\1\75\14\6\10\0\4\6\1\45\3\0\2\6\1\76"+
    "\1\6\1\77\2\6\1\100\22\6\10\0\4\6\1\45"+
    "\3\0\3\6\1\101\3\6\1\102\22\6\10\0\4\6"+
    "\1\45\3\0\1\6\1\103\10\6\1\104\4\6\1\105"+
    "\12\6\10\0\4\6\1\45\3\0\3\6\1\106\5\6"+
    "\1\107\1\6\1\110\16\6\10\0\4\6\1\45\3\0"+
    "\7\6\1\111\1\6\1\112\2\6\1\113\15\6\10\0"+
    "\4\6\1\45\3\0\2\6\1\114\2\6\1\115\14\6"+
    "\1\116\1\117\6\6\10\0\4\6\1\45\3\0\1\6"+
    "\1\120\7\6\1\121\4\6\1\122\2\6\1\123\10\6"+
    "\10\0\4\6\1\45\3\0\1\6\1\124\5\6\1\125"+
    "\2\6\1\126\17\6\10\0\4\6\1\45\3\0\12\6"+
    "\1\127\17\6\10\0\4\6\1\45\3\0\1\6\1\130"+
    "\5\6\1\131\6\6\1\132\13\6\10\0\4\6\1\45"+
    "\3\0\1\6\1\133\30\6\10\0\4\6\1\45\3\0"+
    "\12\6\1\134\17\6\10\0\4\6\1\45\3\0\21\6"+
    "\1\135\10\6\10\0\1\136\51\0\5\45\3\0\32\45"+
    "\4\0\2\46\1\0\47\46\11\47\1\137\1\140\37\47"+
    "\4\0\4\6\1\45\3\0\3\6\1\141\26\6\10\0"+
    "\4\6\1\45\3\0\10\6\1\142\21\6\10\0\4\6"+
    "\1\45\3\0\10\6\1\143\21\6\10\0\4\6\1\45"+
    "\3\0\23\6\1\144\6\6\10\0\4\6\1\45\3\0"+
    "\5\6\1\145\24\6\10\0\4\6\1\45\3\0\13\6"+
    "\1\146\16\6\10\0\4\6\1\45\3\0\2\6\1\147"+
    "\27\6\10\0\4\6\1\45\3\0\2\6\1\150\27\6"+
    "\10\0\4\6\1\45\3\0\2\6\1\151\1\6\1\152"+
    "\25\6\10\0\4\6\1\45\3\0\15\6\1\153\14\6"+
    "\10\0\4\6\1\45\3\0\23\6\1\154\6\6\10\0"+
    "\4\6\1\45\3\0\2\6\1\155\27\6\10\0\4\6"+
    "\1\45\3\0\1\6\1\156\1\157\27\6\10\0\4\6"+
    "\1\45\3\0\15\6\1\160\14\6\10\0\4\6\1\45"+
    "\3\0\2\6\1\161\27\6\10\0\4\6\1\45\3\0"+
    "\22\6\1\162\1\6\1\163\1\164\2\6\1\165\1\6"+
    "\10\0\4\6\1\45\3\0\20\6\1\166\11\6\10\0"+
    "\4\6\1\45\3\0\16\6\1\167\13\6\10\0\4\6"+
    "\1\45\3\0\14\6\1\170\2\6\1\171\12\6\10\0"+
    "\4\6\1\45\3\0\12\6\1\172\17\6\10\0\4\6"+
    "\1\45\3\0\11\6\1\173\20\6\10\0\4\6\1\45"+
    "\3\0\13\6\1\174\16\6\10\0\4\6\1\45\3\0"+
    "\7\6\1\175\22\6\10\0\4\6\1\45\3\0\24\6"+
    "\1\176\5\6\10\0\4\6\1\45\3\0\11\6\1\177"+
    "\20\6\10\0\4\6\1\45\3\0\15\6\1\200\14\6"+
    "\10\0\4\6\1\45\3\0\6\6\1\201\23\6\10\0"+
    "\4\6\1\45\3\0\13\6\1\202\16\6\10\0\4\6"+
    "\1\45\3\0\15\6\1\203\14\6\10\0\4\6\1\45"+
    "\3\0\14\6\1\204\15\6\10\0\4\6\1\45\3\0"+
    "\1\6\1\205\30\6\10\0\4\6\1\45\3\0\10\6"+
    "\1\206\12\6\1\207\6\6\10\0\4\6\1\45\3\0"+
    "\13\6\1\210\16\6\10\0\4\6\1\45\3\0\15\6"+
    "\1\211\14\6\10\0\4\6\1\45\3\0\20\6\1\212"+
    "\3\6\1\213\5\6\10\0\4\6\1\45\3\0\24\6"+
    "\1\214\5\6\10\0\1\6\1\215\2\6\1\45\3\0"+
    "\32\6\10\0\4\6\1\45\3\0\12\6\1\216\17\6"+
    "\10\0\4\6\1\45\3\0\15\6\1\217\14\6\10\0"+
    "\4\6\1\45\3\0\7\6\1\220\22\6\10\0\4\6"+
    "\1\45\3\0\2\6\1\221\27\6\10\0\4\6\1\45"+
    "\3\0\16\6\1\222\13\6\10\0\4\6\1\45\3\0"+
    "\6\6\1\223\23\6\10\0\4\6\1\45\3\0\1\6"+
    "\1\224\30\6\10\0\4\6\1\45\3\0\1\6\1\225"+
    "\30\6\10\0\4\6\1\45\3\0\6\6\1\226\6\6"+
    "\1\227\4\6\1\230\1\6\1\231\1\232\4\6\10\0"+
    "\4\6\1\45\3\0\13\6\1\233\16\6\10\0\4\6"+
    "\1\45\3\0\12\6\1\234\17\6\10\0\4\6\1\45"+
    "\3\0\15\6\1\235\14\6\10\0\4\6\1\45\3\0"+
    "\6\6\1\236\23\6\10\0\4\6\1\45\3\0\3\6"+
    "\1\237\26\6\10\0\4\6\1\45\3\0\12\6\1\240"+
    "\17\6\10\0\1\241\56\0\1\47\51\0\1\242\44\0"+
    "\4\6\1\45\3\0\4\6\1\243\25\6\10\0\4\6"+
    "\1\45\3\0\11\6\1\244\20\6\10\0\4\6\1\45"+
    "\3\0\5\6\1\245\24\6\10\0\4\6\1\45\3\0"+
    "\12\6\1\246\17\6\10\0\1\6\1\247\2\6\1\45"+
    "\3\0\17\6\1\250\12\6\10\0\4\6\1\45\3\0"+
    "\10\6\1\251\21\6\10\0\1\6\1\252\2\6\1\45"+
    "\3\0\32\6\10\0\4\6\1\45\3\0\23\6\1\253"+
    "\6\6\10\0\1\6\1\254\2\6\1\45\3\0\32\6"+
    "\10\0\4\6\1\45\3\0\13\6\1\255\16\6\10\0"+
    "\4\6\1\45\3\0\11\6\1\256\20\6\10\0\1\6"+
    "\1\257\2\6\1\45\3\0\32\6\10\0\4\6\1\45"+
    "\3\0\22\6\1\260\7\6\10\0\4\6\1\45\3\0"+
    "\10\6\1\261\21\6\10\0\4\6\1\45\3\0\13\6"+
    "\1\262\16\6\10\0\4\6\1\45\3\0\10\6\1\263"+
    "\21\6\10\0\4\6\1\45\3\0\12\6\1\264\4\6"+
    "\1\265\12\6\10\0\4\6\1\45\3\0\6\6\1\266"+
    "\23\6\10\0\4\6\1\45\3\0\17\6\1\267\12\6"+
    "\10\0\4\6\1\45\3\0\11\6\1\270\20\6\10\0"+
    "\4\6\1\45\3\0\11\6\1\271\20\6\10\0\4\6"+
    "\1\45\3\0\16\6\1\272\13\6\10\0\4\6\1\45"+
    "\3\0\13\6\1\273\14\6\1\274\1\6\10\0\4\6"+
    "\1\45\3\0\7\6\1\275\5\6\1\276\14\6\10\0"+
    "\4\6\1\45\3\0\5\6\1\277\24\6\10\0\4\6"+
    "\1\45\3\0\12\6\1\300\17\6\10\0\4\6\1\45"+
    "\3\0\16\6\1\301\13\6\10\0\4\6\1\45\3\0"+
    "\12\6\1\302\17\6\10\0\4\6\1\45\3\0\12\6"+
    "\1\303\17\6\10\0\4\6\1\45\3\0\12\6\1\304"+
    "\17\6\10\0\4\6\1\45\3\0\16\6\1\305\13\6"+
    "\10\0\4\6\1\45\3\0\13\6\1\306\16\6\10\0"+
    "\4\6\1\45\3\0\5\6\1\307\24\6\10\0\4\6"+
    "\1\45\3\0\13\6\1\310\16\6\10\0\4\6\1\45"+
    "\3\0\1\6\1\311\30\6\10\0\4\6\1\45\3\0"+
    "\12\6\1\312\17\6\10\0\4\6\1\45\3\0\24\6"+
    "\1\313\5\6\10\0\4\6\1\45\3\0\16\6\1\314"+
    "\13\6\10\0\4\6\1\45\3\0\6\6\1\315\23\6"+
    "\10\0\4\6\1\45\3\0\11\6\1\316\20\6\10\0"+
    "\4\6\1\45\3\0\16\6\1\317\13\6\10\0\4\6"+
    "\1\45\3\0\22\6\1\320\7\6\10\0\4\6\1\45"+
    "\3\0\2\6\1\321\27\6\10\0\4\6\1\45\3\0"+
    "\12\6\1\322\17\6\10\0\4\6\1\45\3\0\7\6"+
    "\1\323\22\6\10\0\4\6\1\45\3\0\13\6\1\324"+
    "\6\6\1\325\7\6\10\0\4\6\1\45\3\0\17\6"+
    "\1\326\12\6\10\0\4\6\1\45\3\0\15\6\1\327"+
    "\14\6\10\0\4\6\1\45\3\0\20\6\1\330\11\6"+
    "\10\0\4\6\1\45\3\0\13\6\1\331\16\6\10\0"+
    "\4\6\1\45\3\0\12\6\1\332\17\6\10\0\4\6"+
    "\1\45\3\0\20\6\1\333\11\6\10\0\4\6\1\45"+
    "\3\0\1\6\1\334\30\6\10\0\4\6\1\45\3\0"+
    "\7\6\1\335\22\6\10\0\4\6\1\45\3\0\17\6"+
    "\1\336\12\6\10\0\4\6\1\45\3\0\13\6\1\337"+
    "\5\6\1\340\10\6\10\0\4\6\1\45\3\0\15\6"+
    "\1\341\4\6\1\342\7\6\10\0\4\6\1\45\3\0"+
    "\17\6\1\343\12\6\10\0\4\6\1\45\3\0\11\6"+
    "\1\344\20\6\10\0\4\6\1\45\3\0\2\6\1\345"+
    "\27\6\11\0\1\346\50\0\4\6\1\45\3\0\5\6"+
    "\1\347\24\6\10\0\4\6\1\45\3\0\5\6\1\350"+
    "\24\6\10\0\4\6\1\45\3\0\12\6\1\351\17\6"+
    "\10\0\4\6\1\45\3\0\15\6\1\352\14\6\10\0"+
    "\4\6\1\45\3\0\15\6\1\353\14\6\10\0\4\6"+
    "\1\45\3\0\22\6\1\354\7\6\10\0\1\6\1\355"+
    "\2\6\1\45\3\0\32\6\10\0\4\6\1\45\3\0"+
    "\12\6\1\356\17\6\10\0\4\6\1\45\3\0\1\6"+
    "\1\357\30\6\10\0\4\6\1\45\3\0\12\6\1\360"+
    "\17\6\10\0\4\6\1\45\3\0\6\6\1\361\23\6"+
    "\10\0\4\6\1\45\3\0\12\6\1\362\17\6\10\0"+
    "\1\6\1\363\2\6\1\45\3\0\32\6\10\0\4\6"+
    "\1\45\3\0\13\6\1\364\16\6\10\0\4\6\1\45"+
    "\3\0\12\6\1\365\17\6\10\0\4\6\1\45\3\0"+
    "\7\6\1\366\22\6\10\0\4\6\1\45\3\0\2\6"+
    "\1\367\27\6\10\0\4\6\1\45\3\0\1\6\1\370"+
    "\30\6\10\0\4\6\1\45\3\0\15\6\1\371\14\6"+
    "\10\0\4\6\1\45\3\0\17\6\1\372\12\6\10\0"+
    "\4\6\1\45\3\0\24\6\1\373\5\6\10\0\4\6"+
    "\1\45\3\0\11\6\1\374\20\6\10\0\4\6\1\45"+
    "\3\0\15\6\1\375\14\6\10\0\4\6\1\45\3\0"+
    "\11\6\1\376\20\6\10\0\4\6\1\45\3\0\2\6"+
    "\1\377\27\6\10\0\4\6\1\45\3\0\7\6\1\u0100"+
    "\22\6\10\0\4\6\1\45\3\0\23\6\1\u0101\6\6"+
    "\10\0\4\6\1\45\3\0\2\6\1\u0102\27\6\10\0"+
    "\4\6\1\45\3\0\12\6\1\u0103\17\6\10\0\4\6"+
    "\1\45\3\0\16\6\1\u0104\13\6\10\0\4\6\1\45"+
    "\3\0\11\6\1\u0105\20\6\10\0\4\6\1\45\3\0"+
    "\2\6\1\u0106\27\6\10\0\4\6\1\45\3\0\7\6"+
    "\1\u0107\22\6\10\0\4\6\1\45\3\0\11\6\1\u0108"+
    "\20\6\10\0\4\6\1\45\3\0\6\6\1\u0109\23\6"+
    "\10\0\4\6\1\45\3\0\11\6\1\u010a\20\6\10\0"+
    "\4\6\1\45\3\0\13\6\1\u010b\16\6\10\0\4\6"+
    "\1\45\3\0\7\6\1\u010c\22\6\10\0\4\6\1\45"+
    "\3\0\12\6\1\u010d\17\6\10\0\4\6\1\45\3\0"+
    "\13\6\1\u010e\16\6\10\0\4\6\1\45\3\0\12\6"+
    "\1\u010f\17\6\10\0\4\6\1\45\3\0\1\6\1\u0110"+
    "\30\6\10\0\4\6\1\45\3\0\17\6\1\u0111\12\6"+
    "\10\0\4\6\1\45\3\0\20\6\1\u0112\11\6\10\0"+
    "\4\6\1\45\3\0\12\6\1\u0113\17\6\10\0\4\6"+
    "\1\45\3\0\13\6\1\u0114\16\6\10\0\4\6\1\45"+
    "\3\0\11\6\1\u0115\20\6\10\0\4\6\1\45\3\0"+
    "\13\6\1\u0116\16\6\10\0\4\6\1\45\3\0\7\6"+
    "\1\u0117\22\6\10\0\4\6\1\45\3\0\11\6\1\u0118"+
    "\20\6\10\0\4\6\1\45\3\0\12\6\1\u0119\17\6"+
    "\10\0\4\6\1\45\3\0\1\6\1\u011a\30\6\10\0"+
    "\4\6\1\45\3\0\12\6\1\u011b\17\6\10\0\4\6"+
    "\1\45\3\0\12\6\1\u011c\17\6\10\0\4\6\1\45"+
    "\3\0\17\6\1\u011d\12\6\10\0\4\6\1\45\3\0"+
    "\13\6\1\u011e\16\6\10\0\4\6\1\45\3\0\12\6"+
    "\1\u011f\17\6\10\0\1\u0120\51\0\4\6\1\45\3\0"+
    "\6\6\1\u0121\23\6\10\0\4\6\1\45\3\0\12\6"+
    "\1\u0122\17\6\10\0\4\6\1\45\3\0\2\6\1\u0123"+
    "\27\6\10\0\4\6\1\45\3\0\24\6\1\u0124\5\6"+
    "\10\0\4\6\1\45\3\0\11\6\1\u0125\20\6\10\0"+
    "\4\6\1\45\3\0\17\6\1\u0126\12\6\10\0\4\6"+
    "\1\45\3\0\25\6\1\u0127\4\6\10\0\4\6\1\45"+
    "\3\0\6\6\1\u0128\23\6\10\0\4\6\1\45\3\0"+
    "\13\6\1\u0129\16\6\10\0\4\6\1\45\3\0\6\6"+
    "\1\u012a\23\6\10\0\4\6\1\45\3\0\12\6\1\u012b"+
    "\17\6\10\0\4\6\1\45\3\0\6\6\1\u012c\23\6"+
    "\10\0\4\6\1\45\3\0\6\6\1\u012d\23\6\10\0"+
    "\4\6\1\45\3\0\21\6\1\u012e\10\6\10\0\4\6"+
    "\1\45\3\0\12\6\1\u012f\17\6\10\0\4\6\1\45"+
    "\3\0\12\6\1\u0130\17\6\10\0\4\6\1\45\3\0"+
    "\20\6\1\u0131\11\6\10\0\4\6\1\45\3\0\17\6"+
    "\1\u0132\12\6\10\0\4\6\1\45\3\0\7\6\1\u0133"+
    "\22\6\10\0\4\6\1\45\3\0\17\6\1\u0134\12\6"+
    "\10\0\4\6\1\45\3\0\2\6\1\u0135\27\6\10\0"+
    "\4\6\1\45\3\0\12\6\1\u0136\17\6\10\0\4\6"+
    "\1\45\3\0\15\6\1\u0137\14\6\10\0\1\6\1\u0138"+
    "\2\6\1\45\3\0\32\6\10\0\4\6\1\45\3\0"+
    "\12\6\1\u0139\17\6\10\0\4\6\1\45\3\0\10\6"+
    "\1\u013a\21\6\10\0\4\6\1\45\3\0\5\6\1\u013b"+
    "\24\6\10\0\4\6\1\45\3\0\23\6\1\u013c\6\6"+
    "\10\0\4\6\1\45\3\0\15\6\1\u013d\14\6\10\0"+
    "\4\6\1\45\3\0\17\6\1\u013e\12\6\10\0\4\6"+
    "\1\45\3\0\12\6\1\u013f\17\6\10\0\4\6\1\45"+
    "\3\0\13\6\1\u0140\16\6\10\0\4\6\1\45\3\0"+
    "\12\6\1\u0141\17\6\10\0\4\6\1\45\3\0\23\6"+
    "\1\u0142\6\6\10\0\4\6\1\45\3\0\13\6\1\u0143"+
    "\16\6\10\0\4\6\1\45\3\0\1\6\1\u0144\30\6"+
    "\10\0\4\6\1\45\3\0\17\6\1\u0145\12\6\10\0"+
    "\4\6\1\45\3\0\2\6\1\u0146\27\6\10\0\4\6"+
    "\1\45\3\0\17\6\1\u0147\1\u0148\11\6\10\0\4\6"+
    "\1\45\3\0\10\6\1\u0149\21\6\10\0\4\6\1\45"+
    "\3\0\12\6\1\u014a\17\6\10\0\4\6\1\45\3\0"+
    "\17\6\1\u014b\12\6\10\0\4\6\1\45\3\0\7\6"+
    "\1\u014c\22\6\10\0\4\6\1\45\3\0\12\6\1\u014d"+
    "\17\6\10\0\4\6\1\45\3\0\17\6\1\u014e\12\6"+
    "\10\0\4\6\1\45\3\0\6\6\1\u014f\23\6\10\0"+
    "\4\6\1\45\3\0\20\6\1\u0150\11\6\10\0\4\6"+
    "\1\45\3\0\13\6\1\u0151\16\6\10\0\4\6\1\45"+
    "\3\0\7\6\1\u0152\22\6\10\0\4\6\1\45\3\0"+
    "\2\6\1\u0153\27\6\10\0\4\6\1\45\3\0\4\6"+
    "\1\u0154\25\6\10\0\4\6\1\45\3\0\17\6\1\u0155"+
    "\12\6\10\0\1\u0156\1\u0157\50\0\4\6\1\45\3\0"+
    "\2\6\1\u0158\27\6\10\0\4\6\1\45\3\0\13\6"+
    "\1\u0159\16\6\10\0\4\6\1\45\3\0\1\6\1\u015a"+
    "\30\6\10\0\4\6\1\45\3\0\24\6\1\u015b\5\6"+
    "\10\0\4\6\1\45\3\0\20\6\1\u015c\11\6\10\0"+
    "\4\6\1\45\3\0\12\6\1\u015d\17\6\10\0\4\6"+
    "\1\45\3\0\12\6\1\u015e\17\6\10\0\4\6\1\45"+
    "\3\0\16\6\1\u015f\13\6\10\0\4\6\1\45\3\0"+
    "\12\6\1\u0160\17\6\10\0\4\6\1\45\3\0\12\6"+
    "\1\u0161\17\6\10\0\4\6\1\45\3\0\17\6\1\u0162"+
    "\12\6\10\0\4\6\1\45\3\0\2\6\1\u0163\27\6"+
    "\10\0\4\6\1\45\3\0\12\6\1\u0164\17\6\10\0"+
    "\4\6\1\45\3\0\16\6\1\u0165\13\6\10\0\4\6"+
    "\1\45\3\0\12\6\1\u0166\17\6\10\0\4\6\1\45"+
    "\3\0\2\6\1\u0167\27\6\10\0\4\6\1\45\3\0"+
    "\23\6\1\u0168\6\6\10\0\4\6\1\45\3\0\17\6"+
    "\1\u0169\12\6\10\0\4\6\1\45\3\0\1\6\1\u016a"+
    "\3\6\1\u016b\24\6\10\0\4\6\1\45\3\0\22\6"+
    "\1\u016c\7\6\10\0\4\6\1\45\3\0\15\6\1\u016d"+
    "\14\6\10\0\4\6\1\45\3\0\11\6\1\u016e\20\6"+
    "\10\0\4\6\1\45\3\0\27\6\1\u016f\2\6\10\0"+
    "\4\6\1\45\3\0\23\6\1\u0170\6\6\10\0\4\6"+
    "\1\45\3\0\13\6\1\u0171\16\6\10\0\4\6\1\45"+
    "\3\0\12\6\1\u0172\17\6\10\0\4\6\1\45\3\0"+
    "\13\6\1\u0173\16\6\10\0\4\6\1\45\3\0\13\6"+
    "\1\u0174\16\6\10\0\4\6\1\45\3\0\13\6\1\u0175"+
    "\16\6\10\0\4\6\1\45\3\0\2\6\1\u0176\27\6"+
    "\10\0\4\6\1\45\3\0\13\6\1\u0177\16\6\10\0"+
    "\4\6\1\45\3\0\16\6\1\u0178\13\6\10\0\4\6"+
    "\1\45\3\0\12\6\1\u0179\17\6\10\0\4\6\1\45"+
    "\3\0\24\6\1\u017a\5\6\10\0\4\6\1\45\3\0"+
    "\13\6\1\u017b\16\6\10\0\4\6\1\45\3\0\1\6"+
    "\1\u017c\30\6\10\0\4\6\1\45\3\0\12\6\1\u017d"+
    "\4\6\1\u017e\12\6\10\0\4\6\1\45\3\0\2\6"+
    "\1\u017f\27\6\10\0\4\6\1\45\3\0\20\6\1\u0180"+
    "\11\6\10\0\4\6\1\45\3\0\16\6\1\u0181\13\6"+
    "\11\0\1\u0157\50\0\1\u0182\51\0\4\6\1\45\3\0"+
    "\13\6\1\u0183\16\6\10\0\4\6\1\45\3\0\20\6"+
    "\1\u0184\11\6\10\0\4\6\1\45\3\0\24\6\1\u0185"+
    "\5\6\10\0\4\6\1\45\3\0\1\6\1\u0186\30\6"+
    "\10\0\4\6\1\45\3\0\7\6\1\u0187\22\6\10\0"+
    "\4\6\1\45\3\0\5\6\1\u0188\24\6\10\0\4\6"+
    "\1\45\3\0\7\6\1\u0189\22\6\10\0\4\6\1\45"+
    "\3\0\5\6\1\u018a\24\6\10\0\4\6\1\45\3\0"+
    "\5\6\1\u018b\24\6\10\0\4\6\1\45\3\0\15\6"+
    "\1\u018c\14\6\10\0\4\6\1\45\3\0\20\6\1\u018d"+
    "\11\6\10\0\4\6\1\45\3\0\2\6\1\u018e\27\6"+
    "\10\0\1\6\1\u018f\2\6\1\45\3\0\32\6\10\0"+
    "\4\6\1\45\3\0\10\6\1\u0190\21\6\10\0\4\6"+
    "\1\45\3\0\12\6\1\u0191\17\6\10\0\4\6\1\45"+
    "\3\0\16\6\1\u0192\13\6\10\0\4\6\1\45\3\0"+
    "\24\6\1\u0193\5\6\10\0\4\6\1\45\3\0\12\6"+
    "\1\u0194\17\6\10\0\1\6\1\u0195\2\6\1\45\3\0"+
    "\32\6\10\0\4\6\1\45\3\0\6\6\1\u0196\23\6"+
    "\10\0\4\6\1\45\3\0\1\6\1\u0197\30\6\10\0"+
    "\1\6\1\u0198\2\6\1\45\3\0\32\6\10\0\4\6"+
    "\1\45\3\0\12\6\1\u0199\17\6\10\0\4\6\1\45"+
    "\3\0\11\6\1\u019a\20\6\10\0\4\6\1\45\3\0"+
    "\3\6\1\u019b\26\6\10\0\4\6\1\45\3\0\12\6"+
    "\1\u019c\17\6\10\0\4\6\1\45\3\0\2\6\1\u019d"+
    "\27\6\10\0\4\6\1\45\3\0\13\6\1\u019e\16\6"+
    "\10\0\4\6\1\45\3\0\13\6\1\u019f\16\6\10\0"+
    "\4\6\1\45\3\0\16\6\1\u01a0\13\6\10\0\4\6"+
    "\1\45\3\0\12\6\1\u01a1\17\6\10\0\4\6\1\45"+
    "\3\0\2\6\1\u01a2\27\6\10\0\1\u01a3\51\0\4\6"+
    "\1\45\3\0\12\6\1\u01a4\17\6\10\0\4\6\1\45"+
    "\3\0\16\6\1\u01a5\13\6\10\0\4\6\1\45\3\0"+
    "\13\6\1\u01a6\16\6\10\0\4\6\1\45\3\0\15\6"+
    "\1\u01a7\14\6\10\0\4\6\1\45\3\0\12\6\1\u01a8"+
    "\17\6\10\0\4\6\1\45\3\0\3\6\1\u01a9\26\6"+
    "\10\0\4\6\1\45\3\0\12\6\1\u01aa\17\6\10\0"+
    "\4\6\1\45\3\0\12\6\1\u01ab\17\6\10\0\4\6"+
    "\1\45\3\0\13\6\1\u01ac\16\6\10\0\4\6\1\45"+
    "\3\0\12\6\1\u01ad\17\6\10\0\1\6\1\u01ae\2\6"+
    "\1\45\3\0\32\6\10\0\4\6\1\45\3\0\17\6"+
    "\1\u01af\12\6\10\0\4\6\1\45\3\0\23\6\1\u01b0"+
    "\6\6\10\0\4\6\1\45\3\0\2\6\1\u01b1\27\6"+
    "\10\0\4\6\1\45\3\0\24\6\1\u01b2\5\6\10\0"+
    "\4\6\1\45\3\0\15\6\1\u01b3\14\6\10\0\4\6"+
    "\1\45\3\0\13\6\1\u01b4\16\6\10\0\4\6\1\45"+
    "\3\0\12\6\1\u01b5\17\6\10\0\4\6\1\45\3\0"+
    "\13\6\1\u01b6\16\6\10\0\4\6\1\45\3\0\14\6"+
    "\1\u01b7\15\6\10\0\4\6\1\45\3\0\7\6\1\u01b8"+
    "\22\6\10\0\4\6\1\45\3\0\7\6\1\u01b9\22\6"+
    "\10\0\1\6\1\u01ba\2\6\1\45\3\0\32\6\10\0"+
    "\4\6\1\45\3\0\17\6\1\u01bb\12\6\10\0\4\6"+
    "\1\45\3\0\12\6\1\u01bc\17\6\10\0\4\6\1\45"+
    "\3\0\2\6\1\u01bd\27\6\10\0\4\6\1\45\3\0"+
    "\7\6\1\u01be\22\6\10\0\4\6\1\45\3\0\17\6"+
    "\1\u01bf\12\6\10\0\4\6\1\45\3\0\17\6\1\u01c0"+
    "\12\6\10\0\4\6\1\45\3\0\2\6\1\u01c1\27\6"+
    "\10\0\4\6\1\45\3\0\2\6\1\u01c2\27\6\10\0"+
    "\4\6\1\45\3\0\2\6\1\u01c3\27\6\10\0\4\6"+
    "\1\45\3\0\23\6\1\u01c4\6\6\10\0\4\6\1\45"+
    "\3\0\2\6\1\u01c5\27\6\10\0\1\6\1\u01c6\2\6"+
    "\1\45\3\0\32\6\10\0\4\6\1\45\3\0\15\6"+
    "\1\u01c7\14\6\10\0\4\6\1\45\3\0\16\6\1\u01c8"+
    "\13\6\10\0\4\6\1\45\3\0\17\6\1\u01c9\12\6"+
    "\10\0\4\6\1\45\3\0\3\6\1\u01ca\26\6\10\0"+
    "\4\6\1\45\3\0\12\6\1\u01cb\17\6\10\0\4\6"+
    "\1\45\3\0\23\6\1\u01cc\6\6\10\0\4\6\1\45"+
    "\3\0\16\6\1\u01cd\13\6\10\0\4\6\1\45\3\0"+
    "\23\6\1\u01ce\6\6\10\0\4\6\1\45\3\0\13\6"+
    "\1\u01cf\16\6\10\0\4\6\1\45\3\0\16\6\1\u01d0"+
    "\13\6\10\0\4\6\1\45\3\0\16\6\1\u01d1\13\6"+
    "\10\0\4\6\1\45\3\0\13\6\1\u01d2\16\6\10\0"+
    "\4\6\1\45\3\0\13\6\1\u01d3\16\6\10\0\4\6"+
    "\1\45\3\0\13\6\1\u01d4\16\6\10\0\4\6\1\45"+
    "\3\0\1\6\1\u01d5\30\6\10\0\4\6\1\45\3\0"+
    "\15\6\1\u01d6\14\6\10\0\4\6\1\45\3\0\13\6"+
    "\1\u01d7\16\6\10\0\4\6\1\45\3\0\1\6\1\u01d8"+
    "\30\6\10\0\4\6\1\45\3\0\16\6\1\u01d9\13\6"+
    "\10\0\4\6\1\45\3\0\17\6\1\u01da\12\6\10\0"+
    "\4\6\1\45\3\0\2\6\1\u01db\27\6\10\0\4\6"+
    "\1\45\3\0\12\6\1\u01dc\17\6\10\0\4\6\1\45"+
    "\3\0\2\6\1\u01dd\27\6\10\0\4\6\1\45\3\0"+
    "\2\6\1\u01de\27\6\10\0\4\6\1\45\3\0\15\6"+
    "\1\u01df\14\6\10\0\4\6\1\45\3\0\15\6\1\u01e0"+
    "\14\6\10\0\4\6\1\45\3\0\13\6\1\u01e1\16\6"+
    "\10\0\4\6\1\45\3\0\13\6\1\u01e2\16\6\10\0"+
    "\4\6\1\45\3\0\1\6\1\u01e3\30\6\10\0\4\6"+
    "\1\45\3\0\10\6\1\u01e4\21\6\10\0\4\6\1\45"+
    "\3\0\2\6\1\u01e5\27\6\10\0\4\6\1\45\3\0"+
    "\10\6\1\u01e6\21\6\10\0\4\6\1\45\3\0\23\6"+
    "\1\u01e7\6\6\10\0\4\6\1\45\3\0\12\6\1\u01e8"+
    "\17\6\10\0\4\6\1\45\3\0\1\6\1\u01e9\30\6"+
    "\10\0\4\6\1\45\3\0\10\6\1\u01ea\21\6\10\0"+
    "\4\6\1\45\3\0\12\6\1\u01eb\17\6\10\0\4\6"+
    "\1\45\3\0\17\6\1\u01ec\12\6\10\0\4\6\1\45"+
    "\3\0\2\6\1\u01ed\27\6\10\0\4\6\1\45\3\0"+
    "\13\6\1\u01ee\16\6\10\0\4\6\1\45\3\0\20\6"+
    "\1\u01ef\11\6\10\0\4\6\1\45\3\0\15\6\1\u01f0"+
    "\14\6\10\0\4\6\1\45\3\0\12\6\1\u01f1\17\6"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17346];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\4\11\1\0\1\11\1\0\2\1"+
    "\1\0\2\11\64\1\3\0\100\1\1\0\1\11\103\1"+
    "\1\0\71\1\1\0\65\1\2\0\113\1\1\11\116\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _YangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _YangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 94: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 95: break;
          case 3: 
            { return YANG_H_IDENTIFIER;
            } 
            // fall through
          case 96: break;
          case 4: 
            { return YANG_H_SEMICOLON;
            } 
            // fall through
          case 97: break;
          case 5: 
            { return YANG_H_OPERATORS;
            } 
            // fall through
          case 98: break;
          case 6: 
            { return YANG_H_LEFT_BRACE;
            } 
            // fall through
          case 99: break;
          case 7: 
            { return YANG_H_RIGHT_BRACE;
            } 
            // fall through
          case 100: break;
          case 8: 
            { return YANG_H_STRING;
            } 
            // fall through
          case 101: break;
          case 9: 
            { return YANG_H_EXTENSION_IDENTIFIER;
            } 
            // fall through
          case 102: break;
          case 10: 
            { return YANG_H_SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 103: break;
          case 11: 
            { return YANG_H_INVALID_ESCAPE;
            } 
            // fall through
          case 104: break;
          case 12: 
            { return YANG_H_VALID_ESCAPE;
            } 
            // fall through
          case 105: break;
          case 13: 
            { return YANG_H_ADD_KEYWORD;
            } 
            // fall through
          case 106: break;
          case 14: 
            { return YANG_H_MAX_KEYWORD;
            } 
            // fall through
          case 107: break;
          case 15: 
            { return YANG_H_MIN_KEYWORD;
            } 
            // fall through
          case 108: break;
          case 16: 
            { return YANG_H_RPC_KEYWORD;
            } 
            // fall through
          case 109: break;
          case 17: 
            { return YANG_H_BIT_KEYWORD;
            } 
            // fall through
          case 110: break;
          case 18: 
            { return YANG_H_KEY_KEYWORD;
            } 
            // fall through
          case 111: break;
          case 19: 
            { return YANG_H_BLOCK_COMMENT;
            } 
            // fall through
          case 112: break;
          case 20: 
            { return YANG_H_MUST_KEYWORD;
            } 
            // fall through
          case 113: break;
          case 21: 
            { return YANG_H_LEAF_KEYWORD;
            } 
            // fall through
          case 114: break;
          case 22: 
            { return YANG_H_LIST_KEYWORD;
            } 
            // fall through
          case 115: break;
          case 23: 
            { return YANG_H_USER_KEYWORD;
            } 
            // fall through
          case 116: break;
          case 24: 
            { return YANG_H_USES_KEYWORD;
            } 
            // fall through
          case 117: break;
          case 25: 
            { return YANG_H_ENUM_KEYWORD;
            } 
            // fall through
          case 118: break;
          case 26: 
            { return YANG_H_TYPE_KEYWORD;
            } 
            // fall through
          case 119: break;
          case 27: 
            { return YANG_H_TRUE_KEYWORD;
            } 
            // fall through
          case 120: break;
          case 28: 
            { return YANG_H_BASE_KEYWORD;
            } 
            // fall through
          case 121: break;
          case 29: 
            { return YANG_H_CASE_KEYWORD;
            } 
            // fall through
          case 122: break;
          case 30: 
            { return YANG_H_PATH_KEYWORD;
            } 
            // fall through
          case 123: break;
          case 31: 
            { return YANG_H_WHEN_KEYWORD;
            } 
            // fall through
          case 124: break;
          case 32: 
            { return YANG_H_RANGE_KEYWORD;
            } 
            // fall through
          case 125: break;
          case 33: 
            { return YANG_H_UNITS_KEYWORD;
            } 
            // fall through
          case 126: break;
          case 34: 
            { return YANG_H_INPUT_KEYWORD;
            } 
            // fall through
          case 127: break;
          case 35: 
            { return YANG_H_FALSE_KEYWORD;
            } 
            // fall through
          case 128: break;
          case 36: 
            { return YANG_H_VALUE_KEYWORD;
            } 
            // fall through
          case 129: break;
          case 37: 
            { return YANG_H_ANYXML_KEYWORD;
            } 
            // fall through
          case 130: break;
          case 38: 
            { return YANG_H_MODULE_KEYWORD;
            } 
            // fall through
          case 131: break;
          case 39: 
            { return YANG_H_LENGTH_KEYWORD;
            } 
            // fall through
          case 132: break;
          case 40: 
            { return YANG_H_REFINE_KEYWORD;
            } 
            // fall through
          case 133: break;
          case 41: 
            { return YANG_H_UNIQUE_KEYWORD;
            } 
            // fall through
          case 134: break;
          case 42: 
            { return YANG_H_SYSTEM_KEYWORD;
            } 
            // fall through
          case 135: break;
          case 43: 
            { return YANG_H_STATUS_KEYWORD;
            } 
            // fall through
          case 136: break;
          case 44: 
            { return YANG_H_OUTPUT_KEYWORD;
            } 
            // fall through
          case 137: break;
          case 45: 
            { return YANG_H_IMPORT_KEYWORD;
            } 
            // fall through
          case 138: break;
          case 46: 
            { return YANG_H_CONFIG_KEYWORD;
            } 
            // fall through
          case 139: break;
          case 47: 
            { return YANG_H_CHOICE_KEYWORD;
            } 
            // fall through
          case 140: break;
          case 48: 
            { return YANG_H_DELETE_KEYWORD;
            } 
            // fall through
          case 141: break;
          case 49: 
            { return YANG_H_PREFIX_KEYWORD;
            } 
            // fall through
          case 142: break;
          case 50: 
            { return YANG_H_AUGMENT_KEYWORD;
            } 
            // fall through
          case 143: break;
          case 51: 
            { return YANG_H_REPLACE_KEYWORD;
            } 
            // fall through
          case 144: break;
          case 52: 
            { return YANG_H_TYPEDEF_KEYWORD;
            } 
            // fall through
          case 145: break;
          case 53: 
            { return YANG_H_INCLUDE_KEYWORD;
            } 
            // fall through
          case 146: break;
          case 54: 
            { return YANG_H_CURRENT_KEYWORD;
            } 
            // fall through
          case 147: break;
          case 55: 
            { return YANG_H_CONTACT_KEYWORD;
            } 
            // fall through
          case 148: break;
          case 56: 
            { return YANG_H_FEATURE_KEYWORD;
            } 
            // fall through
          case 149: break;
          case 57: 
            { return YANG_H_DEFAULT_KEYWORD;
            } 
            // fall through
          case 150: break;
          case 58: 
            { return YANG_H_DEVIATE_KEYWORD;
            } 
            // fall through
          case 151: break;
          case 59: 
            { return YANG_H_PATTERN_KEYWORD;
            } 
            // fall through
          case 152: break;
          case 60: 
            { return YANG_H_DATE_ARG;
            } 
            // fall through
          case 153: break;
          case 61: 
            { return YANG_H_ARGUMENT_KEYWORD;
            } 
            // fall through
          case 154: break;
          case 62: 
            { return YANG_H_REVISION_KEYWORD;
            } 
            // fall through
          case 155: break;
          case 63: 
            { return YANG_H_GROUPING_KEYWORD;
            } 
            // fall through
          case 156: break;
          case 64: 
            { return YANG_H_OBSOLETE_KEYWORD;
            } 
            // fall through
          case 157: break;
          case 65: 
            { return YANG_H_IDENTITY_KEYWORD;
            } 
            // fall through
          case 158: break;
          case 66: 
            { return YANG_H_PRESENCE_KEYWORD;
            } 
            // fall through
          case 159: break;
          case 67: 
            { return YANG_H_POSITION_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 68: 
            { return YANG_H_NAMESPACE_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 69: 
            { return YANG_H_MANDATORY_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 70: 
            { return YANG_H_LEAF_LIST_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 71: 
            { return YANG_H_REFERENCE_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 72: 
            { return YANG_H_UNBOUNDED_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 73: 
            { return YANG_H_EXTENSION_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 74: 
            { return YANG_H_SUBMODULE_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 75: 
            { return YANG_H_CONTAINER_KEYWORD;
            } 
            // fall through
          case 168: break;
          case 76: 
            { return YANG_H_DEVIATION_KEYWORD;
            } 
            // fall through
          case 169: break;
          case 77: 
            { return YANG_H_BELONGS_TO_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 78: 
            { return YANG_H_ORDERED_BY_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 79: 
            { return YANG_H_IF_FEATURE_KEYWORD;
            } 
            // fall through
          case 172: break;
          case 80: 
            { return YANG_H_DEPRECATED_KEYWORD;
            } 
            // fall through
          case 173: break;
          case 81: 
            { return YANG_H_YIN_ELEMENT_KEYWORD;
            } 
            // fall through
          case 174: break;
          case 82: 
            { return YANG_H_DESCRIPTION_KEYWORD;
            } 
            // fall through
          case 175: break;
          case 83: 
            { return YANG_H_NOTIFICATION_KEYWORD;
            } 
            // fall through
          case 176: break;
          case 84: 
            { return YANG_H_YANG_VERSION_KEYWORD;
            } 
            // fall through
          case 177: break;
          case 85: 
            { return YANG_H_MAX_ELEMENTS_KEYWORD;
            } 
            // fall through
          case 178: break;
          case 86: 
            { return YANG_H_MIN_ELEMENTS_KEYWORD;
            } 
            // fall through
          case 179: break;
          case 87: 
            { return YANG_H_ORGANIZATION_KEYWORD;
            } 
            // fall through
          case 180: break;
          case 88: 
            { return YANG_H_NOT_SUPPORTED_KEYWORD;
            } 
            // fall through
          case 181: break;
          case 89: 
            { return YANG_H_REVISION_DATE_KEYWORD;
            } 
            // fall through
          case 182: break;
          case 90: 
            { return YANG_H_ERROR_APP_TAG_KEYWORD;
            } 
            // fall through
          case 183: break;
          case 91: 
            { return YANG_H_ERROR_MESSAGE_KEYWORD;
            } 
            // fall through
          case 184: break;
          case 92: 
            { return YANG_H_FRACTION_DIGITS_KEYWORD;
            } 
            // fall through
          case 185: break;
          case 93: 
            { return YANG_H_REQUIRE_INSTANCE_KEYWORD;
            } 
            // fall through
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
