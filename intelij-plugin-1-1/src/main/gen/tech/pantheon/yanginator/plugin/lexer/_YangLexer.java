/*
 *
 *   Copyright (c) 2021 PANTHEON.tech, s.r.o. All rights reserved.
 *
 *   This program and the accompanying materials are made available under the
 *   terms of the Eclipse Public License v1.0 which accompanies this distribution,
 *   and is available at http://www.eclipse.org/legal/epl-v10.html
 *
 */

/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package tech.pantheon.yanginator.plugin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ALPHA;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_AMPERSAND;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ASTERISK;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_AT_SIGN;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_BLOCK_COMMENT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_CLOSED_BRACKET;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_COLON;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_COMMA;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DASH;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOLLAR_SIGN;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOUBLE_COLON;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOUBLE_DOT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOUBLE_FORWARD_SLASH;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_DOUBLE_QUOTE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_EIGHT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_EQUALS;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_EXCLAMATION_MARK;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_FIVE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_FORWARD_SLASH;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_FOUR;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_HASH;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_LEFT_BRACE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_LEFT_PARENTHESIS;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_NINE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ONE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_OPEN_BRACKET;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_PARENT_FOLDER;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_PERCENT_SIGN;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_PIPE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_PLUS_SIGN;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_QUESTION_MARK;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_RIGHT_BRACE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_RIGHT_PARENTHESIS;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SEMICOLON;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SEVEN;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SINGLE_QUOTE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SIX;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_SPACE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_THREE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_TILDE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_TWO;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_UNDERSCORE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ZERO;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_ZERO_LENGHT_STRING;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_YangLexer.flex</tt>
 */
public class _YangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\47\22\0\1\47\1\35\1\3\1\36\1\37\1\40\1\41\1\4\1\13\1\14\1\2\1\42\1"+
    "\43\1\12\1\11\1\20\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\6\1"+
    "\5\1\0\1\15\1\0\1\44\1\45\32\34\1\16\1\0\1\17\1\0\1\1\1\0\32\34\1\7\1\21\1"+
    "\10\1\46\6\0\1\47\32\0\1\47\337\0\1\47\177\0\13\47\35\0\2\47\5\0\1\47\57\0"+
    "\1\47\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\0\1\54\1\55\1\0\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\50\0\50\0\50\0\50\0\50\0\120"+
    "\0\50\0\50\0\170\0\50\0\50\0\50\0\50\0\50"+
    "\0\50\0\240\0\50\0\50\0\50\0\50\0\50\0\50"+
    "\0\50\0\50\0\50\0\50\0\50\0\50\0\50\0\50"+
    "\0\50\0\50\0\50\0\50\0\50\0\50\0\50\0\50"+
    "\0\50\0\50\0\310\0\360\0\50\0\50\0\u0118\0\50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\56\0\1\52\52\0\1\53\40\0\1\54\15\0\1\55"+
    "\47\0\1\56\27\0\2\54\1\57\47\54\1\57\15\54"+
    "\1\60\27\54";

  private static int [] zzUnpackTrans() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\6\11\1\1\2\11\1\1\6\11\1\1\30\11"+
    "\1\1\1\0\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _YangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _YangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return YANG_ZERO_LENGHT_STRING;
            } 
            // fall through
          case 47: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 48: break;
          case 3: 
            { return YANG_UNDERSCORE;
            } 
            // fall through
          case 49: break;
          case 4: 
            { return YANG_ASTERISK;
            } 
            // fall through
          case 50: break;
          case 5: 
            { return YANG_DOUBLE_QUOTE;
            } 
            // fall through
          case 51: break;
          case 6: 
            { return YANG_SINGLE_QUOTE;
            } 
            // fall through
          case 52: break;
          case 7: 
            { return YANG_SEMICOLON;
            } 
            // fall through
          case 53: break;
          case 8: 
            { return YANG_COLON;
            } 
            // fall through
          case 54: break;
          case 9: 
            { return YANG_LEFT_BRACE;
            } 
            // fall through
          case 55: break;
          case 10: 
            { return YANG_RIGHT_BRACE;
            } 
            // fall through
          case 56: break;
          case 11: 
            { return YANG_DOT;
            } 
            // fall through
          case 57: break;
          case 12: 
            { return YANG_DASH;
            } 
            // fall through
          case 58: break;
          case 13: 
            { return YANG_LEFT_PARENTHESIS;
            } 
            // fall through
          case 59: break;
          case 14: 
            { return YANG_RIGHT_PARENTHESIS;
            } 
            // fall through
          case 60: break;
          case 15: 
            { return YANG_EQUALS;
            } 
            // fall through
          case 61: break;
          case 16: 
            { return YANG_OPEN_BRACKET;
            } 
            // fall through
          case 62: break;
          case 17: 
            { return YANG_CLOSED_BRACKET;
            } 
            // fall through
          case 63: break;
          case 18: 
            { return YANG_FORWARD_SLASH;
            } 
            // fall through
          case 64: break;
          case 19: 
            { return YANG_PIPE;
            } 
            // fall through
          case 65: break;
          case 20: 
            { return YANG_ZERO;
            } 
            // fall through
          case 66: break;
          case 21: 
            { return YANG_ONE;
            } 
            // fall through
          case 67: break;
          case 22: 
            { return YANG_TWO;
            } 
            // fall through
          case 68: break;
          case 23: 
            { return YANG_THREE;
            } 
            // fall through
          case 69: break;
          case 24: 
            { return YANG_FOUR;
            } 
            // fall through
          case 70: break;
          case 25: 
            { return YANG_FIVE;
            } 
            // fall through
          case 71: break;
          case 26: 
            { return YANG_SIX;
            } 
            // fall through
          case 72: break;
          case 27: 
            { return YANG_SEVEN;
            } 
            // fall through
          case 73: break;
          case 28: 
            { return YANG_EIGHT;
            } 
            // fall through
          case 74: break;
          case 29: 
            { return YANG_NINE;
            } 
            // fall through
          case 75: break;
          case 30: 
            { return YANG_ALPHA;
            } 
            // fall through
          case 76: break;
          case 31: 
            { return YANG_EXCLAMATION_MARK;
            } 
            // fall through
          case 77: break;
          case 32: 
            { return YANG_HASH;
            } 
            // fall through
          case 78: break;
          case 33: 
            { return YANG_DOLLAR_SIGN;
            } 
            // fall through
          case 79: break;
          case 34: 
            { return YANG_PERCENT_SIGN;
            } 
            // fall through
          case 80: break;
          case 35: 
            { return YANG_AMPERSAND;
            } 
            // fall through
          case 81: break;
          case 36: 
            { return YANG_PLUS_SIGN;
            } 
            // fall through
          case 82: break;
          case 37: 
            { return YANG_COMMA;
            } 
            // fall through
          case 83: break;
          case 38: 
            { return YANG_QUESTION_MARK;
            } 
            // fall through
          case 84: break;
          case 39: 
            { return YANG_AT_SIGN;
            } 
            // fall through
          case 85: break;
          case 40: 
            { return YANG_TILDE;
            } 
            // fall through
          case 86: break;
          case 41: 
            { return YANG_SPACE;
            } 
            // fall through
          case 87: break;
          case 42: 
            { return YANG_DOUBLE_COLON;
            } 
            // fall through
          case 88: break;
          case 43: 
            { return YANG_DOUBLE_DOT;
            } 
            // fall through
          case 89: break;
          case 44: 
            { return YANG_DOUBLE_FORWARD_SLASH;
            } 
            // fall through
          case 90: break;
          case 45: 
            { return YANG_PARENT_FOLDER;
            } 
            // fall through
          case 91: break;
          case 46: 
            { return YANG_BLOCK_COMMENT;
            } 
            // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
